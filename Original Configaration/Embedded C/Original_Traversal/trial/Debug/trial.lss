
trial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00003636  000036ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800206  00800206  000036d0  2**0
                  ALLOC
  3 .stab         00003504  00000000  00000000  000036d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a39  00000000  00000000  00006bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00007610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035ed  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004af  00000000  00000000  0000acbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3c  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  0000c0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000816  00000000  00000000  0000c980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032a3  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00010439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_5>
      18:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_51>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lfind+0x16>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e6 e3       	ldi	r30, 0x36	; 54
     17e:	f6 e3       	ldi	r31, 0x36	; 54
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a6 30       	cpi	r26, 0x06	; 6
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a6 e0       	ldi	r26, 0x06	; 6
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a5 39       	cpi	r26, 0x95	; 149
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <main>
     1a4:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <velocity>:

unsigned char ADC_Conversion(unsigned char);

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     1ac:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     1b0:	60 93 2a 01 	sts	0x012A, r22
}
     1b4:	08 95       	ret

000001b6 <left_position_encoder_interrupt_init>:
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     1b6:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     1b8:	ea e6       	ldi	r30, 0x6A	; 106
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	82 60       	ori	r24, 0x02	; 2
     1c0:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     1c2:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     1c4:	78 94       	sei
}
     1c6:	08 95       	ret

000001c8 <right_position_encoder_interrupt_init>:
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     1c8:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     1ca:	ea e6       	ldi	r30, 0x6A	; 106
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	88 60       	ori	r24, 0x08	; 8
     1d2:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     1d4:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     1d6:	78 94       	sei
}
     1d8:	08 95       	ret

000001da <make_correct_direction>:



void make_correct_direction (int dir)
{
	if (dir==90)
     1da:	8a 35       	cpi	r24, 0x5A	; 90
     1dc:	91 05       	cpc	r25, r1
     1de:	19 f4       	brne	.+6      	; 0x1e6 <make_correct_direction+0xc>
	{
		forward_cus();
     1e0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <forward_cus>
     1e4:	08 95       	ret
	}
	



	else if(dir==180)
     1e6:	84 3b       	cpi	r24, 0xB4	; 180
     1e8:	91 05       	cpc	r25, r1
     1ea:	19 f4       	brne	.+6      	; 0x1f2 <make_correct_direction+0x18>
	{   
		
	
		left_rotate();
     1ec:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <left_rotate>
     1f0:	08 95       	ret
		

	}
	
	
	else if(dir==-90)
     1f2:	2f ef       	ldi	r18, 0xFF	; 255
     1f4:	86 3a       	cpi	r24, 0xA6	; 166
     1f6:	92 07       	cpc	r25, r18
     1f8:	19 f4       	brne	.+6      	; 0x200 <make_correct_direction+0x26>
	{
		
		
		oneighty_rotate();
     1fa:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <oneighty_rotate>
     1fe:	08 95       	ret
	
	else
	{  
		
				
		right_rotate();
     200:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <right_rotate>
     204:	08 95       	ret

00000206 <lr_cus>:

	
	

	
	make_correct_direction(xxx);
     206:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
	
	forwarder();
     20a:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>


}
     20e:	08 95       	ret

00000210 <timer1_init>:



void timer1_init()
{
	TCCR1A = 0x00;
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	10 82       	st	Z, r1
	
	ICR1 = 1023; //TOP = 1023
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	90 93 87 00 	sts	0x0087, r25
     21e:	80 93 86 00 	sts	0x0086, r24
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     222:	2c ef       	ldi	r18, 0xFC	; 252
     224:	20 93 85 00 	sts	0x0085, r18
	TCNT1L = 0x01; //Counter low value to which OCR1xH value is to be compared with
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	20 93 84 00 	sts	0x0084, r18
	OCR1A = 1023;
     22e:	90 93 89 00 	sts	0x0089, r25
     232:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 1023;
     236:	90 93 8b 00 	sts	0x008B, r25
     23a:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 1023;
     23e:	90 93 8d 00 	sts	0x008D, r25
     242:	80 93 8c 00 	sts	0x008C, r24
	TCCR1A = 0xAB;
     246:	8b ea       	ldi	r24, 0xAB	; 171
     248:	80 83       	st	Z, r24

	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     24a:	8c e0       	ldi	r24, 0x0C	; 12
     24c:	80 93 81 00 	sts	0x0081, r24
}
     250:	08 95       	ret

00000252 <uart2_init>:



void uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
     252:	e1 ed       	ldi	r30, 0xD1	; 209
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
	UCSR2A = 0x00;
     258:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2C = 0x06;
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	80 93 d2 00 	sts	0x00D2, r24
	UBRR2L = 0x5F; //set baud rate lo
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	80 93 d4 00 	sts	0x00D4, r24
	UBRR2H = 0x00; //set baud rate hi
     268:	10 92 d5 00 	sts	0x00D5, r1
	UCSR2B = 0x98;
     26c:	88 e9       	ldi	r24, 0x98	; 152
     26e:	80 83       	st	Z, r24
}
     270:	08 95       	ret

00000272 <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     272:	87 b1       	in	r24, 0x07	; 7
     274:	87 6f       	ori	r24, 0xF7	; 247
     276:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x08; // all the LCD pins are set to logic 0 except PORTC 7
     278:	88 b1       	in	r24, 0x08	; 8
     27a:	88 70       	andi	r24, 0x08	; 8
     27c:	88 b9       	out	0x08, r24	; 8
}
     27e:	08 95       	ret

00000280 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_set_4bit+0x4>
     288:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     28a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     28c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     28e:	80 e3       	ldi	r24, 0x30	; 48
     290:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     292:	42 9a       	sbi	0x08, 2	; 8
     294:	ef ef       	ldi	r30, 0xFF	; 255
     296:	f7 e4       	ldi	r31, 0x47	; 71
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_set_4bit+0x18>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_set_4bit+0x1e>
     29e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2a0:	42 98       	cbi	0x08, 2	; 8
     2a2:	e6 e6       	ldi	r30, 0x66	; 102
     2a4:	fe e0       	ldi	r31, 0x0E	; 14
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_set_4bit+0x26>
     2aa:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ac:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2ae:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2b2:	42 9a       	sbi	0x08, 2	; 8
     2b4:	ef ef       	ldi	r30, 0xFF	; 255
     2b6:	f7 e4       	ldi	r31, 0x47	; 71
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcd_set_4bit+0x38>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <lcd_set_4bit+0x3e>
     2be:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2c0:	42 98       	cbi	0x08, 2	; 8
     2c2:	e6 e6       	ldi	r30, 0x66	; 102
     2c4:	fe e0       	ldi	r31, 0x0E	; 14
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_set_4bit+0x46>
     2ca:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2cc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2ce:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2d0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2d2:	42 9a       	sbi	0x08, 2	; 8
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	97 e4       	ldi	r25, 0x47	; 71
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_set_4bit+0x58>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_set_4bit+0x5e>
     2de:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2e0:	42 98       	cbi	0x08, 2	; 8
     2e2:	e6 e6       	ldi	r30, 0x66	; 102
     2e4:	fe e0       	ldi	r31, 0x0E	; 14
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_set_4bit+0x66>
     2ea:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2ee:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     2f0:	80 e2       	ldi	r24, 0x20	; 32
     2f2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2f4:	42 9a       	sbi	0x08, 2	; 8
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	97 e4       	ldi	r25, 0x47	; 71
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_set_4bit+0x7a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_set_4bit+0x80>
     300:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     302:	42 98       	cbi	0x08, 2	; 8

	
}
     304:	08 95       	ret

00000306 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     306:	98 b1       	in	r25, 0x08	; 8
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     30c:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     30e:	28 2f       	mov	r18, r24
     310:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     312:	92 2b       	or	r25, r18
     314:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     316:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     318:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     31a:	42 9a       	sbi	0x08, 2	; 8
     31c:	ef ef       	ldi	r30, 0xFF	; 255
     31e:	f7 e4       	ldi	r31, 0x47	; 71
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <lcd_wr_command+0x1a>
     324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_wr_command+0x20>
     326:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     328:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     32a:	98 b1       	in	r25, 0x08	; 8
     32c:	9f 70       	andi	r25, 0x0F	; 15
     32e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     330:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     332:	82 95       	swap	r24
     334:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     336:	89 2b       	or	r24, r25
     338:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     33a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     33c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     33e:	42 9a       	sbi	0x08, 2	; 8
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	97 e4       	ldi	r25, 0x47	; 71
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_wr_command+0x3e>
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_wr_command+0x44>
     34a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     34c:	42 98       	cbi	0x08, 2	; 8
}
     34e:	08 95       	ret

00000350 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     350:	0e 94 40 01 	call	0x280	; 0x280 <lcd_set_4bit>
     354:	86 e6       	ldi	r24, 0x66	; 102
     356:	9e e0       	ldi	r25, 0x0E	; 14
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x8>
     35c:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
	lcd_wr_command(0x01);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
	lcd_wr_command(0x06);
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
	lcd_wr_command(0x0E);
     370:	8e e0       	ldi	r24, 0x0E	; 14
     372:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
	lcd_wr_command(0x80);
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
		
}
     37c:	08 95       	ret

0000037e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     37e:	98 b1       	in	r25, 0x08	; 8
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     384:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     386:	28 2f       	mov	r18, r24
     388:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     38a:	92 2b       	or	r25, r18
     38c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     38e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     390:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     392:	42 9a       	sbi	0x08, 2	; 8
     394:	ef ef       	ldi	r30, 0xFF	; 255
     396:	f7 e4       	ldi	r31, 0x47	; 71
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_char+0x1a>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_wr_char+0x20>
     39e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3a0:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3a2:	98 b1       	in	r25, 0x08	; 8
     3a4:	9f 70       	andi	r25, 0x0F	; 15
     3a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3aa:	82 95       	swap	r24
     3ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3ae:	89 2b       	or	r24, r25
     3b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3b2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3b6:	42 9a       	sbi	0x08, 2	; 8
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	97 e4       	ldi	r25, 0x47	; 71
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_wr_char+0x3e>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_wr_char+0x44>
     3c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3c4:	42 98       	cbi	0x08, 2	; 8
}
     3c6:	08 95       	ret

000003c8 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
}
     3ce:	08 95       	ret

000003d0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3d6:	88 81       	ld	r24, Y
     3d8:	88 23       	and	r24, r24
     3da:	31 f0       	breq	.+12     	; 0x3e8 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3dc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3de:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3e2:	89 91       	ld	r24, Y+
     3e4:	88 23       	and	r24, r24
     3e6:	d9 f7       	brne	.-10     	; 0x3de <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	79 f0       	breq	.+30     	; 0x410 <lcd_cursor+0x22>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <lcd_cursor+0xe>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	c9 f4       	brne	.+50     	; 0x42c <lcd_cursor+0x3e>
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <lcd_cursor+0x18>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	69 f0       	breq	.+26     	; 0x41a <lcd_cursor+0x2c>
     400:	84 30       	cpi	r24, 0x04	; 4
     402:	a1 f4       	brne	.+40     	; 0x42c <lcd_cursor+0x3e>
     404:	0f c0       	rjmp	.+30     	; 0x424 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     406:	86 2f       	mov	r24, r22
     408:	81 58       	subi	r24, 0x81	; 129
     40a:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
     40e:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     410:	86 2f       	mov	r24, r22
     412:	81 54       	subi	r24, 0x41	; 65
     414:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
     418:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     41a:	86 2f       	mov	r24, r22
     41c:	8d 56       	subi	r24, 0x6D	; 109
     41e:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
     422:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     424:	86 2f       	mov	r24, r22
     426:	8d 52       	subi	r24, 0x2D	; 45
     428:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
     42c:	08 95       	ret

0000042e <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	8a 01       	movw	r16, r20
     438:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     43a:	88 23       	and	r24, r24
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0x14>
     43e:	66 23       	and	r22, r22
     440:	19 f4       	brne	.+6      	; 0x448 <lcd_print+0x1a>
	{
		lcd_home();
     442:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_home>
     446:	02 c0       	rjmp	.+4      	; 0x44c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     448:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
	}
	if(digits==5 || flag==1)
     44c:	c5 30       	cpi	r28, 0x05	; 5
     44e:	d1 05       	cpc	r29, r1
     450:	71 f4       	brne	.+28     	; 0x46e <lcd_print+0x40>
	{
		million=value/10000+48;
     452:	c8 01       	movw	r24, r16
     454:	60 e1       	ldi	r22, 0x10	; 16
     456:	77 e2       	ldi	r23, 0x27	; 39
     458:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     45c:	cb 01       	movw	r24, r22
     45e:	c0 96       	adiw	r24, 0x30	; 48
     460:	90 93 45 02 	sts	0x0245, r25
     464:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(million);
     468:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     46e:	c4 30       	cpi	r28, 0x04	; 4
     470:	d1 05       	cpc	r29, r1
     472:	b9 f4       	brne	.+46     	; 0x4a2 <lcd_print+0x74>
	{
		temp = value/1000;
     474:	c8 01       	movw	r24, r16
     476:	68 ee       	ldi	r22, 0xE8	; 232
     478:	73 e0       	ldi	r23, 0x03	; 3
     47a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     47e:	cb 01       	movw	r24, r22
     480:	70 93 4e 02 	sts	0x024E, r23
     484:	60 93 4d 02 	sts	0x024D, r22
		thousand = temp%10 + 48;
     488:	6a e0       	ldi	r22, 0x0A	; 10
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     490:	c0 96       	adiw	r24, 0x30	; 48
     492:	90 93 8f 02 	sts	0x028F, r25
     496:	80 93 8e 02 	sts	0x028E, r24
		lcd_wr_char(thousand);
     49a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4a4:	c3 30       	cpi	r28, 0x03	; 3
     4a6:	d1 05       	cpc	r29, r1
     4a8:	11 f0       	breq	.+4      	; 0x4ae <lcd_print+0x80>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	b1 f4       	brne	.+44     	; 0x4da <lcd_print+0xac>
	{
		temp = value/100;
     4ae:	c8 01       	movw	r24, r16
     4b0:	64 e6       	ldi	r22, 0x64	; 100
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     4b8:	cb 01       	movw	r24, r22
     4ba:	70 93 4e 02 	sts	0x024E, r23
     4be:	60 93 4d 02 	sts	0x024D, r22
		hundred = temp%10 + 48;
     4c2:	6a e0       	ldi	r22, 0x0A	; 10
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     4ca:	c0 96       	adiw	r24, 0x30	; 48
     4cc:	90 93 8a 02 	sts	0x028A, r25
     4d0:	80 93 89 02 	sts	0x0289, r24
		lcd_wr_char(hundred);
     4d4:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4da:	c2 30       	cpi	r28, 0x02	; 2
     4dc:	d1 05       	cpc	r29, r1
     4de:	11 f0       	breq	.+4      	; 0x4e4 <lcd_print+0xb6>
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	b1 f4       	brne	.+44     	; 0x510 <lcd_print+0xe2>
	{
		temp = value/10;
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	c8 01       	movw	r24, r16
     4ea:	b9 01       	movw	r22, r18
     4ec:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     4f0:	cb 01       	movw	r24, r22
     4f2:	70 93 4e 02 	sts	0x024E, r23
     4f6:	60 93 4d 02 	sts	0x024D, r22
		tens = temp%10 + 48;
     4fa:	b9 01       	movw	r22, r18
     4fc:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     500:	c0 96       	adiw	r24, 0x30	; 48
     502:	90 93 61 02 	sts	0x0261, r25
     506:	80 93 60 02 	sts	0x0260, r24
		lcd_wr_char(tens);
     50a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	d1 05       	cpc	r29, r1
     514:	11 f0       	breq	.+4      	; 0x51a <lcd_print+0xec>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	61 f4       	brne	.+24     	; 0x532 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     51a:	c8 01       	movw	r24, r16
     51c:	6a e0       	ldi	r22, 0x0A	; 10
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__udivmodhi4>
     524:	c0 96       	adiw	r24, 0x30	; 48
     526:	90 93 8d 02 	sts	0x028D, r25
     52a:	80 93 8c 02 	sts	0x028C, r24
		lcd_wr_char(unit);
     52e:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
	if(digits>5)
     532:	c6 30       	cpi	r28, 0x06	; 6
     534:	d1 05       	cpc	r29, r1
     536:	1c f0       	brlt	.+6      	; 0x53e <lcd_print+0x110>
	{
		lcd_wr_char('E');
     538:	85 e4       	ldi	r24, 0x45	; 69
     53a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
	
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <travell>:




int  travell( int l, int h, int *d)
{
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	fb 01       	movw	r30, r22
     556:	8a 01       	movw	r16, r20
	struct xy  a,b ;


	a.x =  l/10;
     558:	2a e0       	ldi	r18, 0x0A	; 10
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	b9 01       	movw	r22, r18
     55e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     562:	eb 01       	movw	r28, r22
     564:	7c 01       	movw	r14, r24
	a.y  = l%10 ;

	b.x = h/10;
     566:	cf 01       	movw	r24, r30
     568:	b9 01       	movw	r22, r18
     56a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
	b.y = h%10;

	int vert ;
	int horz ;

	vert = a.x - b.x;
     56e:	ce 01       	movw	r24, r28
     570:	86 1b       	sub	r24, r22
     572:	97 0b       	sbc	r25, r23
	horz = a.y - b.y;



	if(vert> 0)
     574:	18 16       	cp	r1, r24
     576:	19 06       	cpc	r1, r25
     578:	dc f5       	brge	.+118    	; 0x5f0 <travell+0xa8>

	{
                     
	if( *d == -90) {    forward_cus(); }
     57a:	f8 01       	movw	r30, r16
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	ff ef       	ldi	r31, 0xFF	; 255
     582:	86 3a       	cpi	r24, 0xA6	; 166
     584:	9f 07       	cpc	r25, r31
     586:	19 f4       	brne	.+6      	; 0x58e <travell+0x46>
     588:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <forward_cus>
     58c:	21 c0       	rjmp	.+66     	; 0x5d0 <travell+0x88>

else if( *d == 180) {  *d = -90 ; lr_cus(180); }
     58e:	84 3b       	cpi	r24, 0xB4	; 180
     590:	91 05       	cpc	r25, r1
     592:	51 f4       	brne	.+20     	; 0x5a8 <travell+0x60>
     594:	86 ea       	ldi	r24, 0xA6	; 166
     596:	9f ef       	ldi	r25, 0xFF	; 255
     598:	f8 01       	movw	r30, r16
     59a:	91 83       	std	Z+1, r25	; 0x01
     59c:	80 83       	st	Z, r24
     59e:	84 eb       	ldi	r24, 0xB4	; 180
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <travell+0x88>

		else if( *d == 90)   {  *d = -90 ;lr_cus(-90); }
     5a8:	8a 35       	cpi	r24, 0x5A	; 90
     5aa:	91 05       	cpc	r25, r1
     5ac:	41 f4       	brne	.+16     	; 0x5be <travell+0x76>
     5ae:	86 ea       	ldi	r24, 0xA6	; 166
     5b0:	9f ef       	ldi	r25, 0xFF	; 255
     5b2:	f8 01       	movw	r30, r16
     5b4:	91 83       	std	Z+1, r25	; 0x01
     5b6:	80 83       	st	Z, r24
     5b8:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <travell+0x88>


		else {   *d = -90 ; lr_cus(0);   }
     5be:	86 ea       	ldi	r24, 0xA6	; 166
     5c0:	9f ef       	ldi	r25, 0xFF	; 255
     5c2:	f8 01       	movw	r30, r16
     5c4:	91 83       	std	Z+1, r25	; 0x01
     5c6:	80 83       	st	Z, r24
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>


		return (a.x-1)*10+a.y;   
     5d0:	21 97       	sbiw	r28, 0x01	; 1
     5d2:	9e 01       	movw	r18, r28
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	ce 01       	movw	r24, r28
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	8e 0d       	add	r24, r14
     5ec:	9f 1d       	adc	r25, r15
     5ee:	b7 c0       	rjmp	.+366    	; 0x75e <travell+0x216>


	}


	else if(vert <0)
     5f0:	99 23       	and	r25, r25
     5f2:	ec f5       	brge	.+122    	; 0x66e <travell+0x126>

	{
                 

                if( *d == 90) { forward_cus();	  }
     5f4:	f8 01       	movw	r30, r16
     5f6:	80 81       	ld	r24, Z
     5f8:	91 81       	ldd	r25, Z+1	; 0x01
     5fa:	8a 35       	cpi	r24, 0x5A	; 90
     5fc:	91 05       	cpc	r25, r1
     5fe:	19 f4       	brne	.+6      	; 0x606 <travell+0xbe>
     600:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <forward_cus>
     604:	24 c0       	rjmp	.+72     	; 0x64e <travell+0x106>

                else if( *d == 180) {  *d = 90 ; lr_cus(0); }
     606:	84 3b       	cpi	r24, 0xB4	; 180
     608:	91 05       	cpc	r25, r1
     60a:	51 f4       	brne	.+20     	; 0x620 <travell+0xd8>
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	f8 01       	movw	r30, r16
     612:	91 83       	std	Z+1, r25	; 0x01
     614:	80 83       	st	Z, r24
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     61e:	17 c0       	rjmp	.+46     	; 0x64e <travell+0x106>

                else if( *d == -90)   {  *d = 90 ;   lr_cus(-90); }
     620:	ff ef       	ldi	r31, 0xFF	; 255
     622:	86 3a       	cpi	r24, 0xA6	; 166
     624:	9f 07       	cpc	r25, r31
     626:	51 f4       	brne	.+20     	; 0x63c <travell+0xf4>
     628:	8a e5       	ldi	r24, 0x5A	; 90
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	f8 01       	movw	r30, r16
     62e:	91 83       	std	Z+1, r25	; 0x01
     630:	80 83       	st	Z, r24
     632:	86 ea       	ldi	r24, 0xA6	; 166
     634:	9f ef       	ldi	r25, 0xFF	; 255
     636:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     63a:	09 c0       	rjmp	.+18     	; 0x64e <travell+0x106>


                else {   *d = 90 ; lr_cus(180);   }
     63c:	8a e5       	ldi	r24, 0x5A	; 90
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	f8 01       	movw	r30, r16
     642:	91 83       	std	Z+1, r25	; 0x01
     644:	80 83       	st	Z, r24
     646:	84 eb       	ldi	r24, 0xB4	; 180
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>

		return (a.x+1)*10+a.y; 
     64e:	21 96       	adiw	r28, 0x01	; 1
     650:	9e 01       	movw	r18, r28
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	ce 01       	movw	r24, r28
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	8e 0d       	add	r24, r14
     66a:	9f 1d       	adc	r25, r15
     66c:	78 c0       	rjmp	.+240    	; 0x75e <travell+0x216>

	a.x =  l/10;
	a.y  = l%10 ;

	b.x = h/10;
	b.y = h%10;
     66e:	cf 01       	movw	r24, r30
     670:	6a e0       	ldi	r22, 0x0A	; 10
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>

	int vert ;
	int horz ;

	vert = a.x - b.x;
	horz = a.y - b.y;
     678:	97 01       	movw	r18, r14
     67a:	28 1b       	sub	r18, r24
     67c:	39 0b       	sbc	r19, r25
     67e:	c9 01       	movw	r24, r18
	}




	else if(horz>0)
     680:	18 16       	cp	r1, r24
     682:	19 06       	cpc	r1, r25
     684:	c4 f5       	brge	.+112    	; 0x6f6 <travell+0x1ae>


	{   

                if( *d == 180) {     forward_cus();  }
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	84 3b       	cpi	r24, 0xB4	; 180
     68e:	91 05       	cpc	r25, r1
     690:	19 f4       	brne	.+6      	; 0x698 <travell+0x150>
     692:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <forward_cus>
     696:	20 c0       	rjmp	.+64     	; 0x6d8 <travell+0x190>

                else if( *d == 90) {  *d = 180 ;lr_cus(180); }
     698:	8a 35       	cpi	r24, 0x5A	; 90
     69a:	91 05       	cpc	r25, r1
     69c:	41 f4       	brne	.+16     	; 0x6ae <travell+0x166>
     69e:	84 eb       	ldi	r24, 0xB4	; 180
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	f8 01       	movw	r30, r16
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	80 83       	st	Z, r24
     6a8:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     6ac:	15 c0       	rjmp	.+42     	; 0x6d8 <travell+0x190>

                else if( *d == 0)   {  *d = 180 ; lr_cus(-90); }
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	51 f4       	brne	.+20     	; 0x6c6 <travell+0x17e>
     6b2:	84 eb       	ldi	r24, 0xB4	; 180
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	86 ea       	ldi	r24, 0xA6	; 166
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <travell+0x190>


                else {   *d = 180 ; lr_cus(0);   }
     6c6:	84 eb       	ldi	r24, 0xB4	; 180
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	f8 01       	movw	r30, r16
     6cc:	91 83       	std	Z+1, r25	; 0x01
     6ce:	80 83       	st	Z, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>

		return (a.x)*10+a.y-1;   
     6d8:	ce 01       	movw	r24, r28
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	cc 0f       	add	r28, r28
     6e0:	dd 1f       	adc	r29, r29
     6e2:	cc 0f       	add	r28, r28
     6e4:	dd 1f       	adc	r29, r29
     6e6:	cc 0f       	add	r28, r28
     6e8:	dd 1f       	adc	r29, r29
     6ea:	8c 0f       	add	r24, r28
     6ec:	9d 1f       	adc	r25, r29
     6ee:	8e 0d       	add	r24, r14
     6f0:	9f 1d       	adc	r25, r15
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	34 c0       	rjmp	.+104    	; 0x75e <travell+0x216>


	{
              

                if( *d == 0) { forward_cus(); }
     6f6:	f8 01       	movw	r30, r16
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	19 f4       	brne	.+6      	; 0x706 <travell+0x1be>
     700:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <forward_cus>
     704:	1e c0       	rjmp	.+60     	; 0x742 <travell+0x1fa>

                else if( *d == -90) {  *d = 0 ; lr_cus(180); }
     706:	ff ef       	ldi	r31, 0xFF	; 255
     708:	86 3a       	cpi	r24, 0xA6	; 166
     70a:	9f 07       	cpc	r25, r31
     70c:	41 f4       	brne	.+16     	; 0x71e <travell+0x1d6>
     70e:	f8 01       	movw	r30, r16
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	10 82       	st	Z, r1
     714:	84 eb       	ldi	r24, 0xB4	; 180
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     71c:	12 c0       	rjmp	.+36     	; 0x742 <travell+0x1fa>

                else if( *d == 180)   {  *d = 0 ; lr_cus(-90); }
     71e:	84 3b       	cpi	r24, 0xB4	; 180
     720:	91 05       	cpc	r25, r1
     722:	41 f4       	brne	.+16     	; 0x734 <travell+0x1ec>
     724:	f8 01       	movw	r30, r16
     726:	11 82       	std	Z+1, r1	; 0x01
     728:	10 82       	st	Z, r1
     72a:	86 ea       	ldi	r24, 0xA6	; 166
     72c:	9f ef       	ldi	r25, 0xFF	; 255
     72e:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>
     732:	07 c0       	rjmp	.+14     	; 0x742 <travell+0x1fa>


                else {   *d = 0 ;    lr_cus(0);   }
     734:	f8 01       	movw	r30, r16
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	10 82       	st	Z, r1
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 03 01 	call	0x206	; 0x206 <lr_cus>




		return (a.x)*10+a.y+1;
     742:	ce 01       	movw	r24, r28
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	cc 0f       	add	r28, r28
     74a:	dd 1f       	adc	r29, r29
     74c:	cc 0f       	add	r28, r28
     74e:	dd 1f       	adc	r29, r29
     750:	cc 0f       	add	r28, r28
     752:	dd 1f       	adc	r29, r29
     754:	8c 0f       	add	r24, r28
     756:	9d 1f       	adc	r25, r29
     758:	8e 0d       	add	r24, r14
     75a:	9f 1d       	adc	r25, r15
     75c:	01 96       	adiw	r24, 0x01	; 1





}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <calc_min>:
};


int calc_min(int b, int h)

{       struct cord a;
     76c:	6f 92       	push	r6
     76e:	7f 92       	push	r7
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	28 97       	sbiw	r28, 0x08	; 8
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	9b 01       	movw	r18, r22
	a.x = b/10;
     79a:	ea e0       	ldi	r30, 0x0A	; 10
     79c:	f0 e0       	ldi	r31, 0x00	; 0
	a.y  = b%10;
     79e:	bf 01       	movw	r22, r30
     7a0:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     7a4:	5b 01       	movw	r10, r22
     7a6:	4c 01       	movw	r8, r24




	int d[4] ;
	d[1] = h;
     7a8:	3c 83       	std	Y+4, r19	; 0x04
     7aa:	2b 83       	std	Y+3, r18	; 0x03
	d[0] =  (  (d[1]/10)*10 ) + d[1]%10 -1;
     7ac:	c9 01       	movw	r24, r18
     7ae:	bf 01       	movw	r22, r30
     7b0:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	9b 01       	movw	r18, r22
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	8a 0f       	add	r24, r26
     7d0:	9b 1f       	adc	r25, r27
     7d2:	9c 01       	movw	r18, r24
     7d4:	21 50       	subi	r18, 0x01	; 1
     7d6:	30 40       	sbci	r19, 0x00	; 0
     7d8:	3a 83       	std	Y+2, r19	; 0x02
     7da:	29 83       	std	Y+1, r18	; 0x01
	d[2] = (d[1]/10 +1 )*10  + d[1]%10;
     7dc:	cb 01       	movw	r24, r22
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	ac 01       	movw	r20, r24
     7e2:	44 0f       	add	r20, r20
     7e4:	55 1f       	adc	r21, r21
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	84 0f       	add	r24, r20
     7f4:	95 1f       	adc	r25, r21
     7f6:	8a 0f       	add	r24, r26
     7f8:	9b 1f       	adc	r25, r27
     7fa:	9e 83       	std	Y+6, r25	; 0x06
     7fc:	8d 83       	std	Y+5, r24	; 0x05
	d[3] =  (d[0]/10 +1 )*10 + d[0]%10;
     7fe:	c9 01       	movw	r24, r18
     800:	bf 01       	movw	r22, r30
     802:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     806:	ac 01       	movw	r20, r24
     808:	cb 01       	movw	r24, r22
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	9c 01       	movw	r18, r24
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	84 0f       	add	r24, r20
     824:	95 1f       	adc	r25, r21
     826:	98 87       	std	Y+8, r25	; 0x08
     828:	8f 83       	std	Y+7, r24	; 0x07
     82a:	8e 01       	movw	r16, r28
     82c:	0f 5f       	subi	r16, 0xFF	; 255
     82e:	1f 4f       	sbci	r17, 0xFF	; 255

	int min = 100;
	int temp = 0;
	int temp2 ;
	int marker;
	for(int i = 0 ; i < 4 ;i ++)
     830:	e0 e0       	ldi	r30, 0x00	; 0
     832:	f0 e0       	ldi	r31, 0x00	; 0
	d[1] = h;
	d[0] =  (  (d[1]/10)*10 ) + d[1]%10 -1;
	d[2] = (d[1]/10 +1 )*10  + d[1]%10;
	d[3] =  (d[0]/10 +1 )*10 + d[0]%10;

	int min = 100;
     834:	0f 2e       	mov	r0, r31
     836:	f4 e6       	ldi	r31, 0x64	; 100
     838:	ef 2e       	mov	r14, r31
     83a:	ff 24       	eor	r15, r15
     83c:	f0 2d       	mov	r31, r0
	int temp = 0;
	int temp2 ;
	int marker;
	for(int i = 0 ; i < 4 ;i ++)
	{
		temp = (d[i]/10 - a.x)*( d[i]/10 - a.x) + (d[i]%10 -a.y)*(d[i]%10 -a.y);
     83e:	0f 2e       	mov	r0, r31
     840:	fa e0       	ldi	r31, 0x0A	; 10
     842:	cf 2e       	mov	r12, r31
     844:	dd 24       	eor	r13, r13
     846:	f0 2d       	mov	r31, r0
     848:	d8 01       	movw	r26, r16
     84a:	8d 91       	ld	r24, X+
     84c:	9d 91       	ld	r25, X+
     84e:	8d 01       	movw	r16, r26
     850:	b6 01       	movw	r22, r12
     852:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     856:	6a 19       	sub	r22, r10
     858:	7b 09       	sbc	r23, r11
     85a:	9c 01       	movw	r18, r24
     85c:	28 19       	sub	r18, r8
     85e:	39 09       	sbc	r19, r9
     860:	66 9f       	mul	r22, r22
     862:	a0 01       	movw	r20, r0
     864:	67 9f       	mul	r22, r23
     866:	50 0d       	add	r21, r0
     868:	76 9f       	mul	r23, r22
     86a:	50 0d       	add	r21, r0
     86c:	11 24       	eor	r1, r1
     86e:	22 9f       	mul	r18, r18
     870:	c0 01       	movw	r24, r0
     872:	23 9f       	mul	r18, r19
     874:	90 0d       	add	r25, r0
     876:	32 9f       	mul	r19, r18
     878:	90 0d       	add	r25, r0
     87a:	11 24       	eor	r1, r1
     87c:	84 0f       	add	r24, r20
     87e:	95 1f       	adc	r25, r21
		if( temp < min)
     880:	8e 15       	cp	r24, r14
     882:	9f 05       	cpc	r25, r15
     884:	14 f4       	brge	.+4      	; 0x88a <calc_min+0x11e>
     886:	3f 01       	movw	r6, r30
	                     {    min=temp; marker=i;       }
     888:	7c 01       	movw	r14, r24

	int min = 100;
	int temp = 0;
	int temp2 ;
	int marker;
	for(int i = 0 ; i < 4 ;i ++)
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	e4 30       	cpi	r30, 0x04	; 4
     88e:	f1 05       	cpc	r31, r1
     890:	d9 f6       	brne	.-74     	; 0x848 <calc_min+0xdc>
	                     {    min=temp; marker=i;       }


	}

	return(d[marker]);
     892:	f3 01       	movw	r30, r6
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8c 0f       	add	r24, r28
     89e:	9d 1f       	adc	r25, r29
     8a0:	e8 0f       	add	r30, r24
     8a2:	f9 1f       	adc	r31, r25


}
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	28 96       	adiw	r28, 0x08	; 8
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	08 95       	ret

000008d2 <distcal>:



int distcal(int c, int d)

{      struct co_ord a,b;
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	8b 01       	movw	r16, r22

	a.x = c/10 ; a.y = c%10;
     8dc:	2a e0       	ldi	r18, 0x0A	; 10
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b9 01       	movw	r22, r18
     8e2:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     8e6:	fb 01       	movw	r30, r22
     8e8:	ec 01       	movw	r28, r24
	b.x = d/10 ; b.y = d%10;
     8ea:	c8 01       	movw	r24, r16
     8ec:	b9 01       	movw	r22, r18
     8ee:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     8f2:	dc 01       	movw	r26, r24


	int vert = 0;
	int horz = 0;
	int k = 0;
	while( ! (a.x == b.x && a.y == b.y) )
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	17 c0       	rjmp	.+46     	; 0x928 <distcal+0x56>
	{	
		vert = a.x  - b.x;
     8fa:	cf 01       	movw	r24, r30
     8fc:	86 1b       	sub	r24, r22
     8fe:	97 0b       	sbc	r25, r23
		horz  = a.y  - b.y;
		
		if (vert > 0 )
     900:	18 16       	cp	r1, r24
     902:	19 06       	cpc	r1, r25
     904:	14 f4       	brge	.+4      	; 0x90a <distcal+0x38>
	{ a.x = a.x -1  ; k++;  }
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	0d c0       	rjmp	.+26     	; 0x924 <distcal+0x52>
	int horz = 0;
	int k = 0;
	while( ! (a.x == b.x && a.y == b.y) )
	{	
		vert = a.x  - b.x;
		horz  = a.y  - b.y;
     90a:	9e 01       	movw	r18, r28
     90c:	2a 1b       	sub	r18, r26
     90e:	3b 0b       	sbc	r19, r27
		
		if (vert > 0 )
	{ a.x = a.x -1  ; k++;  }


		else if( vert < 0)
     910:	99 23       	and	r25, r25
     912:	14 f4       	brge	.+4      	; 0x918 <distcal+0x46>
	{  a.x = a.x +1 ;  k++;      }
     914:	31 96       	adiw	r30, 0x01	; 1
     916:	06 c0       	rjmp	.+12     	; 0x924 <distcal+0x52>

		else if( horz > 0)
     918:	12 16       	cp	r1, r18
     91a:	13 06       	cpc	r1, r19
     91c:	14 f4       	brge	.+4      	; 0x922 <distcal+0x50>
	{   a.y  =  a.y -1  ; k++;     }
     91e:	21 97       	sbiw	r28, 0x01	; 1
     920:	01 c0       	rjmp	.+2      	; 0x924 <distcal+0x52>

		else
	{   a.y = a.y +1 ;k++;    }
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	4f 5f       	subi	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
};




int distcal(int c, int d)
     928:	ca 01       	movw	r24, r20
     92a:	01 97       	sbiw	r24, 0x01	; 1


	int vert = 0;
	int horz = 0;
	int k = 0;
	while( ! (a.x == b.x && a.y == b.y) )
     92c:	6e 17       	cp	r22, r30
     92e:	7f 07       	cpc	r23, r31
     930:	21 f7       	brne	.-56     	; 0x8fa <distcal+0x28>
     932:	ac 17       	cp	r26, r28
     934:	bd 07       	cpc	r27, r29
     936:	29 f4       	brne	.+10     	; 0x942 <distcal+0x70>
		else
	{   a.y = a.y +1 ;k++;    }
	}
	return k;

}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret
	int horz = 0;
	int k = 0;
	while( ! (a.x == b.x && a.y == b.y) )
	{	
		vert = a.x  - b.x;
		horz  = a.y  - b.y;
     942:	9e 01       	movw	r18, r28
     944:	2a 1b       	sub	r18, r26
     946:	3b 0b       	sbc	r19, r27
     948:	e7 cf       	rjmp	.-50     	; 0x918 <distcal+0x46>

0000094a <lfind>:
#include<stdio.h>


int   lfind  ( int x)

{
     94a:	9c 01       	movw	r18, r24
	    int temp=0;
            if( x%5 == 0)
     94c:	65 e0       	ldi	r22, 0x05	; 5
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     954:	fc 01       	movw	r30, r24
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	a1 f4       	brne	.+40     	; 0x982 <lfind+0x38>
		{    temp = ( ( (x-1)/5) *10) + 5; }
     95a:	c9 01       	movw	r24, r18
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	65 e0       	ldi	r22, 0x05	; 5
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     966:	cb 01       	movw	r24, r22
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	9b 01       	movw	r18, r22
     96e:	22 0f       	add	r18, r18
     970:	33 1f       	adc	r19, r19
     972:	22 0f       	add	r18, r18
     974:	33 1f       	adc	r19, r19
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	82 0f       	add	r24, r18
     97c:	93 1f       	adc	r25, r19
     97e:	05 96       	adiw	r24, 0x05	; 5
     980:	08 95       	ret
	    else
		{ temp  = (x/5) * 10 + x%5 ; }
     982:	c9 01       	movw	r24, r18
     984:	65 e0       	ldi	r22, 0x05	; 5
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     98c:	9b 01       	movw	r18, r22
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	cb 01       	movw	r24, r22
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	8e 0f       	add	r24, r30
     9a6:	9f 1f       	adc	r25, r31
	   return temp;

} 
     9a8:	08 95       	ret

000009aa <func>:

int func( char a, char b )

{
	int i;
	i =  b - '0' -1;
     9aa:	26 2f       	mov	r18, r22
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	21 53       	subi	r18, 0x31	; 49
     9b0:	30 40       	sbci	r19, 0x00	; 0
	i = i*10;
     9b2:	a9 01       	movw	r20, r18
     9b4:	44 0f       	add	r20, r20
     9b6:	55 1f       	adc	r21, r21
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	22 0f       	add	r18, r18
     9c2:	33 1f       	adc	r19, r19
     9c4:	24 0f       	add	r18, r20
     9c6:	35 1f       	adc	r19, r21
	i = i +  a - 'A';
     9c8:	a9 01       	movw	r20, r18
     9ca:	48 0f       	add	r20, r24
     9cc:	51 1d       	adc	r21, r1
     9ce:	ca 01       	movw	r24, r20
     9d0:	81 54       	subi	r24, 0x41	; 65
     9d2:	90 40       	sbci	r25, 0x00	; 0
	return i;


}
     9d4:	08 95       	ret

000009d6 <exists>:



int exists( int x[], int val, int siz)

{
     9d6:	fc 01       	movw	r30, r24
	for( int in=0; in<siz ; in++)
     9d8:	14 16       	cp	r1, r20
     9da:	15 06       	cpc	r1, r21
     9dc:	b4 f4       	brge	.+44     	; 0xa0a <exists+0x34>

              {    if( x[in] == val )   { return 1;   }
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	86 17       	cp	r24, r22
     9e4:	97 07       	cpc	r25, r23
     9e6:	a1 f0       	breq	.+40     	; 0xa10 <exists+0x3a>
//#include "netnodecalc.c"




int exists( int x[], int val, int siz)
     9e8:	32 96       	adiw	r30, 0x02	; 2

{
	for( int in=0; in<siz ; in++)
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <exists+0x24>

              {    if( x[in] == val )   { return 1;   }
     9f0:	81 91       	ld	r24, Z+
     9f2:	91 91       	ld	r25, Z+
     9f4:	86 17       	cp	r24, r22
     9f6:	97 07       	cpc	r25, r23
     9f8:	71 f0       	breq	.+28     	; 0xa16 <exists+0x40>


int exists( int x[], int val, int siz)

{
	for( int in=0; in<siz ; in++)
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	24 17       	cp	r18, r20
     a00:	35 07       	cpc	r19, r21
     a02:	b1 f7       	brne	.-20     	; 0x9f0 <exists+0x1a>

              {    if( x[in] == val )   { return 1;   }
               }
return 0;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	08 95       	ret
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret
int exists( int x[], int val, int siz)

{
	for( int in=0; in<siz ; in++)

              {    if( x[in] == val )   { return 1;   }
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	08 95       	ret
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
               }
return 0;


}
     a1a:	08 95       	ret

00000a1c <prioritizer>:



void   prioritizer( int h[], int  a[], int  n, int s)

{
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	a2 97       	sbiw	r28, 0x22	; 34
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	98 8f       	std	Y+24, r25	; 0x18
     a52:	8f 8b       	std	Y+23, r24	; 0x17
     a54:	7a 8f       	std	Y+26, r23	; 0x1a
     a56:	69 8f       	std	Y+25, r22	; 0x19
     a58:	4a 01       	movw	r8, r20
     a5a:	3c 83       	std	Y+4, r19	; 0x04
     a5c:	2b 83       	std	Y+3, r18	; 0x03
        for (int ass=0 ;ass<n;ass++)
             {    a[ass] = ani[ass]; h[ass] = habi[ass]; }



}
     a5e:	2d b7       	in	r18, 0x3d	; 61
     a60:	3e b7       	in	r19, 0x3e	; 62
     a62:	3a a3       	lds	r19, 0x5a
     a64:	29 a3       	lds	r18, 0x59


void   prioritizer( int h[], int  a[], int  n, int s)

{
	int ani[n] ;
     a66:	ca 01       	movw	r24, r20
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	ed b7       	in	r30, 0x3d	; 61
     a6e:	fe b7       	in	r31, 0x3e	; 62
     a70:	e8 1b       	sub	r30, r24
     a72:	f9 0b       	sbc	r31, r25
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	fe bf       	out	0x3e, r31	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	ed bf       	out	0x3d, r30	; 61
     a7e:	2d b7       	in	r18, 0x3d	; 61
     a80:	3e b7       	in	r19, 0x3e	; 62
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	2d 83       	std	Y+5, r18	; 0x05
     a88:	3e 83       	std	Y+6, r19	; 0x06
	int habi[n];
     a8a:	2d b7       	in	r18, 0x3d	; 61
     a8c:	3e b7       	in	r19, 0x3e	; 62
     a8e:	28 1b       	sub	r18, r24
     a90:	39 0b       	sbc	r19, r25
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	3e bf       	out	0x3e, r19	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	2d bf       	out	0x3d, r18	; 61
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	2f 83       	std	Y+7, r18	; 0x07
     aa2:	38 87       	std	Y+8, r19	; 0x08
           int sourcemarker = 0 ;
	   int  marker = 0; 
	   int dist = 99;
	   int  temp = 0 ;

	 while( marker < n) 
     aa4:	14 16       	cp	r1, r20
     aa6:	15 06       	cpc	r1, r21
     aa8:	0c f0       	brlt	.+2      	; 0xaac <prioritizer+0x90>
     aaa:	b6 c0       	rjmp	.+364    	; 0xc18 <prioritizer+0x1fc>
     aac:	2d 8f       	std	Y+29, r18	; 0x1d
     aae:	3e 8f       	std	Y+30, r19	; 0x1e
     ab0:	3d 81       	ldd	r19, Y+5	; 0x05
     ab2:	3f 8f       	std	Y+31, r19	; 0x1f
     ab4:	ee 81       	ldd	r30, Y+6	; 0x06
     ab6:	e8 a3       	lds	r30, 0x58
}




void   prioritizer( int h[], int  a[], int  n, int s)
     ab8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     aba:	3e 8d       	ldd	r19, Y+30	; 0x1e
     abc:	28 0f       	add	r18, r24
     abe:	39 1f       	adc	r19, r25
     ac0:	3c 8f       	std	Y+28, r19	; 0x1c
     ac2:	2b 8f       	std	Y+27, r18	; 0x1b
     ac4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ac6:	98 a1       	lds	r25, 0x48
     ac8:	9e 8b       	std	Y+22, r25	; 0x16
     aca:	8d 8b       	std	Y+21, r24	; 0x15
     acc:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ace:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ad0:	f8 8b       	std	Y+16, r31	; 0x10
     ad2:	ef 87       	std	Y+15, r30	; 0x0f
{
	int ani[n] ;
	int habi[n];


	   int k = 0;
     ad4:	1a 86       	std	Y+10, r1	; 0x0a
     ad6:	19 86       	std	Y+9, r1	; 0x09
           int sourcemarker = 0 ;
	   int  marker = 0; 
	   int dist = 99;
	   int  temp = 0 ;

	 while( marker < n) 
     ad8:	f9 8d       	ldd	r31, Y+25	; 0x19
     ada:	f9 8b       	std	Y+17, r31	; 0x11
     adc:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ade:	2a 8b       	std	Y+18, r18	; 0x12
     ae0:	3f 89       	ldd	r19, Y+23	; 0x17
     ae2:	3b 8b       	std	Y+19, r19	; 0x13
     ae4:	88 8d       	ldd	r24, Y+24	; 0x18
     ae6:	8c 8b       	std	Y+20, r24	; 0x14
     ae8:	68 c0       	rjmp	.+208    	; 0xbba <prioritizer+0x19e>
	{
		for( int i = 0; i< n; i++)
		{	int kk = calc_min(a[i],h[i]);
     aea:	f1 01       	movw	r30, r2
     aec:	e1 90       	ld	r14, Z+
     aee:	f1 90       	ld	r15, Z+
     af0:	1f 01       	movw	r2, r30
     af2:	f2 01       	movw	r30, r4
     af4:	a1 90       	ld	r10, Z+
     af6:	b1 90       	ld	r11, Z+
     af8:	2f 01       	movw	r4, r30
     afa:	c7 01       	movw	r24, r14
     afc:	b5 01       	movw	r22, r10
     afe:	0e 94 b6 03 	call	0x76c	; 0x76c <calc_min>
     b02:	3c 01       	movw	r6, r24

			 temp = distcal(s, a[i]) + distcal( a[i],kk);
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	b7 01       	movw	r22, r14
     b0a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     b0e:	8c 01       	movw	r16, r24
     b10:	c7 01       	movw	r24, r14
     b12:	b3 01       	movw	r22, r6
     b14:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     b18:	08 0f       	add	r16, r24
     b1a:	19 1f       	adc	r17, r25
			 tag = exists(ani, a[i],n) ;
     b1c:	8d 81       	ldd	r24, Y+5	; 0x05
     b1e:	9e 81       	ldd	r25, Y+6	; 0x06
     b20:	b7 01       	movw	r22, r14
     b22:	a4 01       	movw	r20, r8
     b24:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <exists>
     b28:	7c 01       	movw	r14, r24
			 tag2 = exists(habi, h[i], n);
     b2a:	8f 81       	ldd	r24, Y+7	; 0x07
     b2c:	98 85       	ldd	r25, Y+8	; 0x08
     b2e:	b5 01       	movw	r22, r10
     b30:	a4 01       	movw	r20, r8
     b32:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <exists>


         		if( (temp < dist)  && (tag==0  || tag2==0)    )
     b36:	29 81       	ldd	r18, Y+1	; 0x01
     b38:	3a 81       	ldd	r19, Y+2	; 0x02
     b3a:	02 17       	cp	r16, r18
     b3c:	13 07       	cpc	r17, r19
     b3e:	7c f4       	brge	.+30     	; 0xb5e <prioritizer+0x142>
     b40:	e1 14       	cp	r14, r1
     b42:	f1 04       	cpc	r15, r1
     b44:	19 f0       	breq	.+6      	; 0xb4c <prioritizer+0x130>
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	31 f0       	breq	.+12     	; 0xb56 <prioritizer+0x13a>
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <prioritizer+0x142>
 			{            dist = temp ;
     b4c:	1a 83       	std	Y+2, r17	; 0x02
     b4e:	09 83       	std	Y+1, r16	; 0x01
			 temp = distcal(s, a[i]) + distcal( a[i],kk);
			 tag = exists(ani, a[i],n) ;
			 tag2 = exists(habi, h[i], n);


         		if( (temp < dist)  && (tag==0  || tag2==0)    )
     b50:	da 86       	std	Y+10, r13	; 0x0a
     b52:	c9 86       	std	Y+9, r12	; 0x09
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <prioritizer+0x142>
 			{            dist = temp ;
     b56:	1a 83       	std	Y+2, r17	; 0x02
     b58:	09 83       	std	Y+1, r16	; 0x01
			 temp = distcal(s, a[i]) + distcal( a[i],kk);
			 tag = exists(ani, a[i],n) ;
			 tag2 = exists(habi, h[i], n);


         		if( (temp < dist)  && (tag==0  || tag2==0)    )
     b5a:	da 86       	std	Y+10, r13	; 0x0a
     b5c:	c9 86       	std	Y+9, r12	; 0x09
	   int dist = 99;
	   int  temp = 0 ;

	 while( marker < n) 
	{
		for( int i = 0; i< n; i++)
     b5e:	08 94       	sec
     b60:	c1 1c       	adc	r12, r1
     b62:	d1 1c       	adc	r13, r1
     b64:	c8 14       	cp	r12, r8
     b66:	d9 04       	cpc	r13, r9
     b68:	09 f0       	breq	.+2      	; 0xb6c <prioritizer+0x150>
     b6a:	bf cf       	rjmp	.-130    	; 0xaea <prioritizer+0xce>
			}


		}
		
		habi[j] =  h[k]; 
     b6c:	89 85       	ldd	r24, Y+9	; 0x09
     b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	ef 89       	ldd	r30, Y+23	; 0x17
     b76:	f8 8d       	ldd	r31, Y+24	; 0x18
     b78:	e8 0f       	add	r30, r24
     b7a:	f9 1f       	adc	r31, r25
     b7c:	60 81       	ld	r22, Z
     b7e:	71 81       	ldd	r23, Z+1	; 0x01
     b80:	ef 85       	ldd	r30, Y+15	; 0x0f
     b82:	f8 89       	ldd	r31, Y+16	; 0x10
     b84:	61 93       	st	Z+, r22
     b86:	71 93       	st	Z+, r23
     b88:	f8 8b       	std	Y+16, r31	; 0x10
     b8a:	ef 87       	std	Y+15, r30	; 0x0f
		ani[j++]  = a[k];
     b8c:	e9 8d       	ldd	r30, Y+25	; 0x19
     b8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b90:	e8 0f       	add	r30, r24
     b92:	f9 1f       	adc	r31, r25
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	ed 89       	ldd	r30, Y+21	; 0x15
     b9a:	fe 89       	ldd	r31, Y+22	; 0x16
     b9c:	81 93       	st	Z+, r24
     b9e:	91 93       	st	Z+, r25
     ba0:	fe 8b       	std	Y+22, r31	; 0x16
     ba2:	ed 8b       	std	Y+21, r30	; 0x15

		s  =  calc_min( a[k], h[k]);
     ba4:	0e 94 b6 03 	call	0x76c	; 0x76c <calc_min>
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	8b 83       	std	Y+3, r24	; 0x03
           int sourcemarker = 0 ;
	   int  marker = 0; 
	   int dist = 99;
	   int  temp = 0 ;

	 while( marker < n) 
     bac:	2f 85       	ldd	r18, Y+15	; 0x0f
     bae:	38 89       	ldd	r19, Y+16	; 0x10
     bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb4:	28 17       	cp	r18, r24
     bb6:	39 07       	cpc	r19, r25
     bb8:	99 f0       	breq	.+38     	; 0xbe0 <prioritizer+0x1c4>
     bba:	99 89       	ldd	r25, Y+17	; 0x11
     bbc:	9d 87       	std	Y+13, r25	; 0x0d
     bbe:	ea 89       	ldd	r30, Y+18	; 0x12
     bc0:	ee 87       	std	Y+14, r30	; 0x0e
     bc2:	fb 89       	ldd	r31, Y+19	; 0x13
     bc4:	fb 87       	std	Y+11, r31	; 0x0b
     bc6:	2c 89       	ldd	r18, Y+20	; 0x14
     bc8:	2c 87       	std	Y+12, r18	; 0x0c



void   prioritizer( int h[], int  a[], int  n, int s)

{
     bca:	4f 2e       	mov	r4, r31
     bcc:	52 2e       	mov	r5, r18
     bce:	29 2e       	mov	r2, r25
     bd0:	3e 2e       	mov	r3, r30
     bd2:	cc 24       	eor	r12, r12
     bd4:	dd 24       	eor	r13, r13
     bd6:	83 e6       	ldi	r24, 0x63	; 99
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	85 cf       	rjmp	.-246    	; 0xaea <prioritizer+0xce>
           int sourcemarker = 0 ;
	   int  marker = 0; 
	   int dist = 99;
	   int  temp = 0 ;

	 while( marker < n) 
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     bea:	5e 8d       	ldd	r21, Y+30	; 0x1e
     bec:	af 8d       	ldd	r26, Y+31	; 0x1f
     bee:	b8 a1       	lds	r27, 0x48
     bf0:	0d 85       	ldd	r16, Y+13	; 0x0d
     bf2:	1e 85       	ldd	r17, Y+14	; 0x0e
		dist = 99;

	}
	
        for (int ass=0 ;ass<n;ass++)
             {    a[ass] = ani[ass]; h[ass] = habi[ass]; }
     bf4:	2d 91       	ld	r18, X+
     bf6:	3d 91       	ld	r19, X+
     bf8:	f8 01       	movw	r30, r16
     bfa:	21 93       	st	Z+, r18
     bfc:	31 93       	st	Z+, r19
     bfe:	8f 01       	movw	r16, r30
     c00:	fa 01       	movw	r30, r20
     c02:	21 91       	ld	r18, Z+
     c04:	31 91       	ld	r19, Z+
     c06:	af 01       	movw	r20, r30
     c08:	fb 01       	movw	r30, r22
     c0a:	21 93       	st	Z+, r18
     c0c:	31 93       	st	Z+, r19
     c0e:	bf 01       	movw	r22, r30
		marker++;
		dist = 99;

	}
	
        for (int ass=0 ;ass<n;ass++)
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	88 15       	cp	r24, r8
     c14:	99 05       	cpc	r25, r9
     c16:	71 f7       	brne	.-36     	; 0xbf4 <prioritizer+0x1d8>
             {    a[ass] = ani[ass]; h[ass] = habi[ass]; }



}
     c18:	29 a1       	lds	r18, 0x49
     c1a:	3a a1       	lds	r19, 0x4a
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	3e bf       	out	0x3e, r19	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	2d bf       	out	0x3d, r18	; 61
     c26:	a2 96       	adiw	r28, 0x22	; 34
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	7f 90       	pop	r7
     c4c:	6f 90       	pop	r6
     c4e:	5f 90       	pop	r5
     c50:	4f 90       	pop	r4
     c52:	3f 90       	pop	r3
     c54:	2f 90       	pop	r2
     c56:	08 95       	ret

00000c58 <ravel>:
};



int  ravel( int l, int h, int *d)
{
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	fb 01       	movw	r30, r22
     c66:	8a 01       	movw	r16, r20
    struct xxyy  a,b ;


        a.x =  l/10;
     c68:	2a e0       	ldi	r18, 0x0A	; 10
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	b9 01       	movw	r22, r18
     c6e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     c72:	eb 01       	movw	r28, r22
     c74:	7c 01       	movw	r14, r24
        a.y  = l%10 ;

        b.x = h/10;
     c76:	cf 01       	movw	r24, r30
     c78:	b9 01       	movw	r22, r18
     c7a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>

        int vert ;
        int horz ;


        vert = a.x - b.x;
     c7e:	ce 01       	movw	r24, r28
     c80:	86 1b       	sub	r24, r22
     c82:	97 0b       	sbc	r25, r23
        horz = a.y - b.y;



        if(vert> 0)
     c84:	18 16       	cp	r1, r24
     c86:	19 06       	cpc	r1, r25
     c88:	74 f5       	brge	.+92     	; 0xce6 <ravel+0x8e>

        {

                if( *d == -90) { }
     c8a:	f8 01       	movw	r30, r16
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	ff ef       	ldi	r31, 0xFF	; 255
     c92:	86 3a       	cpi	r24, 0xA6	; 166
     c94:	9f 07       	cpc	r25, r31
     c96:	b9 f0       	breq	.+46     	; 0xcc6 <ravel+0x6e>

                else if( *d == 180) {  *d = -90 ; }
     c98:	84 3b       	cpi	r24, 0xB4	; 180
     c9a:	91 05       	cpc	r25, r1
     c9c:	31 f4       	brne	.+12     	; 0xcaa <ravel+0x52>
     c9e:	86 ea       	ldi	r24, 0xA6	; 166
     ca0:	9f ef       	ldi	r25, 0xFF	; 255
     ca2:	f8 01       	movw	r30, r16
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <ravel+0x6e>

                else if( *d == 90)   {  *d = -90 ; }
     caa:	8a 35       	cpi	r24, 0x5A	; 90
     cac:	91 05       	cpc	r25, r1
     cae:	31 f4       	brne	.+12     	; 0xcbc <ravel+0x64>
     cb0:	86 ea       	ldi	r24, 0xA6	; 166
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	f8 01       	movw	r30, r16
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <ravel+0x6e>


                else {   *d = -90 ; }
     cbc:	86 ea       	ldi	r24, 0xA6	; 166
     cbe:	9f ef       	ldi	r25, 0xFF	; 255
     cc0:	f8 01       	movw	r30, r16
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	80 83       	st	Z, r24


                return (a.x-1)*10+a.y;
     cc6:	21 97       	sbiw	r28, 0x01	; 1
     cc8:	9e 01       	movw	r18, r28
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	ce 01       	movw	r24, r28
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	8e 0d       	add	r24, r14
     ce2:	9f 1d       	adc	r25, r15
     ce4:	7a c0       	rjmp	.+244    	; 0xdda <ravel+0x182>


        }


 else if(vert <0)
     ce6:	99 23       	and	r25, r25
     ce8:	6c f5       	brge	.+90     	; 0xd44 <ravel+0xec>

        {


                if( *d == 90) { }
     cea:	f8 01       	movw	r30, r16
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	8a 35       	cpi	r24, 0x5A	; 90
     cf2:	91 05       	cpc	r25, r1
     cf4:	b9 f0       	breq	.+46     	; 0xd24 <ravel+0xcc>

                else if( *d == 180) {  *d = 90 ; }
     cf6:	84 3b       	cpi	r24, 0xB4	; 180
     cf8:	91 05       	cpc	r25, r1
     cfa:	29 f4       	brne	.+10     	; 0xd06 <ravel+0xae>
     cfc:	8a e5       	ldi	r24, 0x5A	; 90
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	0f c0       	rjmp	.+30     	; 0xd24 <ravel+0xcc>

                else if( *d == -90)   {  *d = 90 ; }
     d06:	ff ef       	ldi	r31, 0xFF	; 255
     d08:	86 3a       	cpi	r24, 0xA6	; 166
     d0a:	9f 07       	cpc	r25, r31
     d0c:	31 f4       	brne	.+12     	; 0xd1a <ravel+0xc2>
     d0e:	8a e5       	ldi	r24, 0x5A	; 90
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	f8 01       	movw	r30, r16
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <ravel+0xcc>


                else {   *d = 90 ; }
     d1a:	8a e5       	ldi	r24, 0x5A	; 90
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	f8 01       	movw	r30, r16
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24

                return (a.x+1)*10+a.y;
     d24:	21 96       	adiw	r28, 0x01	; 1
     d26:	9e 01       	movw	r18, r28
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	ce 01       	movw	r24, r28
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	82 0f       	add	r24, r18
     d3c:	93 1f       	adc	r25, r19
     d3e:	8e 0d       	add	r24, r14
     d40:	9f 1d       	adc	r25, r15
     d42:	4b c0       	rjmp	.+150    	; 0xdda <ravel+0x182>

        a.x =  l/10;
        a.y  = l%10 ;

        b.x = h/10;
        b.y = h%10;
     d44:	cf 01       	movw	r24, r30
     d46:	6a e0       	ldi	r22, 0x0A	; 10
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
        int vert ;
        int horz ;


        vert = a.x - b.x;
        horz = a.y - b.y;
     d4e:	97 01       	movw	r18, r14
     d50:	28 1b       	sub	r18, r24
     d52:	39 0b       	sbc	r19, r25
     d54:	c9 01       	movw	r24, r18
                return (a.x+1)*10+a.y;


        }

        else if(horz>0)
     d56:	18 16       	cp	r1, r24
     d58:	19 06       	cpc	r1, r25
     d5a:	54 f5       	brge	.+84     	; 0xdb0 <ravel+0x158>


        {

                if( *d == 180) { }
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	84 3b       	cpi	r24, 0xB4	; 180
     d64:	91 05       	cpc	r25, r1
     d66:	a9 f0       	breq	.+42     	; 0xd92 <ravel+0x13a>

                else if( *d == 90) {  *d = 180 ; }
     d68:	8a 35       	cpi	r24, 0x5A	; 90
     d6a:	91 05       	cpc	r25, r1
     d6c:	29 f4       	brne	.+10     	; 0xd78 <ravel+0x120>
     d6e:	84 eb       	ldi	r24, 0xB4	; 180
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	80 83       	st	Z, r24
     d76:	0d c0       	rjmp	.+26     	; 0xd92 <ravel+0x13a>

                else if( *d == 0)   {  *d = 180 ; }
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	31 f4       	brne	.+12     	; 0xd88 <ravel+0x130>
     d7c:	84 eb       	ldi	r24, 0xB4	; 180
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	f8 01       	movw	r30, r16
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <ravel+0x13a>


                else {   *d = 180 ;   }
     d88:	84 eb       	ldi	r24, 0xB4	; 180
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	f8 01       	movw	r30, r16
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24

                return (a.x)*10+a.y-1;
     d92:	ce 01       	movw	r24, r28
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	cc 0f       	add	r28, r28
     d9a:	dd 1f       	adc	r29, r29
     d9c:	cc 0f       	add	r28, r28
     d9e:	dd 1f       	adc	r29, r29
     da0:	cc 0f       	add	r28, r28
     da2:	dd 1f       	adc	r29, r29
     da4:	8c 0f       	add	r24, r28
     da6:	9d 1f       	adc	r25, r29
     da8:	8e 0d       	add	r24, r14
     daa:	9f 1d       	adc	r25, r15
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	15 c0       	rjmp	.+42     	; 0xdda <ravel+0x182>


        {


                if( *d == 0) { }
     db0:	f8 01       	movw	r30, r16
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	11 f0       	breq	.+4      	; 0xdbe <ravel+0x166>
                else if( *d == -90) {  *d = 0 ; }

                else if( *d == 180)   {  *d = 0;  }


                else {   *d = 0 ;   }
     dba:	11 82       	std	Z+1, r1	; 0x01
     dbc:	10 82       	st	Z, r1




                return (a.x)*10+a.y+1;
     dbe:	ce 01       	movw	r24, r28
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	cc 0f       	add	r28, r28
     dc6:	dd 1f       	adc	r29, r29
     dc8:	cc 0f       	add	r28, r28
     dca:	dd 1f       	adc	r29, r29
     dcc:	cc 0f       	add	r28, r28
     dce:	dd 1f       	adc	r29, r29
     dd0:	8c 0f       	add	r24, r28
     dd2:	9d 1f       	adc	r25, r29
     dd4:	8e 0d       	add	r24, r14
     dd6:	9f 1d       	adc	r25, r15
     dd8:	01 96       	adiw	r24, 0x01	; 1


        }


}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <adjplease>:


int    adjplease(int b, int a,  int r)


{
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	7c 01       	movw	r14, r24
     e02:	fb 01       	movw	r30, r22
     e04:	5a 01       	movw	r10, r20
struct vals d ;

int o; int t;

d.b = b;
d.a =  (  (d.b/10)*10 ) + d.b%10 -1;
     e06:	6a e0       	ldi	r22, 0x0A	; 10
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     e0e:	ac 01       	movw	r20, r24
     e10:	cb 01       	movw	r24, r22
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	9b 01       	movw	r18, r22
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	84 0f       	add	r24, r20
     e2a:	95 1f       	adc	r25, r21
     e2c:	4c 01       	movw	r8, r24
     e2e:	08 94       	sec
     e30:	81 08       	sbc	r8, r1
     e32:	91 08       	sbc	r9, r1
d.c = (d.b/10 +1 )*10  + d.b%10;
     e34:	cb 01       	movw	r24, r22
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9c 01       	movw	r18, r24
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	6a 01       	movw	r12, r20
     e50:	c8 0e       	add	r12, r24
     e52:	d9 1e       	adc	r13, r25
int counter1=0;
int counter2=0;
int holder;
int returner;

if( a == d.b)
     e54:	ee 16       	cp	r14, r30
     e56:	ff 06       	cpc	r15, r31
     e58:	79 f4       	brne	.+30     	; 0xe78 <adjplease+0x90>
{
o = distcal(d.a,r);
     e5a:	c4 01       	movw	r24, r8
     e5c:	b5 01       	movw	r22, r10
     e5e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     e62:	ec 01       	movw	r28, r24
t = distcal(d.c,r);
     e64:	c6 01       	movw	r24, r12
     e66:	b5 01       	movw	r22, r10
     e68:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>

///////////////////////////////////////////////
if(o<t) { return d.a;} else { return d.c; }
     e6c:	c8 17       	cp	r28, r24
     e6e:	d9 07       	cpc	r29, r25
     e70:	0c f0       	brlt	.+2      	; 0xe74 <adjplease+0x8c>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <adjplease+0x11a>
     e74:	84 01       	movw	r16, r8
     e76:	48 c0       	rjmp	.+144    	; 0xf08 <adjplease+0x120>
int o; int t;

d.b = b;
d.a =  (  (d.b/10)*10 ) + d.b%10 -1;
d.c = (d.b/10 +1 )*10  + d.b%10;
d.d =  (d.a/10 +1 )*10 + d.a%10;
     e78:	c4 01       	movw	r24, r8
     e7a:	6a e0       	ldi	r22, 0x0A	; 10
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     e82:	8c 01       	movw	r16, r24
     e84:	cb 01       	movw	r24, r22
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9c 01       	movw	r18, r24
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	08 0f       	add	r16, r24
     ea0:	19 1f       	adc	r17, r25

}


}
else if( a == d.d)
     ea2:	0e 17       	cp	r16, r30
     ea4:	1f 07       	cpc	r17, r31
     ea6:	71 f4       	brne	.+28     	; 0xec4 <adjplease+0xdc>

{

o = distcal(d.a,r);
     ea8:	c4 01       	movw	r24, r8
     eaa:	b5 01       	movw	r22, r10
     eac:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     eb0:	ec 01       	movw	r28, r24
t = distcal(d.c,r);
     eb2:	c6 01       	movw	r24, r12
     eb4:	b5 01       	movw	r22, r10
     eb6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>

if(o<t) { return d.a;} else { return d.c; }
     eba:	c8 17       	cp	r28, r24
     ebc:	d9 07       	cpc	r29, r25
     ebe:	1c f5       	brge	.+70     	; 0xf06 <adjplease+0x11e>
     ec0:	84 01       	movw	r16, r8
     ec2:	22 c0       	rjmp	.+68     	; 0xf08 <adjplease+0x120>

}



else if(a == d.c)
     ec4:	ce 16       	cp	r12, r30
     ec6:	df 06       	cpc	r13, r31
     ec8:	71 f4       	brne	.+28     	; 0xee6 <adjplease+0xfe>

{

o = distcal(d.b,r);
     eca:	c7 01       	movw	r24, r14
     ecc:	b5 01       	movw	r22, r10
     ece:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     ed2:	ec 01       	movw	r28, r24
t = distcal(d.d,r);
     ed4:	c8 01       	movw	r24, r16
     ed6:	b5 01       	movw	r22, r10
     ed8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>

if(o<t) { return d.b;} else { return d.d; }
     edc:	c8 17       	cp	r28, r24
     ede:	d9 07       	cpc	r29, r25
     ee0:	9c f4       	brge	.+38     	; 0xf08 <adjplease+0x120>
     ee2:	87 01       	movw	r16, r14
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <adjplease+0x120>
}

else
{

o = distcal(d.b,r);
     ee6:	c7 01       	movw	r24, r14
     ee8:	b5 01       	movw	r22, r10
     eea:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>
     eee:	ec 01       	movw	r28, r24
t = distcal(d.d,r);
     ef0:	c8 01       	movw	r24, r16
     ef2:	b5 01       	movw	r22, r10
     ef4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <distcal>

//printf("%d\n",o);
//printf("%d\n",t);


if(o<t) {     return d.b;         } else { return d.d; }
     ef8:	c8 17       	cp	r28, r24
     efa:	d9 07       	cpc	r29, r25
     efc:	2c f4       	brge	.+10     	; 0xf08 <adjplease+0x120>
     efe:	87 01       	movw	r16, r14
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <adjplease+0x120>
{
o = distcal(d.a,r);
t = distcal(d.c,r);

///////////////////////////////////////////////
if(o<t) { return d.a;} else { return d.c; }
     f02:	86 01       	movw	r16, r12
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <adjplease+0x120>
{

o = distcal(d.a,r);
t = distcal(d.c,r);

if(o<t) { return d.a;} else { return d.c; }
     f06:	86 01       	movw	r16, r12
}




}
     f08:	80 2f       	mov	r24, r16
     f0a:	91 2f       	mov	r25, r17
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	08 95       	ret

00000f26 <deallast>:




void deallast(int x, int z,int *d)
{
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	fb 01       	movw	r30, r22
     f32:	8a 01       	movw	r16, r20

	struct lasss l ;

	
	l.x  =    x/10;
     f34:	6a e0       	ldi	r22, 0x0A	; 10
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     f3c:	ab 01       	movw	r20, r22
	l.y   =   x%10;
     f3e:	28 2f       	mov	r18, r24
     f40:	39 2f       	mov	r19, r25





	if(   l.x > 0  && l.x < 5 && l.y > 0 && l.y < 5    )
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	64 30       	cpi	r22, 0x04	; 4
     f48:	71 05       	cpc	r23, r1
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <deallast+0x28>
     f4c:	9b c0       	rjmp	.+310    	; 0x1084 <deallast+0x15e>
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	0c f0       	brlt	.+2      	; 0xf56 <deallast+0x30>
     f54:	97 c0       	rjmp	.+302    	; 0x1084 <deallast+0x15e>
     f56:	25 30       	cpi	r18, 0x05	; 5
     f58:	31 05       	cpc	r19, r1
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <deallast+0x38>
     f5c:	93 c0       	rjmp	.+294    	; 0x1084 <deallast+0x15e>

	{
		if ( x == dd.b )
     f5e:	ce 17       	cp	r28, r30
     f60:	df 07       	cpc	r29, r31
     f62:	a1 f4       	brne	.+40     	; 0xf8c <deallast+0x66>

		{
		if( *d == 180 ) { forward_half(); right_drop_seq(); }
     f64:	f8 01       	movw	r30, r16
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	84 3b       	cpi	r24, 0xB4	; 180
     f6c:	91 05       	cpc	r25, r1
     f6e:	29 f4       	brne	.+10     	; 0xf7a <deallast+0x54>
     f70:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
     f74:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
     f78:	b2 c0       	rjmp	.+356    	; 0x10de <deallast+0x1b8>

	else if( *d == 90) { forward_half(); left_drop_seq(); }
     f7a:	8a 35       	cpi	r24, 0x5A	; 90
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <deallast+0x5c>
     f80:	ae c0       	rjmp	.+348    	; 0x10de <deallast+0x1b8>
     f82:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
     f86:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
     f8a:	a9 c0       	rjmp	.+338    	; 0x10de <deallast+0x1b8>
	
	struct  last_co dd;
	
	
	dd.b = z;
	dd.a =  (  (dd.b/10)*10 ) + dd.b%10 -1;
     f8c:	cf 01       	movw	r24, r30
     f8e:	6a e0       	ldi	r22, 0x0A	; 10
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
     f96:	ac 01       	movw	r20, r24
	dd.c = (dd.b/10 +1 )*10  + dd.b%10;
     f98:	cb 01       	movw	r24, r22
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9c 01       	movw	r18, r24
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	82 0f       	add	r24, r18
     fb0:	93 1f       	adc	r25, r19
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
else {    }


	             }

		      else if( x == dd.c) 
     fb6:	c8 17       	cp	r28, r24
     fb8:	d9 07       	cpc	r29, r25
     fba:	a9 f4       	brne	.+42     	; 0xfe6 <deallast+0xc0>
		  			
			{          		


                       if( *d == -90 ) { forward_half();     right_drop_seq(); }
     fbc:	f8 01       	movw	r30, r16
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	ff ef       	ldi	r31, 0xFF	; 255
     fc4:	86 3a       	cpi	r24, 0xA6	; 166
     fc6:	9f 07       	cpc	r25, r31
     fc8:	29 f4       	brne	.+10     	; 0xfd4 <deallast+0xae>
     fca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
     fce:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
     fd2:	85 c0       	rjmp	.+266    	; 0x10de <deallast+0x1b8>

  			else if( *d == 180) { forward_half();          left_drop_seq(); }
     fd4:	84 3b       	cpi	r24, 0xB4	; 180
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <deallast+0xb6>
     fda:	81 c0       	rjmp	.+258    	; 0x10de <deallast+0x1b8>
     fdc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
     fe0:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
     fe4:	7c c0       	rjmp	.+248    	; 0x10de <deallast+0x1b8>
	
	struct  last_co dd;
	
	
	dd.b = z;
	dd.a =  (  (dd.b/10)*10 ) + dd.b%10 -1;
     fe6:	9b 01       	movw	r18, r22
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	cb 01       	movw	r24, r22
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	84 0f       	add	r24, r20
    1000:	95 1f       	adc	r25, r21
    1002:	01 97       	sbiw	r24, 0x01	; 1





		else if( x == dd.a) 
    1004:	c8 17       	cp	r28, r24
    1006:	d9 07       	cpc	r29, r25
    1008:	99 f4       	brne	.+38     	; 0x1030 <deallast+0x10a>
		      {
						


                       if( *d == 90 ) { forward_half(); right_drop_seq(); }
    100a:	f8 01       	movw	r30, r16
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	8a 35       	cpi	r24, 0x5A	; 90
    1012:	91 05       	cpc	r25, r1
    1014:	29 f4       	brne	.+10     	; 0x1020 <deallast+0xfa>
    1016:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    101a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    101e:	5f c0       	rjmp	.+190    	; 0x10de <deallast+0x1b8>

  			else if( *d == 0) { forward_half(); left_drop_seq(); }
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <deallast+0x100>
    1024:	5c c0       	rjmp	.+184    	; 0x10de <deallast+0x1b8>
    1026:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    102a:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    102e:	57 c0       	rjmp	.+174    	; 0x10de <deallast+0x1b8>
	
	
	dd.b = z;
	dd.a =  (  (dd.b/10)*10 ) + dd.b%10 -1;
	dd.c = (dd.b/10 +1 )*10  + dd.b%10;
	dd.d =  (dd.a/10 +1 )*10 + dd.a%10;
    1030:	6a e0       	ldi	r22, 0x0A	; 10
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    1038:	6f 5f       	subi	r22, 0xFF	; 255
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	9b 01       	movw	r18, r22
    103e:	22 0f       	add	r18, r18
    1040:	33 1f       	adc	r19, r19
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	62 0f       	add	r22, r18
    1050:	73 1f       	adc	r23, r19
    1052:	68 0f       	add	r22, r24
    1054:	79 1f       	adc	r23, r25

		      }



		else if( x == dd.d) 
    1056:	c6 17       	cp	r28, r22
    1058:	d7 07       	cpc	r29, r23
    105a:	09 f0       	breq	.+2      	; 0x105e <deallast+0x138>
    105c:	40 c0       	rjmp	.+128    	; 0x10de <deallast+0x1b8>
			{  
						


                       if( *d == 0 ) { forward_half() ; right_drop_seq(); }
    105e:	f8 01       	movw	r30, r16
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	29 f4       	brne	.+10     	; 0x1072 <deallast+0x14c>
    1068:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    106c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    1070:	36 c0       	rjmp	.+108    	; 0x10de <deallast+0x1b8>

  			else if( *d == -90) { forward_half(); left_drop_seq(); }
    1072:	ff ef       	ldi	r31, 0xFF	; 255
    1074:	86 3a       	cpi	r24, 0xA6	; 166
    1076:	9f 07       	cpc	r25, r31
    1078:	91 f5       	brne	.+100    	; 0x10de <deallast+0x1b8>
    107a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    107e:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    1082:	2d c0       	rjmp	.+90     	; 0x10de <deallast+0x1b8>


 	     
	

	else if( (l.x == 0 || l.x == 5) ||  ( l.y == 0 || l.y == 5) )                    // &&  ( (l.x != 0 && l.y !=0)      || ( l.x != 0 && l.y!=5)  || ( l.x != 5 && l.y!=0) || ( l.x != 5 && l.y!=5)  )      )
    1084:	41 15       	cp	r20, r1
    1086:	51 05       	cpc	r21, r1
    1088:	21 f0       	breq	.+8      	; 0x1092 <deallast+0x16c>
    108a:	45 30       	cpi	r20, 0x05	; 5
    108c:	51 05       	cpc	r21, r1
    108e:	39 f5       	brne	.+78     	; 0x10de <deallast+0x1b8>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <deallast+0x194>

    
       if( l.x == 0) 
	{ 

               if (l.y !=0 && l.y !=5)  
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	19 f1       	breq	.+70     	; 0x10de <deallast+0x1b8>
    1098:	25 30       	cpi	r18, 0x05	; 5
    109a:	31 05       	cpc	r19, r1
    109c:	01 f1       	breq	.+64     	; 0x10de <deallast+0x1b8>
   
                 {                         

                      if( x == dd.b)  {        
    109e:	ce 17       	cp	r28, r30
    10a0:	df 07       	cpc	r29, r31
    10a2:	e9 f4       	brne	.+58     	; 0x10de <deallast+0x1b8>

				if(*d == 180)  {             forward_half() ; right_drop_seq();  }
    10a4:	f8 01       	movw	r30, r16
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	84 3b       	cpi	r24, 0xB4	; 180
    10ac:	91 05       	cpc	r25, r1
    10ae:	b9 f4       	brne	.+46     	; 0x10de <deallast+0x1b8>
    10b0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    10b4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <deallast+0x1b8>
       }
 
    else if( l.x == 5) 
	{ 

               if (l.y !=0 && l.y !=5)  
    10ba:	21 15       	cp	r18, r1
    10bc:	31 05       	cpc	r19, r1
    10be:	79 f0       	breq	.+30     	; 0x10de <deallast+0x1b8>
    10c0:	25 30       	cpi	r18, 0x05	; 5
    10c2:	31 05       	cpc	r19, r1
    10c4:	61 f0       	breq	.+24     	; 0x10de <deallast+0x1b8>
   
                {                         

                      if( x == dd.b)  
    10c6:	ce 17       	cp	r28, r30
    10c8:	df 07       	cpc	r29, r31
    10ca:	49 f4       	brne	.+18     	; 0x10de <deallast+0x1b8>
				{        

				if( *d == 0)  {              forward_half() ; right_drop_seq();  }
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	21 f4       	brne	.+8      	; 0x10de <deallast+0x1b8>
    10d6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    10da:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>



}

}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <lup>:




int  lup( int l, int h, int *d)
{
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	fb 01       	movw	r30, r22
    10f6:	8a 01       	movw	r16, r20
	struct yx  a,b ;


	a.x =  l/10;
    10f8:	2a e0       	ldi	r18, 0x0A	; 10
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	b9 01       	movw	r22, r18
    10fe:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    1102:	eb 01       	movw	r28, r22
    1104:	7c 01       	movw	r14, r24
	a.y  = l%10 ;

	b.x = h/10;
    1106:	cf 01       	movw	r24, r30
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
	b.y = h%10;

	int vert ;
	int horz ;

	vert = a.x - b.x;
    110e:	ce 01       	movw	r24, r28
    1110:	86 1b       	sub	r24, r22
    1112:	97 0b       	sbc	r25, r23
	horz = a.y - b.y;



	if(vert> 0)
    1114:	18 16       	cp	r1, r24
    1116:	19 06       	cpc	r1, r25
    1118:	74 f5       	brge	.+92     	; 0x1176 <lup+0x8e>

	{

	     if( *d == -90) { }
    111a:	f8 01       	movw	r30, r16
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	ff ef       	ldi	r31, 0xFF	; 255
    1122:	86 3a       	cpi	r24, 0xA6	; 166
    1124:	9f 07       	cpc	r25, r31
    1126:	b9 f0       	breq	.+46     	; 0x1156 <lup+0x6e>

         else if( *d == 180) {  *d = -90 ; }
    1128:	84 3b       	cpi	r24, 0xB4	; 180
    112a:	91 05       	cpc	r25, r1
    112c:	31 f4       	brne	.+12     	; 0x113a <lup+0x52>
    112e:	86 ea       	ldi	r24, 0xA6	; 166
    1130:	9f ef       	ldi	r25, 0xFF	; 255
    1132:	f8 01       	movw	r30, r16
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <lup+0x6e>

		else if( *d == 90)   {  *d = -90 ; }
    113a:	8a 35       	cpi	r24, 0x5A	; 90
    113c:	91 05       	cpc	r25, r1
    113e:	31 f4       	brne	.+12     	; 0x114c <lup+0x64>
    1140:	86 ea       	ldi	r24, 0xA6	; 166
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	f8 01       	movw	r30, r16
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <lup+0x6e>


		else {   *d = -90 ;   }
    114c:	86 ea       	ldi	r24, 0xA6	; 166
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	f8 01       	movw	r30, r16
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	80 83       	st	Z, r24


		return (a.x-1)*10+a.y;
    1156:	21 97       	sbiw	r28, 0x01	; 1
    1158:	9e 01       	movw	r18, r28
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	ce 01       	movw	r24, r28
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	82 0f       	add	r24, r18
    116e:	93 1f       	adc	r25, r19
    1170:	8e 0d       	add	r24, r14
    1172:	9f 1d       	adc	r25, r15
    1174:	7a c0       	rjmp	.+244    	; 0x126a <lup+0x182>


	}


	else if(vert <0)
    1176:	99 23       	and	r25, r25
    1178:	6c f5       	brge	.+90     	; 0x11d4 <lup+0xec>

	{


                if( *d == 90) {  }
    117a:	f8 01       	movw	r30, r16
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	8a 35       	cpi	r24, 0x5A	; 90
    1182:	91 05       	cpc	r25, r1
    1184:	b9 f0       	breq	.+46     	; 0x11b4 <lup+0xcc>

                else if( *d == 180) {  *d = 90 ;  }
    1186:	84 3b       	cpi	r24, 0xB4	; 180
    1188:	91 05       	cpc	r25, r1
    118a:	29 f4       	brne	.+10     	; 0x1196 <lup+0xae>
    118c:	8a e5       	ldi	r24, 0x5A	; 90
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	80 83       	st	Z, r24
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <lup+0xcc>

                else if( *d == -90)   {  *d = 90 ; }
    1196:	ff ef       	ldi	r31, 0xFF	; 255
    1198:	86 3a       	cpi	r24, 0xA6	; 166
    119a:	9f 07       	cpc	r25, r31
    119c:	31 f4       	brne	.+12     	; 0x11aa <lup+0xc2>
    119e:	8a e5       	ldi	r24, 0x5A	; 90
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <lup+0xcc>


                else {   *d = 90 ; }
    11aa:	8a e5       	ldi	r24, 0x5A	; 90
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	f8 01       	movw	r30, r16
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24

		return (a.x+1)*10+a.y;
    11b4:	21 96       	adiw	r28, 0x01	; 1
    11b6:	9e 01       	movw	r18, r28
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	ce 01       	movw	r24, r28
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	8e 0d       	add	r24, r14
    11d0:	9f 1d       	adc	r25, r15
    11d2:	4b c0       	rjmp	.+150    	; 0x126a <lup+0x182>

	a.x =  l/10;
	a.y  = l%10 ;

	b.x = h/10;
	b.y = h%10;
    11d4:	cf 01       	movw	r24, r30
    11d6:	6a e0       	ldi	r22, 0x0A	; 10
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>

	int vert ;
	int horz ;

	vert = a.x - b.x;
	horz = a.y - b.y;
    11de:	97 01       	movw	r18, r14
    11e0:	28 1b       	sub	r18, r24
    11e2:	39 0b       	sbc	r19, r25
    11e4:	c9 01       	movw	r24, r18
	}




	else if(horz>0)
    11e6:	18 16       	cp	r1, r24
    11e8:	19 06       	cpc	r1, r25
    11ea:	54 f5       	brge	.+84     	; 0x1240 <lup+0x158>


	{

                if( *d == 180) {  }
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	84 3b       	cpi	r24, 0xB4	; 180
    11f4:	91 05       	cpc	r25, r1
    11f6:	a9 f0       	breq	.+42     	; 0x1222 <lup+0x13a>

                else if( *d == 90) {  *d = 180 ; }
    11f8:	8a 35       	cpi	r24, 0x5A	; 90
    11fa:	91 05       	cpc	r25, r1
    11fc:	29 f4       	brne	.+10     	; 0x1208 <lup+0x120>
    11fe:	84 eb       	ldi	r24, 0xB4	; 180
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <lup+0x13a>

                else if( *d == 0)   {  *d = 180 ;  }
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	31 f4       	brne	.+12     	; 0x1218 <lup+0x130>
    120c:	84 eb       	ldi	r24, 0xB4	; 180
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	f8 01       	movw	r30, r16
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <lup+0x13a>


                else {   *d = 180 ;  }
    1218:	84 eb       	ldi	r24, 0xB4	; 180
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	f8 01       	movw	r30, r16
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24

		return (a.x)*10+a.y-1;
    1222:	ce 01       	movw	r24, r28
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	cc 0f       	add	r28, r28
    122a:	dd 1f       	adc	r29, r29
    122c:	cc 0f       	add	r28, r28
    122e:	dd 1f       	adc	r29, r29
    1230:	cc 0f       	add	r28, r28
    1232:	dd 1f       	adc	r29, r29
    1234:	8c 0f       	add	r24, r28
    1236:	9d 1f       	adc	r25, r29
    1238:	8e 0d       	add	r24, r14
    123a:	9f 1d       	adc	r25, r15
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	15 c0       	rjmp	.+42     	; 0x126a <lup+0x182>


	{


                if( *d == 0) {  }
    1240:	f8 01       	movw	r30, r16
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	11 f0       	breq	.+4      	; 0x124e <lup+0x166>
                else if( *d == -90) {  *d = 0 ; }

                else if( *d == 180)   {  *d = 0 ;  }


                else {   *d = 0 ; }
    124a:	11 82       	std	Z+1, r1	; 0x01
    124c:	10 82       	st	Z, r1




		return (a.x)*10+a.y+1;
    124e:	ce 01       	movw	r24, r28
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	cc 0f       	add	r28, r28
    1256:	dd 1f       	adc	r29, r29
    1258:	cc 0f       	add	r28, r28
    125a:	dd 1f       	adc	r29, r29
    125c:	cc 0f       	add	r28, r28
    125e:	dd 1f       	adc	r29, r29
    1260:	8c 0f       	add	r24, r28
    1262:	9d 1f       	adc	r25, r29
    1264:	8e 0d       	add	r24, r14
    1266:	9f 1d       	adc	r25, r15
    1268:	01 96       	adiw	r24, 0x01	; 1





}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <director>:


	struct some v ;


	v.x = val/10   ;
    1278:	6a e0       	ldi	r22, 0x0A	; 10
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
	v.y = val % 10 ;
    1280:	28 2f       	mov	r18, r24
    1282:	39 2f       	mov	r19, r25



	if( v.x == 0  )
    1284:	61 15       	cp	r22, r1
    1286:	71 05       	cpc	r23, r1
    1288:	49 f4       	brne	.+18     	; 0x129c <director+0x24>
	{

	if(v.y == 0) { return 225  ; }
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	f1 f0       	breq	.+60     	; 0x12cc <director+0x54>

else if(v.y == 5) { return  -45 ;  }
    1290:	25 30       	cpi	r18, 0x05	; 5
    1292:	31 05       	cpc	r19, r1
    1294:	f1 f4       	brne	.+60     	; 0x12d2 <director+0x5a>
    1296:	23 ed       	ldi	r18, 0xD3	; 211
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	29 c0       	rjmp	.+82     	; 0x12ee <director+0x76>


}


else if(    v.x == 5     )
    129c:	65 30       	cpi	r22, 0x05	; 5
    129e:	71 05       	cpc	r23, r1
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <director+0x3c>


{
  if(v.y == 0) { return    135; }
    12a2:	21 15       	cp	r18, r1
    12a4:	31 05       	cpc	r19, r1
    12a6:	c1 f0       	breq	.+48     	; 0x12d8 <director+0x60>

  else if(v.y == 5) { return   45 ;  }
    12a8:	25 30       	cpi	r18, 0x05	; 5
    12aa:	31 05       	cpc	r19, r1
    12ac:	c1 f4       	brne	.+48     	; 0x12de <director+0x66>
    12ae:	2d e2       	ldi	r18, 0x2D	; 45
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	1d c0       	rjmp	.+58     	; 0x12ee <director+0x76>

}



  else if( v.x > 0 && v.x < 5  && v.y ==5 )   { return 0; }
    12b4:	61 50       	subi	r22, 0x01	; 1
    12b6:	70 40       	sbci	r23, 0x00	; 0
    12b8:	64 30       	cpi	r22, 0x04	; 4
    12ba:	71 05       	cpc	r23, r1
    12bc:	30 f4       	brcc	.+12     	; 0x12ca <director+0x52>
    12be:	25 30       	cpi	r18, 0x05	; 5
    12c0:	31 05       	cpc	r19, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <director+0x6c>


else if( v.x > 0 && v.x  < 5  && v.y == 0 )   { return 180; }
    12c4:	21 15       	cp	r18, r1
    12c6:	31 05       	cpc	r19, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <director+0x72>
    12ca:	08 95       	ret


	if( v.x == 0  )
	{

	if(v.y == 0) { return 225  ; }
    12cc:	21 ee       	ldi	r18, 0xE1	; 225
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <director+0x76>

else if(v.y == 5) { return  -45 ;  }

  else  if (v.y  )  { return(-90) ; }
    12d2:	26 ea       	ldi	r18, 0xA6	; 166
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <director+0x76>

else if(    v.x == 5     )


{
  if(v.y == 0) { return    135; }
    12d8:	27 e8       	ldi	r18, 0x87	; 135
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <director+0x76>

  else if(v.y == 5) { return   45 ;  }

  else  return(90) ; 
    12de:	2a e5       	ldi	r18, 0x5A	; 90
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <director+0x76>

}



  else if( v.x > 0 && v.x < 5  && v.y ==5 )   { return 0; }
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <director+0x76>


else if( v.x > 0 && v.x  < 5  && v.y == 0 )   { return 180; }
    12ea:	24 eb       	ldi	r18, 0xB4	; 180
    12ec:	30 e0       	ldi	r19, 0x00	; 0





}
    12ee:	82 2f       	mov	r24, r18
    12f0:	93 2f       	mov	r25, r19
    12f2:	08 95       	ret

000012f4 <placeit>:
	int d;
};



void placeit(int a, int d, int ref, int *dir) {
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	8c 01       	movw	r16, r24
    130a:	7b 01       	movw	r14, r22
    130c:	fa 01       	movw	r30, r20
    130e:	59 01       	movw	r10, r18

	struct placer_co dd;

	dd.b = ref;
	dd.a = ((dd.b / 10) * 10) + dd.b % 10 - 1;
    1310:	ca 01       	movw	r24, r20
    1312:	6a e0       	ldi	r22, 0x0A	; 10
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    131a:	ac 01       	movw	r20, r24
    131c:	cb 01       	movw	r24, r22
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	9b 01       	movw	r18, r22
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	82 0f       	add	r24, r18
    1332:	93 1f       	adc	r25, r19
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	6c 01       	movw	r12, r24
    133a:	08 94       	sec
    133c:	c1 08       	sbc	r12, r1
    133e:	d1 08       	sbc	r13, r1
	dd.c = (dd.b / 10 + 1) * 10 + dd.b % 10;
    1340:	cb 01       	movw	r24, r22
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	9c 01       	movw	r18, r24
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	ea 01       	movw	r28, r20
    135c:	c8 0f       	add	r28, r24
    135e:	d9 1f       	adc	r29, r25
	dd.d = (dd.a / 10 + 1) * 10 + dd.a % 10;

	if (a == dd.b)
    1360:	e0 17       	cp	r30, r16
    1362:	f1 07       	cpc	r31, r17
    1364:	09 f0       	breq	.+2      	; 0x1368 <placeit+0x74>
    1366:	51 c0       	rjmp	.+162    	; 0x140a <placeit+0x116>

	{

		if (d == dd.a) {
    1368:	ce 14       	cp	r12, r14
    136a:	df 04       	cpc	r13, r15
    136c:	41 f5       	brne	.+80     	; 0x13be <placeit+0xca>

			if (*dir == 180)
    136e:	f5 01       	movw	r30, r10
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	84 3b       	cpi	r24, 0xB4	; 180
    1376:	91 05       	cpc	r25, r1
    1378:	69 f4       	brne	.+26     	; 0x1394 <placeit+0xa0>

			{
				velocity(246,255);   forward_half();   right_drop_seq();  forwarder();   
    137a:	86 ef       	ldi	r24, 0xF6	; 246
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    1386:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    138a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    138e:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    1392:	47 c1       	rjmp	.+654    	; 0x1622 <placeit+0x32e>
			}

			else if (*dir == 90)
    1394:	8a 35       	cpi	r24, 0x5A	; 90
    1396:	91 05       	cpc	r25, r1
    1398:	09 f0       	breq	.+2      	; 0x139c <placeit+0xa8>
    139a:	43 c1       	rjmp	.+646    	; 0x1622 <placeit+0x32e>
			{
			
				 make_correct_direction(180); velocity(246,255);  forward_half();  right_drop_seq();   forwarder();
    139c:	84 eb       	ldi	r24, 0xB4	; 180
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    13a4:	86 ef       	ldi	r24, 0xF6	; 246
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    13b0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    13b4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    13b8:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    13bc:	32 c1       	rjmp	.+612    	; 0x1622 <placeit+0x32e>
			}

		}


		else if (d == dd.c)
    13be:	ce 15       	cp	r28, r14
    13c0:	df 05       	cpc	r29, r15
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <placeit+0xd2>
    13c4:	2e c1       	rjmp	.+604    	; 0x1622 <placeit+0x32e>
		{


			if (*dir == 180)
    13c6:	f5 01       	movw	r30, r10
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	84 3b       	cpi	r24, 0xB4	; 180
    13ce:	91 05       	cpc	r25, r1
    13d0:	89 f4       	brne	.+34     	; 0x13f4 <placeit+0x100>
			{
				 make_correct_direction(0); velocity(246,255);  forward_half();  left_drop_seq();   forwarder();
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    13da:	86 ef       	ldi	r24, 0xF6	; 246
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	6f ef       	ldi	r22, 0xFF	; 255
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    13e6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    13ea:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    13ee:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    13f2:	17 c1       	rjmp	.+558    	; 0x1622 <placeit+0x32e>
			}

			else if (*dir == 90)
    13f4:	8a 35       	cpi	r24, 0x5A	; 90
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <placeit+0x108>
    13fa:	13 c1       	rjmp	.+550    	; 0x1622 <placeit+0x32e>
			{
				 forward_half();  left_drop_seq();  forwarder();
    13fc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    1400:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    1404:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    1408:	0c c1       	rjmp	.+536    	; 0x1622 <placeit+0x32e>
	struct placer_co dd;

	dd.b = ref;
	dd.a = ((dd.b / 10) * 10) + dd.b % 10 - 1;
	dd.c = (dd.b / 10 + 1) * 10 + dd.b % 10;
	dd.d = (dd.a / 10 + 1) * 10 + dd.a % 10;
    140a:	c6 01       	movw	r24, r12
    140c:	6a e0       	ldi	r22, 0x0A	; 10
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    1414:	ac 01       	movw	r20, r24
    1416:	cb 01       	movw	r24, r22
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	9c 01       	movw	r18, r24
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	82 0f       	add	r24, r18
    142e:	93 1f       	adc	r25, r19
    1430:	84 0f       	add	r24, r20
    1432:	95 1f       	adc	r25, r21

	}
	


	else if (a == dd.c)
    1434:	c0 17       	cp	r28, r16
    1436:	d1 07       	cpc	r29, r17
    1438:	09 f0       	breq	.+2      	; 0x143c <placeit+0x148>
    143a:	53 c0       	rjmp	.+166    	; 0x14e2 <placeit+0x1ee>

	{

		if (d == dd.b) {
    143c:	ee 15       	cp	r30, r14
    143e:	ff 05       	cpc	r31, r15
    1440:	49 f5       	brne	.+82     	; 0x1494 <placeit+0x1a0>

			if (*dir == -90)
    1442:	f5 01       	movw	r30, r10
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	ff ef       	ldi	r31, 0xFF	; 255
    144a:	86 3a       	cpi	r24, 0xA6	; 166
    144c:	9f 07       	cpc	r25, r31
    144e:	69 f4       	brne	.+26     	; 0x146a <placeit+0x176>

			{
				velocity(246,255);   forward_half();   right_drop_seq();  forwarder();   
    1450:	86 ef       	ldi	r24, 0xF6	; 246
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	6f ef       	ldi	r22, 0xFF	; 255
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    145c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    1460:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    1464:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    1468:	dc c0       	rjmp	.+440    	; 0x1622 <placeit+0x32e>
			}

			else if (*dir == 180)
    146a:	84 3b       	cpi	r24, 0xB4	; 180
    146c:	91 05       	cpc	r25, r1
    146e:	09 f0       	breq	.+2      	; 0x1472 <placeit+0x17e>
    1470:	d8 c0       	rjmp	.+432    	; 0x1622 <placeit+0x32e>

			{
				make_correct_direction(180); velocity(246,255);  forward_half();  right_drop_seq();   forwarder();
    1472:	84 eb       	ldi	r24, 0xB4	; 180
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    147a:	86 ef       	ldi	r24, 0xF6	; 246
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	6f ef       	ldi	r22, 0xFF	; 255
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    1486:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    148a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    148e:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    1492:	c7 c0       	rjmp	.+398    	; 0x1622 <placeit+0x32e>
			}

		}

		else if (d == dd.d) {
    1494:	8e 15       	cp	r24, r14
    1496:	9f 05       	cpc	r25, r15
    1498:	09 f0       	breq	.+2      	; 0x149c <placeit+0x1a8>
    149a:	c3 c0       	rjmp	.+390    	; 0x1622 <placeit+0x32e>

			if (*dir == 180)
    149c:	f5 01       	movw	r30, r10
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	84 3b       	cpi	r24, 0xB4	; 180
    14a4:	91 05       	cpc	r25, r1
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <placeit+0x1c2>

			{
				 forward_half();  left_drop_seq();  forwarder();
    14a8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    14ac:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    14b0:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    14b4:	b6 c0       	rjmp	.+364    	; 0x1622 <placeit+0x32e>
			}

			else if (*dir == -90) {
    14b6:	ff ef       	ldi	r31, 0xFF	; 255
    14b8:	86 3a       	cpi	r24, 0xA6	; 166
    14ba:	9f 07       	cpc	r25, r31
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <placeit+0x1cc>
    14be:	b1 c0       	rjmp	.+354    	; 0x1622 <placeit+0x32e>
				 make_correct_direction(0); velocity(246,255);  forward_half();  left_drop_seq();   forwarder();
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    14c8:	86 ef       	ldi	r24, 0xF6	; 246
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	6f ef       	ldi	r22, 0xFF	; 255
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    14d4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    14d8:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    14dc:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    14e0:	a0 c0       	rjmp	.+320    	; 0x1622 <placeit+0x32e>

		}

	}

	else if (a == dd.d)
    14e2:	80 17       	cp	r24, r16
    14e4:	91 07       	cpc	r25, r17
    14e6:	09 f0       	breq	.+2      	; 0x14ea <placeit+0x1f6>
    14e8:	51 c0       	rjmp	.+162    	; 0x158c <placeit+0x298>

	{

		if (d == dd.a) {
    14ea:	ce 14       	cp	r12, r14
    14ec:	df 04       	cpc	r13, r15
    14ee:	11 f5       	brne	.+68     	; 0x1534 <placeit+0x240>
			
			if (*dir == -90)
    14f0:	f5 01       	movw	r30, r10
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	ff ef       	ldi	r31, 0xFF	; 255
    14f8:	86 3a       	cpi	r24, 0xA6	; 166
    14fa:	9f 07       	cpc	r25, r31
    14fc:	39 f4       	brne	.+14     	; 0x150c <placeit+0x218>

		 {              forward_half();  left_drop_seq();  forwarder();                  }
    14fe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    1502:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    1506:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    150a:	8b c0       	rjmp	.+278    	; 0x1622 <placeit+0x32e>

			else  if (*dir == 0)
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	09 f0       	breq	.+2      	; 0x1512 <placeit+0x21e>
    1510:	88 c0       	rjmp	.+272    	; 0x1622 <placeit+0x32e>

		{                make_correct_direction(0); velocity(246,255);  forward_half();  left_drop_seq();   forwarder();              }
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    151a:	86 ef       	ldi	r24, 0xF6	; 246
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    1526:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    152a:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    152e:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    1532:	77 c0       	rjmp	.+238    	; 0x1622 <placeit+0x32e>



		}

		else if (d == dd.c)
    1534:	ce 15       	cp	r28, r14
    1536:	df 05       	cpc	r29, r15
    1538:	09 f0       	breq	.+2      	; 0x153c <placeit+0x248>
    153a:	73 c0       	rjmp	.+230    	; 0x1622 <placeit+0x32e>


		{

			if (*dir == -90)
    153c:	f5 01       	movw	r30, r10
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	ff ef       	ldi	r31, 0xFF	; 255
    1544:	86 3a       	cpi	r24, 0xA6	; 166
    1546:	9f 07       	cpc	r25, r31
    1548:	89 f4       	brne	.+34     	; 0x156c <placeit+0x278>
		{  make_correct_direction(180); velocity(246,255);  forward_half();  right_drop_seq();   forwarder();         }
    154a:	84 eb       	ldi	r24, 0xB4	; 180
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    1552:	86 ef       	ldi	r24, 0xF6	; 246
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	6f ef       	ldi	r22, 0xFF	; 255
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    155e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    1562:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    1566:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    156a:	5b c0       	rjmp	.+182    	; 0x1622 <placeit+0x32e>


			
			else if (*dir == 0)
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f0       	breq	.+2      	; 0x1572 <placeit+0x27e>
    1570:	58 c0       	rjmp	.+176    	; 0x1622 <placeit+0x32e>
		{  velocity(246,255);   forward_half();   right_drop_seq();  forwarder();              }
    1572:	86 ef       	ldi	r24, 0xF6	; 246
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    157e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    1582:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    1586:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    158a:	4b c0       	rjmp	.+150    	; 0x1622 <placeit+0x32e>
	else

	{    
		

        if (d == dd.b) {
    158c:	ee 15       	cp	r30, r14
    158e:	ff 05       	cpc	r31, r15
    1590:	01 f5       	brne	.+64     	; 0x15d2 <placeit+0x2de>


			if (*dir == 0) {  forward_half();  left_drop_seq();  forwarder();                   }
    1592:	f5 01       	movw	r30, r10
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	39 f4       	brne	.+14     	; 0x15aa <placeit+0x2b6>
    159c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    15a0:	0e 94 30 11 	call	0x2260	; 0x2260 <left_drop_seq>
    15a4:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    15a8:	3c c0       	rjmp	.+120    	; 0x1622 <placeit+0x32e>
			

			else if (*dir == 90)
    15aa:	8a 35       	cpi	r24, 0x5A	; 90
    15ac:	91 05       	cpc	r25, r1
    15ae:	c9 f5       	brne	.+114    	; 0x1622 <placeit+0x32e>
		{            make_correct_direction(0); velocity(246,255);  forward_half();  right_drop_seq();   forwarder();              }
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    15b8:	86 ef       	ldi	r24, 0xF6	; 246
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	6f ef       	ldi	r22, 0xFF	; 255
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    15c4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    15c8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    15cc:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    15d0:	28 c0       	rjmp	.+80     	; 0x1622 <placeit+0x32e>



		}

              else    if (d == dd.d) {
    15d2:	8e 15       	cp	r24, r14
    15d4:	9f 05       	cpc	r25, r15
    15d6:	29 f5       	brne	.+74     	; 0x1622 <placeit+0x32e>
	                  
					  
	                  
	                  if (*dir == 90)
    15d8:	f5 01       	movw	r30, r10
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	8a 35       	cpi	r24, 0x5A	; 90
    15e0:	91 05       	cpc	r25, r1
    15e2:	69 f4       	brne	.+26     	; 0x15fe <placeit+0x30a>
                  {                   velocity(246,255);   forward_half();   right_drop_seq();  forwarder();                }
    15e4:	86 ef       	ldi	r24, 0xF6	; 246
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	6f ef       	ldi	r22, 0xFF	; 255
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    15f0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    15f4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    15f8:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
    15fc:	12 c0       	rjmp	.+36     	; 0x1622 <placeit+0x32e>


	                  else if (*dir == 0)
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	81 f4       	brne	.+32     	; 0x1622 <placeit+0x32e>
                  {        make_correct_direction(180); velocity(246,255);  forward_half();  right_drop_seq();   forwarder();        }
    1602:	84 eb       	ldi	r24, 0xB4	; 180
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 ed 00 	call	0x1da	; 0x1da <make_correct_direction>
    160a:	86 ef       	ldi	r24, 0xF6	; 246
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	6f ef       	ldi	r22, 0xFF	; 255
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
    1616:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <forward_half>
    161a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <right_drop_seq>
    161e:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>
	}




}
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	08 95       	ret

00001638 <resol>:
//#include "dirani.c"



void resol( int a, int *d )
{
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	ec 01       	movw	r28, r24
    1642:	8b 01       	movw	r16, r22



	int gd = director(a);
    1644:	0e 94 3c 09 	call	0x1278	; 0x1278 <director>

	if ( gd == -90)
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	86 3a       	cpi	r24, 0xA6	; 166
    164c:	92 07       	cpc	r25, r18
    164e:	b1 f4       	brne	.+44     	; 0x167c <resol+0x44>

	{
	              if( *d   == -90) {         front_seq();                   }
    1650:	f8 01       	movw	r30, r16
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	ff ef       	ldi	r31, 0xFF	; 255
    1658:	86 3a       	cpi	r24, 0xA6	; 166
    165a:	9f 07       	cpc	r25, r31
    165c:	19 f4       	brne	.+6      	; 0x1664 <resol+0x2c>
    165e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <front_seq>
    1662:	96 c0       	rjmp	.+300    	; 0x1790 <resol+0x158>
	
	
              else if(*d == 180) {       left_pick_seq();                           }
    1664:	84 3b       	cpi	r24, 0xB4	; 180
    1666:	91 05       	cpc	r25, r1
    1668:	19 f4       	brne	.+6      	; 0x1670 <resol+0x38>
    166a:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
    166e:	90 c0       	rjmp	.+288    	; 0x1790 <resol+0x158>

        	 else if(*d ==  0)   {      right_pick_seq();                       }
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	09 f0       	breq	.+2      	; 0x1676 <resol+0x3e>
    1674:	8d c0       	rjmp	.+282    	; 0x1790 <resol+0x158>
    1676:	0e 94 a7 10 	call	0x214e	; 0x214e <right_pick_seq>
    167a:	8a c0       	rjmp	.+276    	; 0x1790 <resol+0x158>

	}



else if ( gd == 0)
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	b1 f4       	brne	.+44     	; 0x16ac <resol+0x74>

	{


           if( *d   == 0) {    front_seq();         }
    1680:	f8 01       	movw	r30, r16
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	19 f4       	brne	.+6      	; 0x1690 <resol+0x58>
    168a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <front_seq>
    168e:	80 c0       	rjmp	.+256    	; 0x1790 <resol+0x158>

  
          else if(*d == -90) {        left_pick_seq();         }
    1690:	ff ef       	ldi	r31, 0xFF	; 255
    1692:	86 3a       	cpi	r24, 0xA6	; 166
    1694:	9f 07       	cpc	r25, r31
    1696:	19 f4       	brne	.+6      	; 0x169e <resol+0x66>
    1698:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
    169c:	79 c0       	rjmp	.+242    	; 0x1790 <resol+0x158>

            else if(*d == 90)   {     right_pick_seq();           }
    169e:	8a 35       	cpi	r24, 0x5A	; 90
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <resol+0x6e>
    16a4:	75 c0       	rjmp	.+234    	; 0x1790 <resol+0x158>
    16a6:	0e 94 a7 10 	call	0x214e	; 0x214e <right_pick_seq>
    16aa:	72 c0       	rjmp	.+228    	; 0x1790 <resol+0x158>
           else {} 

	}


else if ( gd == 90)
    16ac:	8a 35       	cpi	r24, 0x5A	; 90
    16ae:	91 05       	cpc	r25, r1
    16b0:	a9 f4       	brne	.+42     	; 0x16dc <resol+0xa4>

{

           if( *d   == 90) {    front_seq();       }
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	8a 35       	cpi	r24, 0x5A	; 90
    16ba:	91 05       	cpc	r25, r1
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <resol+0x8c>
    16be:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <front_seq>
    16c2:	66 c0       	rjmp	.+204    	; 0x1790 <resol+0x158>

  
          else if(*d == 180) {   right_pick_seq();             }
    16c4:	84 3b       	cpi	r24, 0xB4	; 180
    16c6:	91 05       	cpc	r25, r1
    16c8:	19 f4       	brne	.+6      	; 0x16d0 <resol+0x98>
    16ca:	0e 94 a7 10 	call	0x214e	; 0x214e <right_pick_seq>
    16ce:	60 c0       	rjmp	.+192    	; 0x1790 <resol+0x158>

          else if(*d == 0)   {         left_pick_seq();         }
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <resol+0x9e>
    16d4:	5d c0       	rjmp	.+186    	; 0x1790 <resol+0x158>
    16d6:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
    16da:	5a c0       	rjmp	.+180    	; 0x1790 <resol+0x158>

           else {} 
  
}

else if ( gd == 180)
    16dc:	84 3b       	cpi	r24, 0xB4	; 180
    16de:	91 05       	cpc	r25, r1
    16e0:	b9 f4       	brne	.+46     	; 0x1710 <resol+0xd8>

{

           if( *d   == 180) {    front_seq();           }
    16e2:	f8 01       	movw	r30, r16
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	84 3b       	cpi	r24, 0xB4	; 180
    16ea:	91 05       	cpc	r25, r1
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <resol+0xbc>
    16ee:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <front_seq>
    16f2:	4e c0       	rjmp	.+156    	; 0x1790 <resol+0x158>

  
          else if(*d == 90) {      left_pick_seq();            }
    16f4:	8a 35       	cpi	r24, 0x5A	; 90
    16f6:	91 05       	cpc	r25, r1
    16f8:	19 f4       	brne	.+6      	; 0x1700 <resol+0xc8>
    16fa:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
    16fe:	48 c0       	rjmp	.+144    	; 0x1790 <resol+0x158>

         else if(*d == -90)   {       right_pick_seq();                        }
    1700:	ff ef       	ldi	r31, 0xFF	; 255
    1702:	86 3a       	cpi	r24, 0xA6	; 166
    1704:	9f 07       	cpc	r25, r31
    1706:	09 f0       	breq	.+2      	; 0x170a <resol+0xd2>
    1708:	43 c0       	rjmp	.+134    	; 0x1790 <resol+0x158>
    170a:	0e 94 a7 10 	call	0x214e	; 0x214e <right_pick_seq>
    170e:	40 c0       	rjmp	.+128    	; 0x1790 <resol+0x158>
}




else if( gd == 135) {
    1710:	87 38       	cpi	r24, 0x87	; 135
    1712:	91 05       	cpc	r25, r1
    1714:	79 f4       	brne	.+30     	; 0x1734 <resol+0xfc>

	if(*d == 90) { slight_left_seq(); }
    1716:	f8 01       	movw	r30, r16
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	8a 35       	cpi	r24, 0x5A	; 90
    171e:	91 05       	cpc	r25, r1
    1720:	19 f4       	brne	.+6      	; 0x1728 <resol+0xf0>
    1722:	0e 94 b5 11 	call	0x236a	; 0x236a <slight_left_seq>
    1726:	34 c0       	rjmp	.+104    	; 0x1790 <resol+0x158>

	else if( *d == 180) {  slight_right_seq();}
    1728:	84 3b       	cpi	r24, 0xB4	; 180
    172a:	91 05       	cpc	r25, r1
    172c:	89 f5       	brne	.+98     	; 0x1790 <resol+0x158>
    172e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <slight_right_seq>
    1732:	2e c0       	rjmp	.+92     	; 0x1790 <resol+0x158>
}
 



else if(gd == 45) {
    1734:	8d 32       	cpi	r24, 0x2D	; 45
    1736:	91 05       	cpc	r25, r1
    1738:	71 f4       	brne	.+28     	; 0x1756 <resol+0x11e>

		if(*d == 0) { slight_left_seq(); }
    173a:	f8 01       	movw	r30, r16
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	19 f4       	brne	.+6      	; 0x174a <resol+0x112>
    1744:	0e 94 b5 11 	call	0x236a	; 0x236a <slight_left_seq>
    1748:	23 c0       	rjmp	.+70     	; 0x1790 <resol+0x158>

		else if( *d ==90) { slight_right_seq(); }
    174a:	8a 35       	cpi	r24, 0x5A	; 90
    174c:	91 05       	cpc	r25, r1
    174e:	01 f5       	brne	.+64     	; 0x1790 <resol+0x158>
    1750:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <slight_right_seq>
    1754:	1d c0       	rjmp	.+58     	; 0x1790 <resol+0x158>
 		else {}


}

else if (gd == -45) {
    1756:	ff ef       	ldi	r31, 0xFF	; 255
    1758:	83 3d       	cpi	r24, 0xD3	; 211
    175a:	9f 07       	cpc	r25, r31
    175c:	79 f4       	brne	.+30     	; 0x177c <resol+0x144>

		if(*d == 0) {   slight_right_seq();  }
    175e:	f8 01       	movw	r30, r16
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	19 f4       	brne	.+6      	; 0x176e <resol+0x136>
    1768:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <slight_right_seq>
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <resol+0x158>

		else if( *d == -90) { slight_left_seq(); }
    176e:	ff ef       	ldi	r31, 0xFF	; 255
    1770:	86 3a       	cpi	r24, 0xA6	; 166
    1772:	9f 07       	cpc	r25, r31
    1774:	69 f4       	brne	.+26     	; 0x1790 <resol+0x158>
    1776:	0e 94 b5 11 	call	0x236a	; 0x236a <slight_left_seq>
    177a:	0a c0       	rjmp	.+20     	; 0x1790 <resol+0x158>

}

else {

    if(a ==0) {      if(*d == 90)   {  slight_down_left_seq();  } 
    177c:	20 97       	sbiw	r28, 0x00	; 0
    177e:	41 f4       	brne	.+16     	; 0x1790 <resol+0x158>
    1780:	f8 01       	movw	r30, r16
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	8a 35       	cpi	r24, 0x5A	; 90
    1788:	91 05       	cpc	r25, r1
    178a:	11 f4       	brne	.+4      	; 0x1790 <resol+0x158>
    178c:	0e 94 aa 11 	call	0x2354	; 0x2354 <slight_down_left_seq>
}
 



}
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <Sharp_GP2D12_estimation>:
}



unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    179e:	68 2f       	mov	r22, r24
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    17aa:	2f ee       	ldi	r18, 0xEF	; 239
    17ac:	39 ec       	ldi	r19, 0xC9	; 201
    17ae:	43 e9       	ldi	r20, 0x93	; 147
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 81 19 	call	0x3302	; 0x3302 <pow>
    17b6:	b6 2f       	mov	r27, r22
    17b8:	a7 2f       	mov	r26, r23
    17ba:	38 2f       	mov	r19, r24
    17bc:	29 2f       	mov	r18, r25
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e8       	ldi	r24, 0x80	; 128
    17c4:	9f e3       	ldi	r25, 0x3F	; 63
    17c6:	42 2f       	mov	r20, r18
    17c8:	0b 2f       	mov	r16, r27
    17ca:	1a 2f       	mov	r17, r26
    17cc:	23 2f       	mov	r18, r19
    17ce:	34 2f       	mov	r19, r20
    17d0:	a9 01       	movw	r20, r18
    17d2:	98 01       	movw	r18, r16
    17d4:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__divsf3>
    17d8:	2a e9       	ldi	r18, 0x9A	; 154
    17da:	39 ef       	ldi	r19, 0xF9	; 249
    17dc:	4e e2       	ldi	r20, 0x2E	; 46
    17de:	55 e4       	ldi	r21, 0x45	; 69
    17e0:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulsf3>
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulsf3>
    17f0:	0e 94 5f 18 	call	0x30be	; 0x30be <__fixsfsi>
    17f4:	88 27       	eor	r24, r24
    17f6:	77 fd       	sbrc	r23, 7
    17f8:	80 95       	com	r24
    17fa:	98 2f       	mov	r25, r24
    17fc:	0e 94 92 18 	call	0x3124	; 0x3124 <__floatsisf>
	distanceInt = (int)distance;
    1800:	0e 94 5f 18 	call	0x30be	; 0x30be <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
    1804:	86 2f       	mov	r24, r22
    1806:	97 2f       	mov	r25, r23
    1808:	23 e0       	ldi	r18, 0x03	; 3
    180a:	81 32       	cpi	r24, 0x21	; 33
    180c:	92 07       	cpc	r25, r18
    180e:	10 f0       	brcs	.+4      	; 0x1814 <Sharp_GP2D12_estimation+0x7a>
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	93 e0       	ldi	r25, 0x03	; 3
}
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <ADC_Conversion>:


unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	18 f0       	brcs	.+6      	; 0x1824 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
    181e:	98 e0       	ldi	r25, 0x08	; 8
    1820:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
    1824:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
    1826:	80 62       	ori	r24, 0x20	; 32
    1828:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    182c:	ea e7       	ldi	r30, 0x7A	; 122
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	80 64       	ori	r24, 0x40	; 64
    1834:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    1836:	80 81       	ld	r24, Z
    1838:	84 ff       	sbrs	r24, 4
    183a:	fd cf       	rjmp	.-6      	; 0x1836 <ADC_Conversion+0x1c>
	a=ADCH;
    183c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1840:	ea e7       	ldi	r30, 0x7A	; 122
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	90 81       	ld	r25, Z
    1846:	90 61       	ori	r25, 0x10	; 16
    1848:	90 83       	st	Z, r25
	ADCSRB = 0x00;
    184a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
    184e:	08 95       	ret

00001850 <print_sensor>:
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
}

void print_sensor(char row, char coloumn,unsigned char channel)
{
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	d8 2f       	mov	r29, r24
    1856:	c6 2f       	mov	r28, r22
    1858:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
    185a:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    185e:	48 2f       	mov	r20, r24
    1860:	80 93 53 02 	sts	0x0253, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1864:	8d 2f       	mov	r24, r29
    1866:	6c 2f       	mov	r22, r28
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	23 e0       	ldi	r18, 0x03	; 3
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <adc_init>:



void adc_init()
{
	ADCSRA = 0x00;
    1878:	ea e7       	ldi	r30, 0x7A	; 122
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    187e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1882:	80 e2       	ldi	r24, 0x20	; 32
    1884:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    1888:	80 e8       	ldi	r24, 0x80	; 128
    188a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    188c:	86 e8       	ldi	r24, 0x86	; 134
    188e:	80 83       	st	Z, r24
}
    1890:	08 95       	ret

00001892 <timer5_init>:

void timer5_init()
{
	TCCR5B = 0x00;	//Stop
    1892:	e1 e2       	ldi	r30, 0x21	; 33
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    18a4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    18a8:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    18ac:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    18b0:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    18b4:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    18b8:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    18bc:	89 ea       	ldi	r24, 0xA9	; 169
    18be:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    18c2:	8b e0       	ldi	r24, 0x0B	; 11
    18c4:	80 83       	st	Z, r24
}
    18c6:	08 95       	ret

000018c8 <init_devices>:



void init_devices()
{
	cli(); 
    18c8:	f8 94       	cli
	port_init();
    18ca:	0e 94 0a 10 	call	0x2014	; 0x2014 <port_init>
	timer1_init();
    18ce:	0e 94 08 01 	call	0x210	; 0x210 <timer1_init>
	adc_init();
    18d2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <adc_init>
	timer5_init();
    18d6:	0e 94 49 0c 	call	0x1892	; 0x1892 <timer5_init>
	left_position_encoder_interrupt_init();
    18da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();		
    18de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <right_position_encoder_interrupt_init>
	uart2_init();
    18e2:	0e 94 29 01 	call	0x252	; 0x252 <uart2_init>
	sei();  
    18e6:	78 94       	sei
}
    18e8:	08 95       	ret

000018ea <buzzer_pin_config>:



void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    18ea:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    18ec:	43 98       	cbi	0x08, 3	; 8
}
    18ee:	08 95       	ret

000018f0 <motion_pin_config>:

void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
    18f0:	81 b1       	in	r24, 0x01	; 1
    18f2:	8f 60       	ori	r24, 0x0F	; 15
    18f4:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
    18f6:	82 b1       	in	r24, 0x02	; 2
    18f8:	80 7f       	andi	r24, 0xF0	; 240
    18fa:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    18fc:	ea e0       	ldi	r30, 0x0A	; 10
    18fe:	f1 e0       	ldi	r31, 0x01	; 1
    1900:	80 81       	ld	r24, Z
    1902:	88 61       	ori	r24, 0x18	; 24
    1904:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1906:	eb e0       	ldi	r30, 0x0B	; 11
    1908:	f1 e0       	ldi	r31, 0x01	; 1
    190a:	80 81       	ld	r24, Z
    190c:	88 61       	ori	r24, 0x18	; 24
    190e:	80 83       	st	Z, r24
}
    1910:	08 95       	ret

00001912 <left_encoder_pin_config>:



void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1912:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1914:	74 9a       	sbi	0x0e, 4	; 14
}
    1916:	08 95       	ret

00001918 <right_encoder_pin_config>:

void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1918:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    191a:	75 9a       	sbi	0x0e, 5	; 14
}
    191c:	08 95       	ret

0000191e <interrupt_switch_config>:
	sei();   // Enables the global interrupt
}

void interrupt_switch_config (void)
{
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
    191e:	6f 98       	cbi	0x0d, 7	; 13
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
    1920:	77 9a       	sbi	0x0e, 7	; 14
}
    1922:	08 95       	ret

00001924 <__vector_6>:
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
	sei();   // Enables the global interrupt
}

ISR(INT5_vect)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
    1936:	80 91 06 02 	lds	r24, 0x0206
    193a:	90 91 07 02 	lds	r25, 0x0207
    193e:	a0 91 08 02 	lds	r26, 0x0208
    1942:	b0 91 09 02 	lds	r27, 0x0209
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	80 93 06 02 	sts	0x0206, r24
    1950:	90 93 07 02 	sts	0x0207, r25
    1954:	a0 93 08 02 	sts	0x0208, r26
    1958:	b0 93 09 02 	sts	0x0209, r27
}
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <__vector_5>:

ISR(INT4_vect)
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	8f 93       	push	r24
    197a:	9f 93       	push	r25
    197c:	af 93       	push	r26
    197e:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
    1980:	80 91 0a 02 	lds	r24, 0x020A
    1984:	90 91 0b 02 	lds	r25, 0x020B
    1988:	a0 91 0c 02 	lds	r26, 0x020C
    198c:	b0 91 0d 02 	lds	r27, 0x020D
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	a1 1d       	adc	r26, r1
    1994:	b1 1d       	adc	r27, r1
    1996:	80 93 0a 02 	sts	0x020A, r24
    199a:	90 93 0b 02 	sts	0x020B, r25
    199e:	a0 93 0c 02 	sts	0x020C, r26
    19a2:	b0 93 0d 02 	sts	0x020D, r27
}
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    19b8:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    19ba:	90 7f       	andi	r25, 0xF0	; 240

void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
    19bc:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    19be:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
    19c0:	92 b9       	out	0x02, r25	; 2
}
    19c2:	08 95       	ret

000019c4 <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
    19c4:	86 e0       	ldi	r24, 0x06	; 6
    19c6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19ca:	08 95       	ret

000019cc <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
    19cc:	89 e0       	ldi	r24, 0x09	; 9
    19ce:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19d2:	08 95       	ret

000019d4 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
    19d4:	85 e0       	ldi	r24, 0x05	; 5
    19d6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19da:	08 95       	ret

000019dc <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19e2:	08 95       	ret

000019e4 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19ea:	08 95       	ret

000019ec <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19f2:	08 95       	ret

000019f4 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    19fa:	08 95       	ret

000019fc <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
    19fc:	88 e0       	ldi	r24, 0x08	; 8
    19fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    1a02:	08 95       	ret

00001a04 <stop>:

void stop (void)
{
	motion_set(0x00);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <motion_set>
}
    1a0a:	08 95       	ret

00001a0c <forward_half>:
}


void forward_half(unsigned int DistanceInMM)
{
	forward();
    1a0c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <forward>
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = 28.100412139378044; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
    1a10:	10 92 06 02 	sts	0x0206, r1
    1a14:	10 92 07 02 	sts	0x0207, r1
    1a18:	10 92 08 02 	sts	0x0208, r1
    1a1c:	10 92 09 02 	sts	0x0209, r1
	ShaftCountLeft = 0;
    1a20:	10 92 0a 02 	sts	0x020A, r1
    1a24:	10 92 0b 02 	sts	0x020B, r1
    1a28:	10 92 0c 02 	sts	0x020C, r1
    1a2c:	10 92 0d 02 	sts	0x020D, r1
	
	while(1)
	{   
		
		
				Left_white_line= ADC_Conversion(3);
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1a36:	80 93 1e 02 	sts	0x021E, r24
				Center_white_line = ADC_Conversion(2);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1a40:	80 93 1d 02 	sts	0x021D, r24
				Right_white_line = ADC_Conversion(1);
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1a4a:	80 93 1c 02 	sts	0x021C, r24
		forward();
    1a4e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <forward>
		
		if(Left_white_line <= threshold && Center_white_line <= threshold && Right_white_line >= threshold)
    1a52:	80 91 04 02 	lds	r24, 0x0204
    1a56:	90 91 05 02 	lds	r25, 0x0205
    1a5a:	20 91 1e 02 	lds	r18, 0x021E
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	82 17       	cp	r24, r18
    1a62:	93 07       	cpc	r25, r19
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <forward_half+0x5c>
    1a66:	a1 c0       	rjmp	.+322    	; 0x1baa <forward_half+0x19e>
    1a68:	20 91 1d 02 	lds	r18, 0x021D
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	82 17       	cp	r24, r18
    1a70:	93 07       	cpc	r25, r19
    1a72:	ac f0       	brlt	.+42     	; 0x1a9e <forward_half+0x92>
    1a74:	20 91 1c 02 	lds	r18, 0x021C
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	7c f0       	brlt	.+30     	; 0x1a9e <forward_half+0x92>
		
		{
			velocity(250,200);
    1a80:	8a ef       	ldi	r24, 0xFA	; 250
    1a82:	68 ec       	ldi	r22, 0xC8	; 200
    1a84:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line >= threshold)
    1a88:	80 91 04 02 	lds	r24, 0x0204
    1a8c:	90 91 05 02 	lds	r25, 0x0205
    1a90:	20 91 1e 02 	lds	r18, 0x021E
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	82 17       	cp	r24, r18
    1a98:	93 07       	cpc	r25, r19
    1a9a:	0c f4       	brge	.+2      	; 0x1a9e <forward_half+0x92>
    1a9c:	86 c0       	rjmp	.+268    	; 0x1baa <forward_half+0x19e>
    1a9e:	20 91 1d 02 	lds	r18, 0x021D
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	28 17       	cp	r18, r24
    1aa6:	39 07       	cpc	r19, r25
    1aa8:	0c f4       	brge	.+2      	; 0x1aac <forward_half+0xa0>
    1aaa:	7a c0       	rjmp	.+244    	; 0x1ba0 <forward_half+0x194>
    1aac:	20 91 1c 02 	lds	r18, 0x021C
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	28 17       	cp	r18, r24
    1ab4:	39 07       	cpc	r19, r25
    1ab6:	0c f4       	brge	.+2      	; 0x1aba <forward_half+0xae>
    1ab8:	73 c0       	rjmp	.+230    	; 0x1ba0 <forward_half+0x194>
		
		{
			velocity(250,220);
    1aba:	8a ef       	ldi	r24, 0xFA	; 250
    1abc:	6c ed       	ldi	r22, 0xDC	; 220
    1abe:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    1ac2:	80 91 04 02 	lds	r24, 0x0204
    1ac6:	90 91 05 02 	lds	r25, 0x0205
    1aca:	20 91 1e 02 	lds	r18, 0x021E
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	0c f4       	brge	.+2      	; 0x1ad8 <forward_half+0xcc>
    1ad6:	69 c0       	rjmp	.+210    	; 0x1baa <forward_half+0x19e>
    1ad8:	20 91 1d 02 	lds	r18, 0x021D
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	28 17       	cp	r18, r24
    1ae0:	39 07       	cpc	r19, r25
    1ae2:	54 f0       	brlt	.+20     	; 0x1af8 <forward_half+0xec>
    1ae4:	20 91 1c 02 	lds	r18, 0x021C
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	82 17       	cp	r24, r18
    1aec:	93 07       	cpc	r25, r19
    1aee:	24 f0       	brlt	.+8      	; 0x1af8 <forward_half+0xec>
		
		{
			velocity(246,255);
    1af0:	86 ef       	ldi	r24, 0xF6	; 246
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		
		if(Left_white_line >= threshold && Center_white_line <=threshold && Right_white_line <= threshold)
    1af8:	80 91 04 02 	lds	r24, 0x0204
    1afc:	90 91 05 02 	lds	r25, 0x0205
    1b00:	20 91 1e 02 	lds	r18, 0x021E
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	28 17       	cp	r18, r24
    1b08:	39 07       	cpc	r19, r25
    1b0a:	64 f1       	brlt	.+88     	; 0x1b64 <forward_half+0x158>
    1b0c:	20 91 1d 02 	lds	r18, 0x021D
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	82 17       	cp	r24, r18
    1b14:	93 07       	cpc	r25, r19
    1b16:	0c f4       	brge	.+2      	; 0x1b1a <forward_half+0x10e>
    1b18:	4d c0       	rjmp	.+154    	; 0x1bb4 <forward_half+0x1a8>
    1b1a:	20 91 1c 02 	lds	r18, 0x021C
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	82 17       	cp	r24, r18
    1b22:	93 07       	cpc	r25, r19
    1b24:	0c f4       	brge	.+2      	; 0x1b28 <forward_half+0x11c>
    1b26:	46 c0       	rjmp	.+140    	; 0x1bb4 <forward_half+0x1a8>
		
		{
			velocity(200,250);
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	6a ef       	ldi	r22, 0xFA	; 250
    1b2c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    1b30:	80 91 04 02 	lds	r24, 0x0204
    1b34:	90 91 05 02 	lds	r25, 0x0205
    1b38:	20 91 1e 02 	lds	r18, 0x021E
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	28 17       	cp	r18, r24
    1b40:	39 07       	cpc	r19, r25
    1b42:	84 f0       	brlt	.+32     	; 0x1b64 <forward_half+0x158>
    1b44:	20 91 1d 02 	lds	r18, 0x021D
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	28 17       	cp	r18, r24
    1b4c:	39 07       	cpc	r19, r25
    1b4e:	54 f0       	brlt	.+20     	; 0x1b64 <forward_half+0x158>
    1b50:	20 91 1c 02 	lds	r18, 0x021C
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	24 f0       	brlt	.+8      	; 0x1b64 <forward_half+0x158>
		
		{
			velocity(220,250);
    1b5c:	8c ed       	ldi	r24, 0xDC	; 220
    1b5e:	6a ef       	ldi	r22, 0xFA	; 250
    1b60:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(ShaftCountRight  > ReqdShaftCountInt  ||   ShaftCountLeft  > ReqdShaftCountInt)
    1b64:	80 91 06 02 	lds	r24, 0x0206
    1b68:	90 91 07 02 	lds	r25, 0x0207
    1b6c:	a0 91 08 02 	lds	r26, 0x0208
    1b70:	b0 91 09 02 	lds	r27, 0x0209
    1b74:	8d 31       	cpi	r24, 0x1D	; 29
    1b76:	91 05       	cpc	r25, r1
    1b78:	a1 05       	cpc	r26, r1
    1b7a:	b1 05       	cpc	r27, r1
    1b7c:	70 f4       	brcc	.+28     	; 0x1b9a <forward_half+0x18e>
    1b7e:	80 91 0a 02 	lds	r24, 0x020A
    1b82:	90 91 0b 02 	lds	r25, 0x020B
    1b86:	a0 91 0c 02 	lds	r26, 0x020C
    1b8a:	b0 91 0d 02 	lds	r27, 0x020D
    1b8e:	8d 31       	cpi	r24, 0x1D	; 29
    1b90:	91 05       	cpc	r25, r1
    1b92:	a1 05       	cpc	r26, r1
    1b94:	b1 05       	cpc	r27, r1
    1b96:	08 f4       	brcc	.+2      	; 0x1b9a <forward_half+0x18e>
    1b98:	4b cf       	rjmp	.-362    	; 0x1a30 <forward_half+0x24>
			break;
		}
		
		
	}
	stop();
    1b9a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
			
}
    1b9e:	08 95       	ret
		{
			velocity(250,220);
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    1ba0:	80 91 04 02 	lds	r24, 0x0204
    1ba4:	90 91 05 02 	lds	r25, 0x0205
    1ba8:	97 cf       	rjmp	.-210    	; 0x1ad8 <forward_half+0xcc>
			velocity(246,255);
		}
		
		
		
		if(Left_white_line >= threshold && Center_white_line <=threshold && Right_white_line <= threshold)
    1baa:	80 91 04 02 	lds	r24, 0x0204
    1bae:	90 91 05 02 	lds	r25, 0x0205
    1bb2:	ac cf       	rjmp	.-168    	; 0x1b0c <forward_half+0x100>
		{
			velocity(200,250);
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    1bb4:	80 91 04 02 	lds	r24, 0x0204
    1bb8:	90 91 05 02 	lds	r25, 0x0205
    1bbc:	c3 cf       	rjmp	.-122    	; 0x1b44 <forward_half+0x138>

00001bbe <angle_rotate>:
	motion_set(0x00);
}

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    1bce:	28 e4       	ldi	r18, 0x48	; 72
    1bd0:	31 ee       	ldi	r19, 0xE1	; 225
    1bd2:	42 e8       	ldi	r20, 0x82	; 130
    1bd4:	50 e4       	ldi	r21, 0x40	; 64
    1bd6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1bda:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
    1be6:	10 92 06 02 	sts	0x0206, r1
    1bea:	10 92 07 02 	sts	0x0207, r1
    1bee:	10 92 08 02 	sts	0x0208, r1
    1bf2:	10 92 09 02 	sts	0x0209, r1
	ShaftCountLeft = 0;
    1bf6:	10 92 0a 02 	sts	0x020A, r1
    1bfa:	10 92 0b 02 	sts	0x020B, r1
    1bfe:	10 92 0c 02 	sts	0x020C, r1
    1c02:	10 92 0d 02 	sts	0x020D, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1c06:	f1 e0       	ldi	r31, 0x01	; 1
    1c08:	c0 e0       	ldi	r28, 0x00	; 0
    1c0a:	40 91 06 02 	lds	r20, 0x0206
    1c0e:	50 91 07 02 	lds	r21, 0x0207
    1c12:	60 91 08 02 	lds	r22, 0x0208
    1c16:	70 91 09 02 	lds	r23, 0x0209
    1c1a:	00 91 0a 02 	lds	r16, 0x020A
    1c1e:	10 91 0b 02 	lds	r17, 0x020B
    1c22:	20 91 0c 02 	lds	r18, 0x020C
    1c26:	30 91 0d 02 	lds	r19, 0x020D
    1c2a:	ef 2f       	mov	r30, r31
    1c2c:	48 17       	cp	r20, r24
    1c2e:	59 07       	cpc	r21, r25
    1c30:	6a 07       	cpc	r22, r26
    1c32:	7b 07       	cpc	r23, r27
    1c34:	08 f4       	brcc	.+2      	; 0x1c38 <angle_rotate+0x7a>
    1c36:	ec 2f       	mov	r30, r28
    1c38:	ee 23       	and	r30, r30
    1c3a:	49 f4       	brne	.+18     	; 0x1c4e <angle_rotate+0x90>
    1c3c:	4f 2f       	mov	r20, r31
    1c3e:	08 17       	cp	r16, r24
    1c40:	19 07       	cpc	r17, r25
    1c42:	2a 07       	cpc	r18, r26
    1c44:	3b 07       	cpc	r19, r27
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <angle_rotate+0x8c>
    1c48:	4c 2f       	mov	r20, r28
    1c4a:	44 23       	and	r20, r20
    1c4c:	f1 f2       	breq	.-68     	; 0x1c0a <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
    1c4e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
}
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	08 95       	ret

00001c5a <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    1c64:	25 ee       	ldi	r18, 0xE5	; 229
    1c66:	30 ed       	ldi	r19, 0xD0	; 208
    1c68:	4a ea       	ldi	r20, 0xAA	; 170
    1c6a:	50 e4       	ldi	r21, 0x40	; 64
    1c6c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1c70:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fixunssfsi>
    1c74:	46 2f       	mov	r20, r22
    1c76:	57 2f       	mov	r21, r23
    1c78:	68 2f       	mov	r22, r24
    1c7a:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
    1c7c:	10 92 06 02 	sts	0x0206, r1
    1c80:	10 92 07 02 	sts	0x0207, r1
    1c84:	10 92 08 02 	sts	0x0208, r1
    1c88:	10 92 09 02 	sts	0x0209, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1c8c:	80 91 06 02 	lds	r24, 0x0206
    1c90:	90 91 07 02 	lds	r25, 0x0207
    1c94:	a0 91 08 02 	lds	r26, 0x0208
    1c98:	b0 91 09 02 	lds	r27, 0x0209
    1c9c:	48 17       	cp	r20, r24
    1c9e:	59 07       	cpc	r21, r25
    1ca0:	6a 07       	cpc	r22, r26
    1ca2:	7b 07       	cpc	r23, r27
    1ca4:	98 f7       	brcc	.-26     	; 0x1c8c <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
    1ca6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
}
    1caa:	08 95       	ret

00001cac <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	ec 01       	movw	r28, r24
	forward();
    1cb2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <forward>
	linear_distance_mm(DistanceInMM);
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <linear_distance_mm>
}
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <forward_cus>:


void forward_cus()
{
	
	velocity(246,255);
    1cc2:	86 ef       	ldi	r24, 0xF6	; 246
    1cc4:	6f ef       	ldi	r22, 0xFF	; 255
    1cc6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>

	forward_mm(4*10);
    1cca:	88 e2       	ldi	r24, 0x28	; 40
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
    forwarder();
    1cd2:	0e 94 cc 11 	call	0x2398	; 0x2398 <forwarder>

}
    1cd6:	08 95       	ret

00001cd8 <back_mm>:




void back_mm(unsigned int DistanceInMM)
{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	ec 01       	movw	r28, r24
	back();
    1cde:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <back>
	linear_distance_mm(DistanceInMM);
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <linear_distance_mm>
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    1cf4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <left>
	angle_rotate(Degrees);
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <left_rotate>:


void left_rotate()
{
	
	velocity(246,255);
    1d04:	86 ef       	ldi	r24, 0xF6	; 246
    1d06:	6f ef       	ldi	r22, 0xFF	; 255
    1d08:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	forward_mm(75);
    1d0c:	8b e4       	ldi	r24, 0x4B	; 75
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
	
	left_degrees(70);
    1d14:	86 e4       	ldi	r24, 0x46	; 70
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 77 0e 	call	0x1cee	; 0x1cee <left_degrees>

	
	
	Center_white_line = ADC_Conversion(2);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1d22:	80 93 1d 02 	sts	0x021D, r24
	Right_white_line = ADC_Conversion(1);
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1d2c:	80 93 1c 02 	sts	0x021C, r24
	while(Center_white_line < threshold && Right_white_line < threshold ){
    1d30:	20 91 04 02 	lds	r18, 0x0204
    1d34:	30 91 05 02 	lds	r19, 0x0205
    1d38:	40 91 1d 02 	lds	r20, 0x021D
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	42 17       	cp	r20, r18
    1d40:	53 07       	cpc	r21, r19
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <left_rotate+0x92>
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	82 17       	cp	r24, r18
    1d48:	93 07       	cpc	r25, r19
    1d4a:	2c f5       	brge	.+74     	; 0x1d96 <left_rotate+0x92>
		
		
		left();
    1d4c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <left>
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	9f e7       	ldi	r25, 0x7F	; 127
    1d54:	a4 e0       	ldi	r26, 0x04	; 4
    1d56:	81 50       	subi	r24, 0x01	; 1
    1d58:	90 40       	sbci	r25, 0x00	; 0
    1d5a:	a0 40       	sbci	r26, 0x00	; 0
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <left_rotate+0x52>
    1d5e:	00 c0       	rjmp	.+0      	; 0x1d60 <left_rotate+0x5c>
    1d60:	00 00       	nop
		_delay_ms(100);
		stop();
    1d62:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
		Center_white_line = ADC_Conversion(2);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1d6c:	80 93 1d 02 	sts	0x021D, r24
			Right_white_line = ADC_Conversion(1);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1d76:	80 93 1c 02 	sts	0x021C, r24

	
	
	Center_white_line = ADC_Conversion(2);
	Right_white_line = ADC_Conversion(1);
	while(Center_white_line < threshold && Right_white_line < threshold ){
    1d7a:	20 91 04 02 	lds	r18, 0x0204
    1d7e:	30 91 05 02 	lds	r19, 0x0205
    1d82:	40 91 1d 02 	lds	r20, 0x021D
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	42 17       	cp	r20, r18
    1d8a:	53 07       	cpc	r21, r19
    1d8c:	24 f4       	brge	.+8      	; 0x1d96 <left_rotate+0x92>
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	82 17       	cp	r24, r18
    1d92:	93 07       	cpc	r25, r19
    1d94:	dc f2       	brlt	.-74     	; 0x1d4c <left_rotate+0x48>
		stop();
		Center_white_line = ADC_Conversion(2);
			Right_white_line = ADC_Conversion(1);
	}

	velocity(246,255);
    1d96:	86 ef       	ldi	r24, 0xF6	; 246
    1d98:	6f ef       	ldi	r22, 0xFF	; 255
    1d9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	
}
    1d9e:	08 95       	ret

00001da0 <right_degrees>:
}



void right_degrees(unsigned int Degrees)
{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    1da6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <right>
	angle_rotate(Degrees);
    1daa:	ce 01       	movw	r24, r28
    1dac:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <oneighty_rotate>:
//180 degree right rotate
//###############################################################################
void oneighty_rotate()
{
	
	velocity(246,255);
    1db6:	86 ef       	ldi	r24, 0xF6	; 246
    1db8:	6f ef       	ldi	r22, 0xFF	; 255
    1dba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	forward_mm(75);
    1dbe:	8b e4       	ldi	r24, 0x4B	; 75
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
	
	right_degrees(70);
    1dc6:	86 e4       	ldi	r24, 0x46	; 70
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <right_degrees>
	
	Left_white_line = ADC_Conversion(3);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1dd4:	80 93 1e 02 	sts	0x021E, r24
	Center_white_line = ADC_Conversion(2);
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1dde:	80 93 1d 02 	sts	0x021D, r24
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1de2:	20 91 04 02 	lds	r18, 0x0204
    1de6:	30 91 05 02 	lds	r19, 0x0205
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	82 17       	cp	r24, r18
    1dee:	93 07       	cpc	r25, r19
    1df0:	5c f5       	brge	.+86     	; 0x1e48 <oneighty_rotate+0x92>
    1df2:	80 91 1e 02 	lds	r24, 0x021E
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	82 17       	cp	r24, r18
    1dfa:	93 07       	cpc	r25, r19
    1dfc:	2c f5       	brge	.+74     	; 0x1e48 <oneighty_rotate+0x92>
		
		
		right();
    1dfe:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <right>
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	9f e7       	ldi	r25, 0x7F	; 127
    1e06:	a4 e0       	ldi	r26, 0x04	; 4
    1e08:	81 50       	subi	r24, 0x01	; 1
    1e0a:	90 40       	sbci	r25, 0x00	; 0
    1e0c:	a0 40       	sbci	r26, 0x00	; 0
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <oneighty_rotate+0x52>
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <oneighty_rotate+0x5c>
    1e12:	00 00       	nop
		_delay_ms(100);
		stop();
    1e14:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
		Left_white_line = ADC_Conversion(3);
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1e1e:	80 93 1e 02 	sts	0x021E, r24
		Center_white_line = ADC_Conversion(2);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1e28:	80 93 1d 02 	sts	0x021D, r24
	
	right_degrees(70);
	
	Left_white_line = ADC_Conversion(3);
	Center_white_line = ADC_Conversion(2);
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1e2c:	20 91 04 02 	lds	r18, 0x0204
    1e30:	30 91 05 02 	lds	r19, 0x0205
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	82 17       	cp	r24, r18
    1e38:	93 07       	cpc	r25, r19
    1e3a:	34 f4       	brge	.+12     	; 0x1e48 <oneighty_rotate+0x92>
    1e3c:	80 91 1e 02 	lds	r24, 0x021E
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	82 17       	cp	r24, r18
    1e44:	93 07       	cpc	r25, r19
    1e46:	dc f2       	brlt	.-74     	; 0x1dfe <oneighty_rotate+0x48>
		stop();
		Left_white_line = ADC_Conversion(3);
		Center_white_line = ADC_Conversion(2);
	}
	
	right_degrees(70);
    1e48:	86 e4       	ldi	r24, 0x46	; 70
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <right_degrees>
	
	Left_white_line = ADC_Conversion(3);
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1e56:	80 93 1e 02 	sts	0x021E, r24
	Center_white_line = ADC_Conversion(2);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1e60:	80 93 1d 02 	sts	0x021D, r24
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1e64:	20 91 04 02 	lds	r18, 0x0204
    1e68:	30 91 05 02 	lds	r19, 0x0205
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	82 17       	cp	r24, r18
    1e70:	93 07       	cpc	r25, r19
    1e72:	5c f5       	brge	.+86     	; 0x1eca <oneighty_rotate+0x114>
    1e74:	80 91 1e 02 	lds	r24, 0x021E
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	82 17       	cp	r24, r18
    1e7c:	93 07       	cpc	r25, r19
    1e7e:	2c f5       	brge	.+74     	; 0x1eca <oneighty_rotate+0x114>
		
		
		right();
    1e80:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <right>
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	9f e7       	ldi	r25, 0x7F	; 127
    1e88:	a4 e0       	ldi	r26, 0x04	; 4
    1e8a:	81 50       	subi	r24, 0x01	; 1
    1e8c:	90 40       	sbci	r25, 0x00	; 0
    1e8e:	a0 40       	sbci	r26, 0x00	; 0
    1e90:	e1 f7       	brne	.-8      	; 0x1e8a <oneighty_rotate+0xd4>
    1e92:	00 c0       	rjmp	.+0      	; 0x1e94 <oneighty_rotate+0xde>
    1e94:	00 00       	nop
		_delay_ms(100);
		stop();
    1e96:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
		Left_white_line = ADC_Conversion(3);
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1ea0:	80 93 1e 02 	sts	0x021E, r24
		Center_white_line = ADC_Conversion(2);
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1eaa:	80 93 1d 02 	sts	0x021D, r24
	
	right_degrees(70);
	
	Left_white_line = ADC_Conversion(3);
	Center_white_line = ADC_Conversion(2);
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1eae:	20 91 04 02 	lds	r18, 0x0204
    1eb2:	30 91 05 02 	lds	r19, 0x0205
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	82 17       	cp	r24, r18
    1eba:	93 07       	cpc	r25, r19
    1ebc:	34 f4       	brge	.+12     	; 0x1eca <oneighty_rotate+0x114>
    1ebe:	80 91 1e 02 	lds	r24, 0x021E
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	82 17       	cp	r24, r18
    1ec6:	93 07       	cpc	r25, r19
    1ec8:	dc f2       	brlt	.-74     	; 0x1e80 <oneighty_rotate+0xca>
    1eca:	08 95       	ret

00001ecc <right_rotate>:
//right turn
//###############################################################################
void right_rotate()
{
	
	velocity(246,255);
    1ecc:	86 ef       	ldi	r24, 0xF6	; 246
    1ece:	6f ef       	ldi	r22, 0xFF	; 255
    1ed0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	forward_mm(75);
    1ed4:	8b e4       	ldi	r24, 0x4B	; 75
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
	
	right_degrees(70);
    1edc:	86 e4       	ldi	r24, 0x46	; 70
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <right_degrees>
	
	
	Left_white_line = ADC_Conversion(3);
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1eea:	80 93 1e 02 	sts	0x021E, r24
		Center_white_line = ADC_Conversion(2);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1ef4:	80 93 1d 02 	sts	0x021D, r24
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1ef8:	20 91 04 02 	lds	r18, 0x0204
    1efc:	30 91 05 02 	lds	r19, 0x0205
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	82 17       	cp	r24, r18
    1f04:	93 07       	cpc	r25, r19
    1f06:	5c f5       	brge	.+86     	; 0x1f5e <right_rotate+0x92>
    1f08:	80 91 1e 02 	lds	r24, 0x021E
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	82 17       	cp	r24, r18
    1f10:	93 07       	cpc	r25, r19
    1f12:	2c f5       	brge	.+74     	; 0x1f5e <right_rotate+0x92>
		right();
    1f14:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <right>
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f e7       	ldi	r25, 0x7F	; 127
    1f1c:	a4 e0       	ldi	r26, 0x04	; 4
    1f1e:	81 50       	subi	r24, 0x01	; 1
    1f20:	90 40       	sbci	r25, 0x00	; 0
    1f22:	a0 40       	sbci	r26, 0x00	; 0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <right_rotate+0x52>
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <right_rotate+0x5c>
    1f28:	00 00       	nop
		_delay_ms(100);
		stop();
    1f2a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
		Left_white_line = ADC_Conversion(3);
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1f34:	80 93 1e 02 	sts	0x021E, r24
			Center_white_line = ADC_Conversion(2);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1f3e:	80 93 1d 02 	sts	0x021D, r24
	right_degrees(70);
	
	
	Left_white_line = ADC_Conversion(3);
		Center_white_line = ADC_Conversion(2);
	while( Center_white_line < threshold &&  Left_white_line < threshold){
    1f42:	20 91 04 02 	lds	r18, 0x0204
    1f46:	30 91 05 02 	lds	r19, 0x0205
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	82 17       	cp	r24, r18
    1f4e:	93 07       	cpc	r25, r19
    1f50:	34 f4       	brge	.+12     	; 0x1f5e <right_rotate+0x92>
    1f52:	80 91 1e 02 	lds	r24, 0x021E
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	dc f2       	brlt	.-74     	; 0x1f14 <right_rotate+0x48>
    1f5e:	08 95       	ret

00001f60 <soft_left_degrees>:
	angle_rotate(Degrees);
}


void soft_left_degrees(unsigned int Degrees)
{
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    1f66:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    1f80:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    1f84:	ce 01       	movw	r24, r28
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    1f9a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret

00001fae <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    1fb4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    1fb8:	ce 01       	movw	r24, r28
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <angle_rotate>
}
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <dojob>:



void dojob()
{
	Left_white_line = ADC_Conversion(3);
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1fce:	80 93 1e 02 	sts	0x021E, r24
	Center_white_line = ADC_Conversion(2);
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1fd8:	80 93 1d 02 	sts	0x021D, r24
	Right_white_line = ADC_Conversion(1);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    1fe2:	80 93 1c 02 	sts	0x021C, r24
	
			print_sensor(2,2,3);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	43 e0       	ldi	r20, 0x03	; 3
    1fec:	0e 94 28 0c 	call	0x1850	; 0x1850 <print_sensor>
			print_sensor(2,6,2);
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	66 e0       	ldi	r22, 0x06	; 6
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	0e 94 28 0c 	call	0x1850	; 0x1850 <print_sensor>
			print_sensor(2,10,1);
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	6a e0       	ldi	r22, 0x0A	; 10
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 28 0c 	call	0x1850	; 0x1850 <print_sensor>
}
    2004:	08 95       	ret

00002006 <something>:



void something()
{
	DDRB = DDRB | 0x20; //making PORTB 5 pin output
    2006:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    2008:	2d 9a       	sbi	0x05, 5	; 5
	DDRB = DDRB | 0x40; //making PORTB 6 pin output
    200a:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    200c:	2e 9a       	sbi	0x05, 6	; 5
	DDRB = DDRB | 0x80; //making PORTB 7 pin output
    200e:	27 9a       	sbi	0x04, 7	; 4
	PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1	
    2010:	2f 9a       	sbi	0x05, 7	; 5
}
    2012:	08 95       	ret

00002014 <port_init>:



void port_init()

{	something();
    2014:	0e 94 03 10 	call	0x2006	; 0x2006 <something>
	lcd_port_config();
    2018:	0e 94 39 01 	call	0x272	; 0x272 <lcd_port_config>
	motion_pin_config();
    201c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <motion_pin_config>
	buzzer_pin_config();
    2020:	0e 94 75 0c 	call	0x18ea	; 0x18ea <buzzer_pin_config>
	left_encoder_pin_config();
    2024:	0e 94 89 0c 	call	0x1912	; 0x1912 <left_encoder_pin_config>
	right_encoder_pin_config();
    2028:	0e 94 8c 0c 	call	0x1918	; 0x1918 <right_encoder_pin_config>
	interrupt_switch_config();
    202c:	0e 94 8f 0c 	call	0x191e	; 0x191e <interrupt_switch_config>
}
    2030:	08 95       	ret

00002032 <servo_1>:
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
}

void servo_1(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    2032:	68 2f       	mov	r22, r24
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    203e:	2f e6       	ldi	r18, 0x6F	; 111
    2040:	32 e1       	ldi	r19, 0x12	; 18
    2042:	43 e0       	ldi	r20, 0x03	; 3
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulsf3>
    204a:	21 e7       	ldi	r18, 0x71	; 113
    204c:	3d e3       	ldi	r19, 0x3D	; 61
    204e:	4a e0       	ldi	r20, 0x0A	; 10
    2050:	52 e4       	ldi	r21, 0x42	; 66
    2052:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__addsf3>
	OCR1A = (uint16_t) regval;
    2056:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	90 93 89 00 	sts	0x0089, r25
    2062:	80 93 88 00 	sts	0x0088, r24
}
    2066:	08 95       	ret

00002068 <servo_2>:

//Sets servo 2 to the specified angle in degrees
void servo_2(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    2068:	68 2f       	mov	r22, r24
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    2074:	2f e6       	ldi	r18, 0x6F	; 111
    2076:	32 e1       	ldi	r19, 0x12	; 18
    2078:	43 e0       	ldi	r20, 0x03	; 3
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulsf3>
    2080:	21 e7       	ldi	r18, 0x71	; 113
    2082:	3d e3       	ldi	r19, 0x3D	; 61
    2084:	4a e0       	ldi	r20, 0x0A	; 10
    2086:	52 e4       	ldi	r21, 0x42	; 66
    2088:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__addsf3>
	OCR1B = (uint16_t) regval;
    208c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	90 93 8b 00 	sts	0x008B, r25
    2098:	80 93 8a 00 	sts	0x008A, r24
}
    209c:	08 95       	ret

0000209e <servo_3>:

//Sets servo 3 to the specified angle in degrees
void servo_3(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    209e:	68 2f       	mov	r22, r24
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 90 18 	call	0x3120	; 0x3120 <__floatunsisf>
    20aa:	2f e6       	ldi	r18, 0x6F	; 111
    20ac:	32 e1       	ldi	r19, 0x12	; 18
    20ae:	43 e0       	ldi	r20, 0x03	; 3
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulsf3>
    20b6:	21 e7       	ldi	r18, 0x71	; 113
    20b8:	3d e3       	ldi	r19, 0x3D	; 61
    20ba:	4a e0       	ldi	r20, 0x0A	; 10
    20bc:	52 e4       	ldi	r21, 0x42	; 66
    20be:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__addsf3>
	OCR1C = (uint16_t) regval;
    20c2:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	90 93 8d 00 	sts	0x008D, r25
    20ce:	80 93 8c 00 	sts	0x008C, r24
}
    20d2:	08 95       	ret

000020d4 <front_seq>:
//###############################################################################

void front_seq()
{
	
	servo_1(90);
    20d4:	8a e5       	ldi	r24, 0x5A	; 90
    20d6:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	9f ef       	ldi	r25, 0xFF	; 255
    20de:	ac e2       	ldi	r26, 0x2C	; 44
    20e0:	81 50       	subi	r24, 0x01	; 1
    20e2:	90 40       	sbci	r25, 0x00	; 0
    20e4:	a0 40       	sbci	r26, 0x00	; 0
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <front_seq+0xc>
    20e8:	00 c0       	rjmp	.+0      	; 0x20ea <front_seq+0x16>
    20ea:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(0);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
    20f6:	ac e2       	ldi	r26, 0x2C	; 44
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	90 40       	sbci	r25, 0x00	; 0
    20fc:	a0 40       	sbci	r26, 0x00	; 0
    20fe:	e1 f7       	brne	.-8      	; 0x20f8 <front_seq+0x24>
    2100:	00 c0       	rjmp	.+0      	; 0x2102 <front_seq+0x2e>
    2102:	00 00       	nop
	_delay_ms(1000);
	
	
	servo_3(70);
    2104:	86 e4       	ldi	r24, 0x46	; 70
    2106:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	9f ef       	ldi	r25, 0xFF	; 255
    210e:	ac e2       	ldi	r26, 0x2C	; 44
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	90 40       	sbci	r25, 0x00	; 0
    2114:	a0 40       	sbci	r26, 0x00	; 0
    2116:	e1 f7       	brne	.-8      	; 0x2110 <front_seq+0x3c>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <front_seq+0x46>
    211a:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(150);
    211c:	86 e9       	ldi	r24, 0x96	; 150
    211e:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	9f ef       	ldi	r25, 0xFF	; 255
    2126:	ac e2       	ldi	r26, 0x2C	; 44
    2128:	81 50       	subi	r24, 0x01	; 1
    212a:	90 40       	sbci	r25, 0x00	; 0
    212c:	a0 40       	sbci	r26, 0x00	; 0
    212e:	e1 f7       	brne	.-8      	; 0x2128 <front_seq+0x54>
    2130:	00 c0       	rjmp	.+0      	; 0x2132 <front_seq+0x5e>
    2132:	00 00       	nop
	_delay_ms(1000);
	
	servo_1(90);
    2134:	8a e5       	ldi	r24, 0x5A	; 90
    2136:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    213a:	8f ef       	ldi	r24, 0xFF	; 255
    213c:	9f ef       	ldi	r25, 0xFF	; 255
    213e:	ac e2       	ldi	r26, 0x2C	; 44
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	90 40       	sbci	r25, 0x00	; 0
    2144:	a0 40       	sbci	r26, 0x00	; 0
    2146:	e1 f7       	brne	.-8      	; 0x2140 <front_seq+0x6c>
    2148:	00 c0       	rjmp	.+0      	; 0x214a <front_seq+0x76>
    214a:	00 00       	nop
	_delay_ms(1000);
	
}
    214c:	08 95       	ret

0000214e <right_pick_seq>:
//###############################################################################

void right_pick_seq()
{
	
	servo_1(180);
    214e:	84 eb       	ldi	r24, 0xB4	; 180
    2150:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	9f ef       	ldi	r25, 0xFF	; 255
    2158:	ac e2       	ldi	r26, 0x2C	; 44
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	90 40       	sbci	r25, 0x00	; 0
    215e:	a0 40       	sbci	r26, 0x00	; 0
    2160:	e1 f7       	brne	.-8      	; 0x215a <right_pick_seq+0xc>
    2162:	00 c0       	rjmp	.+0      	; 0x2164 <right_pick_seq+0x16>
    2164:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(0);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	ac e2       	ldi	r26, 0x2C	; 44
    2172:	81 50       	subi	r24, 0x01	; 1
    2174:	90 40       	sbci	r25, 0x00	; 0
    2176:	a0 40       	sbci	r26, 0x00	; 0
    2178:	e1 f7       	brne	.-8      	; 0x2172 <right_pick_seq+0x24>
    217a:	00 c0       	rjmp	.+0      	; 0x217c <right_pick_seq+0x2e>
    217c:	00 00       	nop
	_delay_ms(1000);
	
	
	servo_3(70);
    217e:	86 e4       	ldi	r24, 0x46	; 70
    2180:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	9f ef       	ldi	r25, 0xFF	; 255
    2188:	ac e2       	ldi	r26, 0x2C	; 44
    218a:	81 50       	subi	r24, 0x01	; 1
    218c:	90 40       	sbci	r25, 0x00	; 0
    218e:	a0 40       	sbci	r26, 0x00	; 0
    2190:	e1 f7       	brne	.-8      	; 0x218a <right_pick_seq+0x3c>
    2192:	00 c0       	rjmp	.+0      	; 0x2194 <right_pick_seq+0x46>
    2194:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(150);
    2196:	86 e9       	ldi	r24, 0x96	; 150
    2198:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	9f ef       	ldi	r25, 0xFF	; 255
    21a0:	ac e2       	ldi	r26, 0x2C	; 44
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	90 40       	sbci	r25, 0x00	; 0
    21a6:	a0 40       	sbci	r26, 0x00	; 0
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <right_pick_seq+0x54>
    21aa:	00 c0       	rjmp	.+0      	; 0x21ac <right_pick_seq+0x5e>
    21ac:	00 00       	nop
	_delay_ms(1000);
	
	servo_1(90);
    21ae:	8a e5       	ldi	r24, 0x5A	; 90
    21b0:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    21b4:	8f ef       	ldi	r24, 0xFF	; 255
    21b6:	9f ef       	ldi	r25, 0xFF	; 255
    21b8:	ac e2       	ldi	r26, 0x2C	; 44
    21ba:	81 50       	subi	r24, 0x01	; 1
    21bc:	90 40       	sbci	r25, 0x00	; 0
    21be:	a0 40       	sbci	r26, 0x00	; 0
    21c0:	e1 f7       	brne	.-8      	; 0x21ba <right_pick_seq+0x6c>
    21c2:	00 c0       	rjmp	.+0      	; 0x21c4 <right_pick_seq+0x76>
    21c4:	00 00       	nop
	_delay_ms(1000);
	
}
    21c6:	08 95       	ret

000021c8 <slight_right_seq>:
//###############################################################################
//animal corner right  pick sequence
//###############################################################################

void slight_right_seq()
{		velocity(246,255);
    21c8:	86 ef       	ldi	r24, 0xF6	; 246
    21ca:	6f ef       	ldi	r22, 0xFF	; 255
    21cc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		forward_mm(125);
    21d0:	8d e7       	ldi	r24, 0x7D	; 125
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
		right_pick_seq();
    21d8:	0e 94 a7 10 	call	0x214e	; 0x214e <right_pick_seq>
		back_mm(125);
    21dc:	8d e7       	ldi	r24, 0x7D	; 125
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <back_mm>
}
    21e4:	08 95       	ret

000021e6 <right_drop_seq>:
//###############################################################################

void right_drop_seq()
{
	
	servo_1(180);
    21e6:	84 eb       	ldi	r24, 0xB4	; 180
    21e8:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	9f ef       	ldi	r25, 0xFF	; 255
    21f0:	ac e2       	ldi	r26, 0x2C	; 44
    21f2:	81 50       	subi	r24, 0x01	; 1
    21f4:	90 40       	sbci	r25, 0x00	; 0
    21f6:	a0 40       	sbci	r26, 0x00	; 0
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <right_drop_seq+0xc>
    21fa:	00 c0       	rjmp	.+0      	; 0x21fc <right_drop_seq+0x16>
    21fc:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(10);
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    2204:	8f ef       	ldi	r24, 0xFF	; 255
    2206:	9f ef       	ldi	r25, 0xFF	; 255
    2208:	ac e2       	ldi	r26, 0x2C	; 44
    220a:	81 50       	subi	r24, 0x01	; 1
    220c:	90 40       	sbci	r25, 0x00	; 0
    220e:	a0 40       	sbci	r26, 0x00	; 0
    2210:	e1 f7       	brne	.-8      	; 0x220a <__stack+0xb>
    2212:	00 c0       	rjmp	.+0      	; 0x2214 <__stack+0x15>
    2214:	00 00       	nop
	_delay_ms(1000);
	
	
	servo_3(180);
    2216:	84 eb       	ldi	r24, 0xB4	; 180
    2218:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	9f ef       	ldi	r25, 0xFF	; 255
    2220:	ac e2       	ldi	r26, 0x2C	; 44
    2222:	81 50       	subi	r24, 0x01	; 1
    2224:	90 40       	sbci	r25, 0x00	; 0
    2226:	a0 40       	sbci	r26, 0x00	; 0
    2228:	e1 f7       	brne	.-8      	; 0x2222 <__stack+0x23>
    222a:	00 c0       	rjmp	.+0      	; 0x222c <__stack+0x2d>
    222c:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(150);
    222e:	86 e9       	ldi	r24, 0x96	; 150
    2230:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	9f ef       	ldi	r25, 0xFF	; 255
    2238:	ac e2       	ldi	r26, 0x2C	; 44
    223a:	81 50       	subi	r24, 0x01	; 1
    223c:	90 40       	sbci	r25, 0x00	; 0
    223e:	a0 40       	sbci	r26, 0x00	; 0
    2240:	e1 f7       	brne	.-8      	; 0x223a <__stack+0x3b>
    2242:	00 c0       	rjmp	.+0      	; 0x2244 <__stack+0x45>
    2244:	00 00       	nop
	_delay_ms(1000);
	
	servo_1(90);
    2246:	8a e5       	ldi	r24, 0x5A	; 90
    2248:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	9f ef       	ldi	r25, 0xFF	; 255
    2250:	ac e2       	ldi	r26, 0x2C	; 44
    2252:	81 50       	subi	r24, 0x01	; 1
    2254:	90 40       	sbci	r25, 0x00	; 0
    2256:	a0 40       	sbci	r26, 0x00	; 0
    2258:	e1 f7       	brne	.-8      	; 0x2252 <__stack+0x53>
    225a:	00 c0       	rjmp	.+0      	; 0x225c <__stack+0x5d>
    225c:	00 00       	nop
	_delay_ms(1000);
	
}
    225e:	08 95       	ret

00002260 <left_drop_seq>:
//###############################################################################

void left_drop_seq()
{
	
	servo_1(0);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	9f ef       	ldi	r25, 0xFF	; 255
    226a:	ac e2       	ldi	r26, 0x2C	; 44
    226c:	81 50       	subi	r24, 0x01	; 1
    226e:	90 40       	sbci	r25, 0x00	; 0
    2270:	a0 40       	sbci	r26, 0x00	; 0
    2272:	e1 f7       	brne	.-8      	; 0x226c <left_drop_seq+0xc>
    2274:	00 c0       	rjmp	.+0      	; 0x2276 <left_drop_seq+0x16>
    2276:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(10);
    2278:	8a e0       	ldi	r24, 0x0A	; 10
    227a:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    227e:	8f ef       	ldi	r24, 0xFF	; 255
    2280:	9f ef       	ldi	r25, 0xFF	; 255
    2282:	ac e2       	ldi	r26, 0x2C	; 44
    2284:	81 50       	subi	r24, 0x01	; 1
    2286:	90 40       	sbci	r25, 0x00	; 0
    2288:	a0 40       	sbci	r26, 0x00	; 0
    228a:	e1 f7       	brne	.-8      	; 0x2284 <left_drop_seq+0x24>
    228c:	00 c0       	rjmp	.+0      	; 0x228e <left_drop_seq+0x2e>
    228e:	00 00       	nop
	_delay_ms(1000);
	
	
	servo_3(180);
    2290:	84 eb       	ldi	r24, 0xB4	; 180
    2292:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    2296:	8f ef       	ldi	r24, 0xFF	; 255
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	ac e2       	ldi	r26, 0x2C	; 44
    229c:	81 50       	subi	r24, 0x01	; 1
    229e:	90 40       	sbci	r25, 0x00	; 0
    22a0:	a0 40       	sbci	r26, 0x00	; 0
    22a2:	e1 f7       	brne	.-8      	; 0x229c <left_drop_seq+0x3c>
    22a4:	00 c0       	rjmp	.+0      	; 0x22a6 <left_drop_seq+0x46>
    22a6:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(150);
    22a8:	86 e9       	ldi	r24, 0x96	; 150
    22aa:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	9f ef       	ldi	r25, 0xFF	; 255
    22b2:	ac e2       	ldi	r26, 0x2C	; 44
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	90 40       	sbci	r25, 0x00	; 0
    22b8:	a0 40       	sbci	r26, 0x00	; 0
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <left_drop_seq+0x54>
    22bc:	00 c0       	rjmp	.+0      	; 0x22be <left_drop_seq+0x5e>
    22be:	00 00       	nop
	_delay_ms(1000);
	
	servo_1(90);
    22c0:	8a e5       	ldi	r24, 0x5A	; 90
    22c2:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	9f ef       	ldi	r25, 0xFF	; 255
    22ca:	ac e2       	ldi	r26, 0x2C	; 44
    22cc:	81 50       	subi	r24, 0x01	; 1
    22ce:	90 40       	sbci	r25, 0x00	; 0
    22d0:	a0 40       	sbci	r26, 0x00	; 0
    22d2:	e1 f7       	brne	.-8      	; 0x22cc <left_drop_seq+0x6c>
    22d4:	00 c0       	rjmp	.+0      	; 0x22d6 <left_drop_seq+0x76>
    22d6:	00 00       	nop
	_delay_ms(1000);
	
}
    22d8:	08 95       	ret

000022da <left_pick_seq>:
//###############################################################################

void left_pick_seq()
{
	
	servo_1(0);
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    22e0:	8f ef       	ldi	r24, 0xFF	; 255
    22e2:	9f ef       	ldi	r25, 0xFF	; 255
    22e4:	ac e2       	ldi	r26, 0x2C	; 44
    22e6:	81 50       	subi	r24, 0x01	; 1
    22e8:	90 40       	sbci	r25, 0x00	; 0
    22ea:	a0 40       	sbci	r26, 0x00	; 0
    22ec:	e1 f7       	brne	.-8      	; 0x22e6 <left_pick_seq+0xc>
    22ee:	00 c0       	rjmp	.+0      	; 0x22f0 <left_pick_seq+0x16>
    22f0:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(0);
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	9f ef       	ldi	r25, 0xFF	; 255
    22fc:	ac e2       	ldi	r26, 0x2C	; 44
    22fe:	81 50       	subi	r24, 0x01	; 1
    2300:	90 40       	sbci	r25, 0x00	; 0
    2302:	a0 40       	sbci	r26, 0x00	; 0
    2304:	e1 f7       	brne	.-8      	; 0x22fe <left_pick_seq+0x24>
    2306:	00 c0       	rjmp	.+0      	; 0x2308 <left_pick_seq+0x2e>
    2308:	00 00       	nop
	_delay_ms(1000);
	
	
	servo_3(70);
    230a:	86 e4       	ldi	r24, 0x46	; 70
    230c:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    2310:	8f ef       	ldi	r24, 0xFF	; 255
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	ac e2       	ldi	r26, 0x2C	; 44
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	90 40       	sbci	r25, 0x00	; 0
    231a:	a0 40       	sbci	r26, 0x00	; 0
    231c:	e1 f7       	brne	.-8      	; 0x2316 <left_pick_seq+0x3c>
    231e:	00 c0       	rjmp	.+0      	; 0x2320 <left_pick_seq+0x46>
    2320:	00 00       	nop
	_delay_ms(1000);
	
	servo_2(180);
    2322:	84 eb       	ldi	r24, 0xB4	; 180
    2324:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    2328:	8f ef       	ldi	r24, 0xFF	; 255
    232a:	9f ef       	ldi	r25, 0xFF	; 255
    232c:	ac e2       	ldi	r26, 0x2C	; 44
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	90 40       	sbci	r25, 0x00	; 0
    2332:	a0 40       	sbci	r26, 0x00	; 0
    2334:	e1 f7       	brne	.-8      	; 0x232e <left_pick_seq+0x54>
    2336:	00 c0       	rjmp	.+0      	; 0x2338 <left_pick_seq+0x5e>
    2338:	00 00       	nop
	_delay_ms(1000);
	
	servo_1(90);
    233a:	8a e5       	ldi	r24, 0x5A	; 90
    233c:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	ac e2       	ldi	r26, 0x2C	; 44
    2346:	81 50       	subi	r24, 0x01	; 1
    2348:	90 40       	sbci	r25, 0x00	; 0
    234a:	a0 40       	sbci	r26, 0x00	; 0
    234c:	e1 f7       	brne	.-8      	; 0x2346 <left_pick_seq+0x6c>
    234e:	00 c0       	rjmp	.+0      	; 0x2350 <left_pick_seq+0x76>
    2350:	00 00       	nop
	_delay_ms(1000);
	
}
    2352:	08 95       	ret

00002354 <slight_down_left_seq>:

void slight_down_left_seq()
{
	

	back_mm(125);
    2354:	8d e7       	ldi	r24, 0x7D	; 125
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <back_mm>
	left_pick_seq();
    235c:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
	forward_mm(125);
    2360:	8d e7       	ldi	r24, 0x7D	; 125
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
	
	
}
    2368:	08 95       	ret

0000236a <slight_left_seq>:
//animal corner left pick sequence
//###############################################################################

void slight_left_seq()
{
	velocity(246,255);
    236a:	86 ef       	ldi	r24, 0xF6	; 246
    236c:	6f ef       	ldi	r22, 0xFF	; 255
    236e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	forward_mm(125);
    2372:	8d e7       	ldi	r24, 0x7D	; 125
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	0e 94 56 0e 	call	0x1cac	; 0x1cac <forward_mm>
	left_pick_seq();
    237a:	0e 94 6d 11 	call	0x22da	; 0x22da <left_pick_seq>
	back_mm(125);	
    237e:	8d e7       	ldi	r24, 0x7D	; 125
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <back_mm>
	
	
}
    2386:	08 95       	ret

00002388 <buzzer_on>:
}

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2388:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    238a:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    238c:	88 b9       	out	0x08, r24	; 8
}
    238e:	08 95       	ret

00002390 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2390:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    2392:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    2394:	88 b9       	out	0x08, r24	; 8
}
    2396:	08 95       	ret

00002398 <forwarder>:
void forwarder()
{
	
	while(1)
	{
		Left_white_line= ADC_Conversion(3);
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    239e:	80 93 1e 02 	sts	0x021E, r24
		Center_white_line = ADC_Conversion(2);
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    23a8:	80 93 1d 02 	sts	0x021D, r24
		Right_white_line = ADC_Conversion(1);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0e 94 0d 0c 	call	0x181a	; 0x181a <ADC_Conversion>
    23b2:	80 93 1c 02 	sts	0x021C, r24
		

		
		
		forward();
    23b6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <forward>
		
		if(Left_white_line <= threshold && Center_white_line <= threshold && Right_white_line >= threshold)
    23ba:	80 91 04 02 	lds	r24, 0x0204
    23be:	90 91 05 02 	lds	r25, 0x0205
    23c2:	20 91 1e 02 	lds	r18, 0x021E
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	82 17       	cp	r24, r18
    23ca:	93 07       	cpc	r25, r19
    23cc:	0c f4       	brge	.+2      	; 0x23d0 <forwarder+0x38>
    23ce:	b4 c0       	rjmp	.+360    	; 0x2538 <forwarder+0x1a0>
    23d0:	20 91 1d 02 	lds	r18, 0x021D
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	82 17       	cp	r24, r18
    23d8:	93 07       	cpc	r25, r19
    23da:	ac f0       	brlt	.+42     	; 0x2406 <forwarder+0x6e>
    23dc:	20 91 1c 02 	lds	r18, 0x021C
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	28 17       	cp	r18, r24
    23e4:	39 07       	cpc	r19, r25
    23e6:	7c f0       	brlt	.+30     	; 0x2406 <forwarder+0x6e>
		
		{
			velocity(250,200);
    23e8:	8a ef       	ldi	r24, 0xFA	; 250
    23ea:	68 ec       	ldi	r22, 0xC8	; 200
    23ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line >= threshold)
    23f0:	80 91 04 02 	lds	r24, 0x0204
    23f4:	90 91 05 02 	lds	r25, 0x0205
    23f8:	20 91 1e 02 	lds	r18, 0x021E
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	82 17       	cp	r24, r18
    2400:	93 07       	cpc	r25, r19
    2402:	0c f4       	brge	.+2      	; 0x2406 <forwarder+0x6e>
    2404:	99 c0       	rjmp	.+306    	; 0x2538 <forwarder+0x1a0>
    2406:	20 91 1d 02 	lds	r18, 0x021D
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	0c f4       	brge	.+2      	; 0x2414 <forwarder+0x7c>
    2412:	8d c0       	rjmp	.+282    	; 0x252e <forwarder+0x196>
    2414:	20 91 1c 02 	lds	r18, 0x021C
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	28 17       	cp	r18, r24
    241c:	39 07       	cpc	r19, r25
    241e:	0c f4       	brge	.+2      	; 0x2422 <forwarder+0x8a>
    2420:	86 c0       	rjmp	.+268    	; 0x252e <forwarder+0x196>
		
		{
			velocity(250,220);
    2422:	8a ef       	ldi	r24, 0xFA	; 250
    2424:	6c ed       	ldi	r22, 0xDC	; 220
    2426:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    242a:	80 91 04 02 	lds	r24, 0x0204
    242e:	90 91 05 02 	lds	r25, 0x0205
    2432:	20 91 1e 02 	lds	r18, 0x021E
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	82 17       	cp	r24, r18
    243a:	93 07       	cpc	r25, r19
    243c:	0c f4       	brge	.+2      	; 0x2440 <forwarder+0xa8>
    243e:	7c c0       	rjmp	.+248    	; 0x2538 <forwarder+0x1a0>
    2440:	20 91 1d 02 	lds	r18, 0x021D
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	28 17       	cp	r18, r24
    2448:	39 07       	cpc	r19, r25
    244a:	54 f0       	brlt	.+20     	; 0x2460 <forwarder+0xc8>
    244c:	20 91 1c 02 	lds	r18, 0x021C
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	82 17       	cp	r24, r18
    2454:	93 07       	cpc	r25, r19
    2456:	24 f0       	brlt	.+8      	; 0x2460 <forwarder+0xc8>
		
		{
			velocity(246,255);
    2458:	86 ef       	ldi	r24, 0xF6	; 246
    245a:	6f ef       	ldi	r22, 0xFF	; 255
    245c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		
		if(Left_white_line >= threshold && Center_white_line <=threshold && Right_white_line <= threshold)
    2460:	80 91 04 02 	lds	r24, 0x0204
    2464:	90 91 05 02 	lds	r25, 0x0205
    2468:	20 91 1e 02 	lds	r18, 0x021E
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	0c f4       	brge	.+2      	; 0x2476 <forwarder+0xde>
    2474:	91 cf       	rjmp	.-222    	; 0x2398 <forwarder>
    2476:	20 91 1d 02 	lds	r18, 0x021D
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	82 17       	cp	r24, r18
    247e:	93 07       	cpc	r25, r19
    2480:	0c f4       	brge	.+2      	; 0x2484 <forwarder+0xec>
    2482:	5f c0       	rjmp	.+190    	; 0x2542 <forwarder+0x1aa>
    2484:	20 91 1c 02 	lds	r18, 0x021C
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	82 17       	cp	r24, r18
    248c:	93 07       	cpc	r25, r19
    248e:	0c f4       	brge	.+2      	; 0x2492 <forwarder+0xfa>
    2490:	58 c0       	rjmp	.+176    	; 0x2542 <forwarder+0x1aa>
		
		{
			velocity(200,250);
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	6a ef       	ldi	r22, 0xFA	; 250
    2496:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    249a:	80 91 04 02 	lds	r24, 0x0204
    249e:	90 91 05 02 	lds	r25, 0x0205
    24a2:	20 91 1e 02 	lds	r18, 0x021E
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	0c f4       	brge	.+2      	; 0x24b0 <forwarder+0x118>
    24ae:	74 cf       	rjmp	.-280    	; 0x2398 <forwarder>
    24b0:	20 91 1d 02 	lds	r18, 0x021D
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	28 17       	cp	r18, r24
    24b8:	39 07       	cpc	r19, r25
    24ba:	0c f4       	brge	.+2      	; 0x24be <forwarder+0x126>
    24bc:	47 c0       	rjmp	.+142    	; 0x254c <forwarder+0x1b4>
    24be:	20 91 1c 02 	lds	r18, 0x021C
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	82 17       	cp	r24, r18
    24c6:	93 07       	cpc	r25, r19
    24c8:	0c f4       	brge	.+2      	; 0x24cc <forwarder+0x134>
    24ca:	40 c0       	rjmp	.+128    	; 0x254c <forwarder+0x1b4>
		
		{
			velocity(220,250);
    24cc:	8c ed       	ldi	r24, 0xDC	; 220
    24ce:	6a ef       	ldi	r22, 0xFA	; 250
    24d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line >= threshold)
    24d4:	80 91 04 02 	lds	r24, 0x0204
    24d8:	90 91 05 02 	lds	r25, 0x0205
    24dc:	20 91 1e 02 	lds	r18, 0x021E
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	28 17       	cp	r18, r24
    24e4:	39 07       	cpc	r19, r25
    24e6:	0c f4       	brge	.+2      	; 0x24ea <forwarder+0x152>
    24e8:	57 cf       	rjmp	.-338    	; 0x2398 <forwarder>
    24ea:	20 91 1d 02 	lds	r18, 0x021D
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	28 17       	cp	r18, r24
    24f2:	39 07       	cpc	r19, r25
    24f4:	0c f4       	brge	.+2      	; 0x24f8 <forwarder+0x160>
    24f6:	50 cf       	rjmp	.-352    	; 0x2398 <forwarder>
    24f8:	20 91 1c 02 	lds	r18, 0x021C
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	28 17       	cp	r18, r24
    2500:	39 07       	cpc	r19, r25
    2502:	0c f4       	brge	.+2      	; 0x2506 <forwarder+0x16e>
    2504:	49 cf       	rjmp	.-366    	; 0x2398 <forwarder>
		
		{
			velocity(0,0);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
			buzzer_on();
    250e:	0e 94 c4 11 	call	0x2388	; 0x2388 <buzzer_on>
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	9f e7       	ldi	r25, 0x7F	; 127
    2516:	a4 e0       	ldi	r26, 0x04	; 4
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	90 40       	sbci	r25, 0x00	; 0
    251c:	a0 40       	sbci	r26, 0x00	; 0
    251e:	e1 f7       	brne	.-8      	; 0x2518 <forwarder+0x180>
    2520:	00 c0       	rjmp	.+0      	; 0x2522 <forwarder+0x18a>
    2522:	00 00       	nop
			_delay_ms(100);
			buzzer_off();
    2524:	0e 94 c8 11 	call	0x2390	; 0x2390 <buzzer_off>
			stop();
    2528:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
	}
	
	
	
	
}
    252c:	08 95       	ret
		{
			velocity(250,220);
		}
		
		
		if(Left_white_line <= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    252e:	80 91 04 02 	lds	r24, 0x0204
    2532:	90 91 05 02 	lds	r25, 0x0205
    2536:	84 cf       	rjmp	.-248    	; 0x2440 <forwarder+0xa8>
			velocity(246,255);
		}
		
		
		
		if(Left_white_line >= threshold && Center_white_line <=threshold && Right_white_line <= threshold)
    2538:	80 91 04 02 	lds	r24, 0x0204
    253c:	90 91 05 02 	lds	r25, 0x0205
    2540:	9a cf       	rjmp	.-204    	; 0x2476 <forwarder+0xde>
		{
			velocity(200,250);
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line <= threshold)
    2542:	80 91 04 02 	lds	r24, 0x0204
    2546:	90 91 05 02 	lds	r25, 0x0205
    254a:	b2 cf       	rjmp	.-156    	; 0x24b0 <forwarder+0x118>
		{
			velocity(220,250);
		}
		
		
		if(Left_white_line >= threshold && Center_white_line >=threshold && Right_white_line >= threshold)
    254c:	80 91 04 02 	lds	r24, 0x0204
    2550:	90 91 05 02 	lds	r25, 0x0205
    2554:	ca cf       	rjmp	.-108    	; 0x24ea <forwarder+0x152>

00002556 <__vector_51>:
	UCSR2B = 0x98;
}


SIGNAL(SIG_USART2_RECV) 		
{
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	0b b6       	in	r0, 0x3b	; 59
    2560:	0f 92       	push	r0
    2562:	11 24       	eor	r1, r1
    2564:	2f 92       	push	r2
    2566:	3f 92       	push	r3
    2568:	4f 92       	push	r4
    256a:	5f 92       	push	r5
    256c:	6f 92       	push	r6
    256e:	7f 92       	push	r7
    2570:	8f 92       	push	r8
    2572:	9f 92       	push	r9
    2574:	af 92       	push	r10
    2576:	bf 92       	push	r11
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	62 97       	sbiw	r28, 0x12	; 18
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	cd bf       	out	0x3d, r28	; 61
		
		  
		
		
		
 }		
    25aa:	6d b6       	in	r6, 0x3d	; 61
    25ac:	7e b6       	in	r7, 0x3e	; 62
}


SIGNAL(SIG_USART2_RECV) 		
{
	datain = UDR2; 				
    25ae:	20 91 d6 00 	lds	r18, 0x00D6
    25b2:	82 2f       	mov	r24, r18
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e0       	ldi	r26, 0x00	; 0
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	80 93 85 02 	sts	0x0285, r24
    25be:	90 93 86 02 	sts	0x0286, r25
    25c2:	a0 93 87 02 	sts	0x0287, r26
    25c6:	b0 93 88 02 	sts	0x0288, r27
	if(datain != '#' )
    25ca:	83 32       	cpi	r24, 0x23	; 35
    25cc:	91 05       	cpc	r25, r1
    25ce:	a1 05       	cpc	r26, r1
    25d0:	b1 05       	cpc	r27, r1
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <__vector_51+0x80>
    25d4:	43 c0       	rjmp	.+134    	; 0x265c <__vector_51+0x106>
	
	{
		sentdata[k] = datain;
    25d6:	80 91 18 02 	lds	r24, 0x0218
    25da:	90 91 19 02 	lds	r25, 0x0219
    25de:	fc 01       	movw	r30, r24
    25e0:	e0 5e       	subi	r30, 0xE0	; 224
    25e2:	fd 4f       	sbci	r31, 0xFD	; 253
    25e4:	20 83       	st	Z, r18
//###############################################################################
//LCD printing logic
//###############################################################################

		
	if( sentdata[k] == '\n') { i = 2; j=1; k++;}
    25e6:	2a 30       	cpi	r18, 0x0A	; 10
    25e8:	89 f4       	brne	.+34     	; 0x260c <__vector_51+0xb6>
    25ea:	22 e0       	ldi	r18, 0x02	; 2
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	30 93 03 02 	sts	0x0203, r19
    25f2:	20 93 02 02 	sts	0x0202, r18
    25f6:	21 e0       	ldi	r18, 0x01	; 1
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	30 93 01 02 	sts	0x0201, r19
    25fe:	20 93 00 02 	sts	0x0200, r18
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	90 93 19 02 	sts	0x0219, r25
    2608:	80 93 18 02 	sts	0x0218, r24
	lcd_cursor(i,j);
    260c:	80 91 02 02 	lds	r24, 0x0202
    2610:	60 91 00 02 	lds	r22, 0x0200
    2614:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
if(sentdata[k] != '\n' && sentdata[k] != '\0')  { lcd_wr_char(sentdata[k]);
    2618:	e0 91 18 02 	lds	r30, 0x0218
    261c:	f0 91 19 02 	lds	r31, 0x0219
    2620:	e0 5e       	subi	r30, 0xE0	; 224
    2622:	fd 4f       	sbci	r31, 0xFD	; 253
    2624:	80 81       	ld	r24, Z
    2626:	8a 30       	cpi	r24, 0x0A	; 10
    2628:	09 f4       	brne	.+2      	; 0x262c <__vector_51+0xd6>
    262a:	1d c4       	rjmp	.+2106   	; 0x2e66 <__vector_51+0x910>
    262c:	88 23       	and	r24, r24
    262e:	09 f4       	brne	.+2      	; 0x2632 <__vector_51+0xdc>
    2630:	1a c4       	rjmp	.+2100   	; 0x2e66 <__vector_51+0x910>
    2632:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	
	k++; j++;}
    2636:	80 91 18 02 	lds	r24, 0x0218
    263a:	90 91 19 02 	lds	r25, 0x0219
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	90 93 19 02 	sts	0x0219, r25
    2644:	80 93 18 02 	sts	0x0218, r24
    2648:	80 91 00 02 	lds	r24, 0x0200
    264c:	90 91 01 02 	lds	r25, 0x0201
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	90 93 01 02 	sts	0x0201, r25
    2656:	80 93 00 02 	sts	0x0200, r24
    265a:	05 c4       	rjmp	.+2058   	; 0x2e66 <__vector_51+0x910>
	  }	
	  		
	else
	     {
			
			sentdata[k] = '#'; sentdata[k+1]='\0'; lcd_wr_command(0x0C);
    265c:	e0 91 18 02 	lds	r30, 0x0218
    2660:	f0 91 19 02 	lds	r31, 0x0219
    2664:	e0 5e       	subi	r30, 0xE0	; 224
    2666:	fd 4f       	sbci	r31, 0xFD	; 253
    2668:	83 e2       	ldi	r24, 0x23	; 35
    266a:	80 83       	st	Z, r24
    266c:	11 82       	std	Z+1, r1	; 0x01
    266e:	8c e0       	ldi	r24, 0x0C	; 12
    2670:	0e 94 83 01 	call	0x306	; 0x306 <lcd_wr_command>
		
//###############################################################################
//Extracting the logic data
//###############################################################################	
		 
			i=0;
    2674:	10 92 03 02 	sts	0x0203, r1
    2678:	10 92 02 02 	sts	0x0202, r1
		  j=0; 
		  for(k=0; sentdata[k] != '#'; k++)   
    267c:	40 91 20 02 	lds	r20, 0x0220
    2680:	43 32       	cpi	r20, 0x23	; 35
    2682:	41 f1       	breq	.+80     	; 0x26d4 <__vector_51+0x17e>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a1 e2       	ldi	r26, 0x21	; 33
    268a:	b2 e0       	ldi	r27, 0x02	; 2
    268c:	e0 e0       	ldi	r30, 0x00	; 0
    268e:	f0 e0       	ldi	r31, 0x00	; 0
		  {
		  if(j==16) { }
			  if (sentdata[k] == '\n') {    sentdataa[i++] = sentdata[k]   ;  j=1; }
			  if(    sentdata[k] != '\0' && sentdata[k] != '\n' ) {    sentdataa[i++] =    sentdata[k];         
    2690:	25 e6       	ldi	r18, 0x65	; 101
    2692:	32 e0       	ldi	r19, 0x02	; 2
    2694:	00 e2       	ldi	r16, 0x20	; 32
    2696:	12 e0       	ldi	r17, 0x02	; 2
			i=0;
		  j=0; 
		  for(k=0; sentdata[k] != '#'; k++)   
		  {
		  if(j==16) { }
			  if (sentdata[k] == '\n') {    sentdataa[i++] = sentdata[k]   ;  j=1; }
    2698:	6a e0       	ldi	r22, 0x0A	; 10
    269a:	4a 30       	cpi	r20, 0x0A	; 10
    269c:	31 f4       	brne	.+12     	; 0x26aa <__vector_51+0x154>
    269e:	f9 01       	movw	r30, r18
    26a0:	e8 0f       	add	r30, r24
    26a2:	f9 1f       	adc	r31, r25
    26a4:	60 83       	st	Z, r22
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	0b c0       	rjmp	.+22     	; 0x26c0 <__vector_51+0x16a>
			  if(    sentdata[k] != '\0' && sentdata[k] != '\n' ) {    sentdataa[i++] =    sentdata[k];         
    26aa:	44 23       	and	r20, r20
    26ac:	49 f0       	breq	.+18     	; 0x26c0 <__vector_51+0x16a>
    26ae:	a9 01       	movw	r20, r18
    26b0:	48 0f       	add	r20, r24
    26b2:	59 1f       	adc	r21, r25
    26b4:	e0 0f       	add	r30, r16
    26b6:	f1 1f       	adc	r31, r17
    26b8:	70 81       	ld	r23, Z
    26ba:	fa 01       	movw	r30, r20
    26bc:	70 83       	st	Z, r23
    26be:	01 96       	adiw	r24, 0x01	; 1
	UBRR2H = 0x00; //set baud rate hi
	UCSR2B = 0x98;
}


SIGNAL(SIG_USART2_RECV) 		
    26c0:	fd 01       	movw	r30, r26
    26c2:	e0 52       	subi	r30, 0x20	; 32
    26c4:	f2 40       	sbci	r31, 0x02	; 2
//Extracting the logic data
//###############################################################################	
		 
			i=0;
		  j=0; 
		  for(k=0; sentdata[k] != '#'; k++)   
    26c6:	4d 91       	ld	r20, X+
    26c8:	43 32       	cpi	r20, 0x23	; 35
    26ca:	39 f7       	brne	.-50     	; 0x269a <__vector_51+0x144>
    26cc:	90 93 03 02 	sts	0x0203, r25
    26d0:	80 93 02 02 	sts	0x0202, r24
			  if (sentdata[k] == '\n') {    sentdataa[i++] = sentdata[k]   ;  j=1; }
			  if(    sentdata[k] != '\0' && sentdata[k] != '\n' ) {    sentdataa[i++] =    sentdata[k];         
		 j++; }
	       }
		
		sentdataa[i] ='\0';
    26d4:	e0 91 02 02 	lds	r30, 0x0202
    26d8:	f0 91 03 02 	lds	r31, 0x0203
    26dc:	eb 59       	subi	r30, 0x9B	; 155
    26de:	fd 4f       	sbci	r31, 0xFD	; 253
    26e0:	10 82       	st	Z, r1
		
		k=99;
    26e2:	83 e6       	ldi	r24, 0x63	; 99
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	90 93 19 02 	sts	0x0219, r25
    26ea:	80 93 18 02 	sts	0x0218, r24
		



          i=1 ;  
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	90 93 03 02 	sts	0x0203, r25
    26f6:	80 93 02 02 	sts	0x0202, r24
          j = 1; 
    26fa:	90 93 01 02 	sts	0x0201, r25
    26fe:	80 93 00 02 	sts	0x0200, r24
		  ii=0;
    2702:	10 92 17 02 	sts	0x0217, r1
    2706:	10 92 16 02 	sts	0x0216, r1
		  kk =0;
    270a:	10 92 15 02 	sts	0x0215, r1
    270e:	10 92 14 02 	sts	0x0214, r1
	      tem = 0;
    2712:	10 92 13 02 	sts	0x0213, r1
    2716:	10 92 12 02 	sts	0x0212, r1
		  n =0;
    271a:	10 92 11 02 	sts	0x0211, r1
    271e:	10 92 10 02 	sts	0x0210, r1
		if(   k==99   ) 
	{   
		
		
		
		while(  (PINE & 0x80) == 0x80      ) {}
    2722:	67 99       	sbic	0x0c, 7	; 12
    2724:	fe cf       	rjmp	.-4      	; 0x2722 <__vector_51+0x1cc>
	
	
	
	
		
		init_devices();
    2726:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <init_devices>
		lcd_set_4bit();
    272a:	0e 94 40 01 	call	0x280	; 0x280 <lcd_set_4bit>
		lcd_init();
    272e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_init>
		velocity(246,255); 
    2732:	86 ef       	ldi	r24, 0xF6	; 246
    2734:	6f ef       	ldi	r22, 0xFF	; 255
    2736:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>

//###############################################################################
//Extraction of numeric value which is number of associations
//###############################################################################		
		n=0; kk=0;
    273a:	10 92 11 02 	sts	0x0211, r1
    273e:	10 92 10 02 	sts	0x0210, r1
		while( sentdataa[kk] != '\n')
    2742:	20 91 65 02 	lds	r18, 0x0265
    2746:	2a 30       	cpi	r18, 0x0A	; 10
    2748:	71 f0       	breq	.+28     	; 0x2766 <__vector_51+0x210>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	e6 e6       	ldi	r30, 0x66	; 102
    2750:	f2 e0       	ldi	r31, 0x02	; 2
		{
			  if(sentdataa[kk] == ',')
    2752:	2c 32       	cpi	r18, 0x2C	; 44
    2754:	09 f4       	brne	.+2      	; 0x2758 <__vector_51+0x202>
		             { n++;    
    2756:	01 96       	adiw	r24, 0x01	; 1

//###############################################################################
//Extraction of numeric value which is number of associations
//###############################################################################		
		n=0; kk=0;
		while( sentdataa[kk] != '\n')
    2758:	21 91       	ld	r18, Z+
    275a:	2a 30       	cpi	r18, 0x0A	; 10
    275c:	d1 f7       	brne	.-12     	; 0x2752 <__vector_51+0x1fc>
    275e:	90 93 11 02 	sts	0x0211, r25
    2762:	80 93 10 02 	sts	0x0210, r24
			kk++;

		}
		

		n++;
    2766:	80 91 10 02 	lds	r24, 0x0210
    276a:	90 91 11 02 	lds	r25, 0x0211
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	90 93 11 02 	sts	0x0211, r25
    2774:	80 93 10 02 	sts	0x0210, r24
		kk=0;
    2778:	10 92 15 02 	sts	0x0215, r1
    277c:	10 92 14 02 	sts	0x0214, r1
    2780:	fd b7       	in	r31, 0x3d	; 61
    2782:	f9 8b       	std	Y+17, r31	; 0x11
    2784:	2e b7       	in	r18, 0x3e	; 62
    2786:	2a 8b       	std	Y+18, r18	; 0x12



		int habis[n];
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	4d b7       	in	r20, 0x3d	; 61
    278e:	5e b7       	in	r21, 0x3e	; 62
    2790:	48 1b       	sub	r20, r24
    2792:	59 0b       	sbc	r21, r25
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	5e bf       	out	0x3e, r21	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	4d bf       	out	0x3d, r20	; 61
    279e:	4d b6       	in	r4, 0x3d	; 61
    27a0:	5e b6       	in	r5, 0x3e	; 62
    27a2:	08 94       	sec
    27a4:	41 1c       	adc	r4, r1
    27a6:	51 1c       	adc	r5, r1
    27a8:	62 01       	movw	r12, r4
		char animals[2*n] ;
    27aa:	ad b7       	in	r26, 0x3d	; 61
    27ac:	be b7       	in	r27, 0x3e	; 62
    27ae:	a8 1b       	sub	r26, r24
    27b0:	b9 0b       	sbc	r27, r25
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	be bf       	out	0x3e, r27	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	ad bf       	out	0x3d, r26	; 61
    27bc:	2d b6       	in	r2, 0x3d	; 61
    27be:	3e b6       	in	r3, 0x3e	; 62
    27c0:	08 94       	sec
    27c2:	21 1c       	adc	r2, r1
    27c4:	31 1c       	adc	r3, r1
    27c6:	51 01       	movw	r10, r2
//###############################################################################

		
		
		
		while(sentdataa[ii] != '\n')
    27c8:	40 91 16 02 	lds	r20, 0x0216
    27cc:	50 91 17 02 	lds	r21, 0x0217
    27d0:	fa 01       	movw	r30, r20
    27d2:	eb 59       	subi	r30, 0x9B	; 155
    27d4:	fd 4f       	sbci	r31, 0xFD	; 253
    27d6:	20 81       	ld	r18, Z
    27d8:	2a 30       	cpi	r18, 0x0A	; 10
    27da:	09 f4       	brne	.+2      	; 0x27de <__vector_51+0x288>
    27dc:	51 c0       	rjmp	.+162    	; 0x2880 <__vector_51+0x32a>
    27de:	ee 24       	eor	r14, r14
    27e0:	ff 24       	eor	r15, r15
    27e2:	30 91 12 02 	lds	r19, 0x0212
    27e6:	a0 91 13 02 	lds	r26, 0x0213
    27ea:	ba 01       	movw	r22, r20
			{
				if(isdigit(sentdataa[ii]))
				{

					tem =  sentdataa[ii] - '0' ;
					if( isdigit(sentdataa[ii+1]) && sentdataa[ii+1] != '\n')
    27ec:	05 e6       	ldi	r16, 0x65	; 101
    27ee:	12 e0       	ldi	r17, 0x02	; 2
					{ tem  = 10*tem +  sentdataa[ii+1] - '0';  ii++;
					}

					habis[kk++] = tem; tem = 0;
    27f0:	88 24       	eor	r8, r8
    27f2:	99 24       	eor	r9, r9
    27f4:	01 c0       	rjmp	.+2      	; 0x27f8 <__vector_51+0x2a2>
//###############################################################################

		
		
		
		while(sentdataa[ii] != '\n')
    27f6:	ba 01       	movw	r22, r20
		{
			if( sentdataa[ii] != ',')
    27f8:	2c 32       	cpi	r18, 0x2C	; 44
    27fa:	91 f1       	breq	.+100    	; 0x2860 <__vector_51+0x30a>
			{
				if(isdigit(sentdataa[ii]))
    27fc:	82 2f       	mov	r24, r18
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	c0 97       	sbiw	r24, 0x30	; 48
    2802:	8a 30       	cpi	r24, 0x0A	; 10
    2804:	91 05       	cpc	r25, r1
    2806:	60 f5       	brcc	.+88     	; 0x2860 <__vector_51+0x30a>
				{

					tem =  sentdataa[ii] - '0' ;
    2808:	82 2f       	mov	r24, r18
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	dc 01       	movw	r26, r24
    280e:	d0 97       	sbiw	r26, 0x30	; 48
					if( isdigit(sentdataa[ii+1]) && sentdataa[ii+1] != '\n')
    2810:	6f 5f       	subi	r22, 0xFF	; 255
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	f8 01       	movw	r30, r16
    2816:	e6 0f       	add	r30, r22
    2818:	f7 1f       	adc	r31, r23
    281a:	20 81       	ld	r18, Z
    281c:	82 2f       	mov	r24, r18
    281e:	80 53       	subi	r24, 0x30	; 48
    2820:	8a 30       	cpi	r24, 0x0A	; 10
    2822:	88 f4       	brcc	.+34     	; 0x2846 <__vector_51+0x2f0>
					{ tem  = 10*tem +  sentdataa[ii+1] - '0';  ii++;
    2824:	ad 01       	movw	r20, r26
    2826:	44 0f       	add	r20, r20
    2828:	55 1f       	adc	r21, r21
    282a:	cd 01       	movw	r24, r26
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	84 0f       	add	r24, r20
    283a:	95 1f       	adc	r25, r21
    283c:	82 0f       	add	r24, r18
    283e:	91 1d       	adc	r25, r1
    2840:	dc 01       	movw	r26, r24
    2842:	d0 97       	sbiw	r26, 0x30	; 48
    2844:	ab 01       	movw	r20, r22
					}

					habis[kk++] = tem; tem = 0;
    2846:	c7 01       	movw	r24, r14
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	8c 0d       	add	r24, r12
    284e:	9d 1d       	adc	r25, r13
    2850:	fc 01       	movw	r30, r24
    2852:	b1 83       	std	Z+1, r27	; 0x01
    2854:	a0 83       	st	Z, r26
    2856:	08 94       	sec
    2858:	e1 1c       	adc	r14, r1
    285a:	f1 1c       	adc	r15, r1
    285c:	38 2d       	mov	r19, r8
    285e:	a9 2d       	mov	r26, r9
				}
			}

			ii++;
    2860:	4f 5f       	subi	r20, 0xFF	; 255
    2862:	5f 4f       	sbci	r21, 0xFF	; 255
//###############################################################################

		
		
		
		while(sentdataa[ii] != '\n')
    2864:	f8 01       	movw	r30, r16
    2866:	e4 0f       	add	r30, r20
    2868:	f5 1f       	adc	r31, r21
    286a:	20 81       	ld	r18, Z
    286c:	2a 30       	cpi	r18, 0x0A	; 10
    286e:	19 f6       	brne	.-122    	; 0x27f6 <__vector_51+0x2a0>
    2870:	30 93 12 02 	sts	0x0212, r19
    2874:	a0 93 13 02 	sts	0x0213, r26
    2878:	50 93 17 02 	sts	0x0217, r21
    287c:	40 93 16 02 	sts	0x0216, r20

//###############################################################################
//Extraction of   animals
//###############################################################################
	
	kk=0;
    2880:	10 92 15 02 	sts	0x0215, r1
    2884:	10 92 14 02 	sts	0x0214, r1
	for(ii; sentdataa[ii] != '\0' ; ii++)
    2888:	80 91 16 02 	lds	r24, 0x0216
    288c:	90 91 17 02 	lds	r25, 0x0217
    2890:	fc 01       	movw	r30, r24
    2892:	eb 59       	subi	r30, 0x9B	; 155
    2894:	fd 4f       	sbci	r31, 0xFD	; 253
    2896:	00 81       	ld	r16, Z
    2898:	00 23       	and	r16, r16
    289a:	31 f1       	breq	.+76     	; 0x28e8 <__vector_51+0x392>
	UBRR2H = 0x00; //set baud rate hi
	UCSR2B = 0x98;
}


SIGNAL(SIG_USART2_RECV) 		
    289c:	0f 2e       	mov	r0, r31
    289e:	f6 e6       	ldi	r31, 0x66	; 102
    28a0:	cf 2e       	mov	r12, r31
    28a2:	f2 e0       	ldi	r31, 0x02	; 2
    28a4:	df 2e       	mov	r13, r31
    28a6:	f0 2d       	mov	r31, r0
    28a8:	c8 0e       	add	r12, r24
    28aa:	d9 1e       	adc	r13, r25
    28ac:	ee 24       	eor	r14, r14
    28ae:	ff 24       	eor	r15, r15
	
	kk=0;
	for(ii; sentdataa[ii] != '\0' ; ii++)

	{   
		if(isalpha(sentdataa[ii]) || isdigit(sentdataa[ii]))
    28b0:	80 2f       	mov	r24, r16
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 0f 1b 	call	0x361e	; 0x361e <isalpha>
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	31 f4       	brne	.+12     	; 0x28c8 <__vector_51+0x372>
    28bc:	80 2f       	mov	r24, r16
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	c0 97       	sbiw	r24, 0x30	; 48
    28c2:	8a 30       	cpi	r24, 0x0A	; 10
    28c4:	91 05       	cpc	r25, r1
    28c6:	38 f4       	brcc	.+14     	; 0x28d6 <__vector_51+0x380>

		{   animals[kk++]=sentdataa[ii];  
    28c8:	f5 01       	movw	r30, r10
    28ca:	ee 0d       	add	r30, r14
    28cc:	ff 1d       	adc	r31, r15
    28ce:	00 83       	st	Z, r16
    28d0:	08 94       	sec
    28d2:	e1 1c       	adc	r14, r1
    28d4:	f1 1c       	adc	r15, r1
//###############################################################################
//Extraction of   animals
//###############################################################################
	
	kk=0;
	for(ii; sentdataa[ii] != '\0' ; ii++)
    28d6:	d6 01       	movw	r26, r12
    28d8:	0d 91       	ld	r16, X+
    28da:	6d 01       	movw	r12, r26
    28dc:	00 23       	and	r16, r16
    28de:	41 f7       	brne	.-48     	; 0x28b0 <__vector_51+0x35a>
    28e0:	f0 92 15 02 	sts	0x0215, r15
    28e4:	e0 92 14 02 	sts	0x0214, r14
//      a-------b
// 
//###############################################################################
	
	
	int  habit_b_cords[n] ;
    28e8:	80 90 10 02 	lds	r8, 0x0210
    28ec:	90 90 11 02 	lds	r9, 0x0211
    28f0:	c4 01       	movw	r24, r8
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	ed b7       	in	r30, 0x3d	; 61
    28f8:	fe b7       	in	r31, 0x3e	; 62
    28fa:	e8 1b       	sub	r30, r24
    28fc:	f9 0b       	sbc	r31, r25
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	fe bf       	out	0x3e, r31	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	ed bf       	out	0x3d, r30	; 61
    2908:	2d b7       	in	r18, 0x3d	; 61
    290a:	3e b7       	in	r19, 0x3e	; 62
    290c:	2f 5f       	subi	r18, 0xFF	; 255
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	3a 87       	std	Y+10, r19	; 0x0a
    2912:	29 87       	std	Y+9, r18	; 0x09
    2914:	3e 87       	std	Y+14, r19	; 0x0e
    2916:	2d 87       	std	Y+13, r18	; 0x0d

	for(ii=0; ii<n; ii++)
    2918:	10 92 17 02 	sts	0x0217, r1
    291c:	10 92 16 02 	sts	0x0216, r1
    2920:	54 01       	movw	r10, r8
    2922:	18 14       	cp	r1, r8
    2924:	19 04       	cpc	r1, r9
    2926:	9c f4       	brge	.+38     	; 0x294e <__vector_51+0x3f8>
    2928:	72 01       	movw	r14, r4
    292a:	69 01       	movw	r12, r18
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	10 e0       	ldi	r17, 0x00	; 0
	{        habit_b_cords[ii] = lfind( habis[ii]);
    2930:	d7 01       	movw	r26, r14
    2932:	8d 91       	ld	r24, X+
    2934:	9d 91       	ld	r25, X+
    2936:	7d 01       	movw	r14, r26
    2938:	0e 94 a5 04 	call	0x94a	; 0x94a <lfind>
    293c:	f6 01       	movw	r30, r12
    293e:	81 93       	st	Z+, r24
    2940:	91 93       	st	Z+, r25
    2942:	6f 01       	movw	r12, r30
    2944:	0f 5f       	subi	r16, 0xFF	; 255
    2946:	1f 4f       	sbci	r17, 0xFF	; 255
//###############################################################################
	
	
	int  habit_b_cords[n] ;

	for(ii=0; ii<n; ii++)
    2948:	0a 15       	cp	r16, r10
    294a:	1b 05       	cpc	r17, r11
    294c:	8c f3       	brlt	.-30     	; 0x2930 <__vector_51+0x3da>

//###############################################################################
//Extraction of animal locations that are connected to co ordinates of habitats straight away
//###############################################################################	
	
	int animals_cords[n];
    294e:	88 0c       	add	r8, r8
    2950:	99 1c       	adc	r9, r9
    2952:	2d b7       	in	r18, 0x3d	; 61
    2954:	3e b7       	in	r19, 0x3e	; 62
    2956:	28 19       	sub	r18, r8
    2958:	39 09       	sbc	r19, r9
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	3e bf       	out	0x3e, r19	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	2d bf       	out	0x3d, r18	; 61
    2964:	4d b7       	in	r20, 0x3d	; 61
    2966:	5e b7       	in	r21, 0x3e	; 62
    2968:	4f 5f       	subi	r20, 0xFF	; 255
    296a:	5f 4f       	sbci	r21, 0xFF	; 255
    296c:	5e 83       	std	Y+6, r21	; 0x06
    296e:	4d 83       	std	Y+5, r20	; 0x05
    2970:	58 8b       	std	Y+16, r21	; 0x10
    2972:	4f 87       	std	Y+15, r20	; 0x0f
	kk = 0;
    2974:	10 92 15 02 	sts	0x0215, r1
    2978:	10 92 14 02 	sts	0x0214, r1
	
	for(ii=0;ii<2*n;ii=ii+2)
    297c:	10 92 17 02 	sts	0x0217, r1
    2980:	10 92 16 02 	sts	0x0216, r1
    2984:	40 90 10 02 	lds	r4, 0x0210
    2988:	50 90 11 02 	lds	r5, 0x0211
    298c:	42 01       	movw	r8, r4
    298e:	88 0c       	add	r8, r8
    2990:	99 1c       	adc	r9, r9
    2992:	18 14       	cp	r1, r8
    2994:	19 04       	cpc	r1, r9
    2996:	4c f5       	brge	.+82     	; 0x29ea <__vector_51+0x494>
    2998:	aa 24       	eor	r10, r10
    299a:	bb 24       	eor	r11, r11
	UBRR2H = 0x00; //set baud rate hi
	UCSR2B = 0x98;
}


SIGNAL(SIG_USART2_RECV) 		
    299c:	85 01       	movw	r16, r10
    299e:	00 0f       	add	r16, r16
    29a0:	11 1f       	adc	r17, r17
    29a2:	04 0f       	add	r16, r20
    29a4:	15 1f       	adc	r17, r21
//###############################################################################	
	
	int animals_cords[n];
	kk = 0;
	
	for(ii=0;ii<2*n;ii=ii+2)
    29a6:	cc 24       	eor	r12, r12
    29a8:	dd 24       	eor	r13, r13
    29aa:	78 01       	movw	r14, r16
    29ac:	81 01       	movw	r16, r2
     {  animals_cords[kk++] =  func( animals[ii], animals[ii+1]); 
    29ae:	d8 01       	movw	r26, r16
    29b0:	8c 91       	ld	r24, X
    29b2:	11 96       	adiw	r26, 0x01	; 1
    29b4:	6c 91       	ld	r22, X
    29b6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <func>
    29ba:	f7 01       	movw	r30, r14
    29bc:	81 93       	st	Z+, r24
    29be:	91 93       	st	Z+, r25
    29c0:	7f 01       	movw	r14, r30
    29c2:	08 94       	sec
    29c4:	a1 1c       	adc	r10, r1
    29c6:	b1 1c       	adc	r11, r1
//###############################################################################	
	
	int animals_cords[n];
	kk = 0;
	
	for(ii=0;ii<2*n;ii=ii+2)
    29c8:	22 e0       	ldi	r18, 0x02	; 2
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	c2 0e       	add	r12, r18
    29ce:	d3 1e       	adc	r13, r19
    29d0:	0e 5f       	subi	r16, 0xFE	; 254
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	c8 14       	cp	r12, r8
    29d6:	d9 04       	cpc	r13, r9
    29d8:	54 f3       	brlt	.-44     	; 0x29ae <__vector_51+0x458>
    29da:	b0 92 15 02 	sts	0x0215, r11
    29de:	a0 92 14 02 	sts	0x0214, r10
    29e2:	d0 92 17 02 	sts	0x0217, r13
    29e6:	c0 92 16 02 	sts	0x0216, r12

//###############################################################################
//prioritizing the processed list for near pick and drops recursively
//###############################################################################

      prioritizer(habit_b_cords, animals_cords, n, 0);
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	6d 81       	ldd	r22, Y+5	; 0x05
    29f0:	7e 81       	ldd	r23, Y+6	; 0x06
    29f2:	a2 01       	movw	r20, r4
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <prioritizer>


      int  travel_list[2*n];
    29fc:	40 91 10 02 	lds	r20, 0x0210
    2a00:	50 91 11 02 	lds	r21, 0x0211
    2a04:	58 87       	std	Y+8, r21	; 0x08
    2a06:	4f 83       	std	Y+7, r20	; 0x07
    2a08:	9a 01       	movw	r18, r20
    2a0a:	22 0f       	add	r18, r18
    2a0c:	33 1f       	adc	r19, r19
    2a0e:	c9 01       	movw	r24, r18
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	ad b7       	in	r26, 0x3d	; 61
    2a16:	be b7       	in	r27, 0x3e	; 62
    2a18:	a8 1b       	sub	r26, r24
    2a1a:	b9 0b       	sbc	r27, r25
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	be bf       	out	0x3e, r27	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	ad bf       	out	0x3d, r26	; 61
    2a26:	ed b7       	in	r30, 0x3d	; 61
    2a28:	fe b7       	in	r31, 0x3e	; 62
    2a2a:	31 96       	adiw	r30, 0x01	; 1
    2a2c:	fc 87       	std	Y+12, r31	; 0x0c
    2a2e:	eb 87       	std	Y+11, r30	; 0x0b
    2a30:	2f 01       	movw	r4, r30

//###############################################################################
//another list stores single co ordinate  of habitat  which is most near to associated animal
//###############################################################################
       int another_list[n];
    2a32:	4d b7       	in	r20, 0x3d	; 61
    2a34:	5e b7       	in	r21, 0x3e	; 62
    2a36:	42 1b       	sub	r20, r18
    2a38:	53 0b       	sbc	r21, r19
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	5e bf       	out	0x3e, r21	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	4d bf       	out	0x3d, r20	; 61
    2a44:	8d b7       	in	r24, 0x3d	; 61
    2a46:	9e b7       	in	r25, 0x3e	; 62
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	1c 01       	movw	r2, r24

       for( ii=0 ; ii<n ; ii++)
    2a4c:	10 92 17 02 	sts	0x0217, r1
    2a50:	10 92 16 02 	sts	0x0216, r1
    2a54:	8f 80       	ldd	r8, Y+7	; 0x07
    2a56:	98 84       	ldd	r9, Y+8	; 0x08
    2a58:	18 14       	cp	r1, r8
    2a5a:	19 04       	cpc	r1, r9
    2a5c:	d4 f4       	brge	.+52     	; 0x2a92 <__vector_51+0x53c>
    2a5e:	ed 80       	ldd	r14, Y+5	; 0x05
    2a60:	fe 80       	ldd	r15, Y+6	; 0x06
    2a62:	c9 84       	ldd	r12, Y+9	; 0x09
    2a64:	da 84       	ldd	r13, Y+10	; 0x0a
    2a66:	5c 01       	movw	r10, r24
    2a68:	00 e0       	ldi	r16, 0x00	; 0
    2a6a:	10 e0       	ldi	r17, 0x00	; 0
       {
	       another_list[ii] = calc_min(animals_cords[ii], habit_b_cords[ii]);
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	6d 91       	ld	r22, X+
    2a70:	7d 91       	ld	r23, X+
    2a72:	6d 01       	movw	r12, r26
    2a74:	f7 01       	movw	r30, r14
    2a76:	81 91       	ld	r24, Z+
    2a78:	91 91       	ld	r25, Z+
    2a7a:	7f 01       	movw	r14, r30
    2a7c:	0e 94 b6 03 	call	0x76c	; 0x76c <calc_min>
    2a80:	d5 01       	movw	r26, r10
    2a82:	8d 93       	st	X+, r24
    2a84:	9d 93       	st	X+, r25
    2a86:	5d 01       	movw	r10, r26
    2a88:	0f 5f       	subi	r16, 0xFF	; 255
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
//###############################################################################
//another list stores single co ordinate  of habitat  which is most near to associated animal
//###############################################################################
       int another_list[n];

       for( ii=0 ; ii<n ; ii++)
    2a8c:	08 15       	cp	r16, r8
    2a8e:	19 05       	cpc	r17, r9
    2a90:	6c f3       	brlt	.-38     	; 0x2a6c <__vector_51+0x516>

//###############################################################################
//copying animals  to a array in a  manner habitat and animal way    
//###############################################################################
	
    ii=0;
    2a92:	10 92 17 02 	sts	0x0217, r1
    2a96:	10 92 16 02 	sts	0x0216, r1
    while( ii < 2*n)
    2a9a:	0f 81       	ldd	r16, Y+7	; 0x07
    2a9c:	18 85       	ldd	r17, Y+8	; 0x08
    2a9e:	00 0f       	add	r16, r16
    2aa0:	11 1f       	adc	r17, r17
    2aa2:	10 16       	cp	r1, r16
    2aa4:	11 06       	cpc	r1, r17
    2aa6:	0c f0       	brlt	.+2      	; 0x2aaa <__vector_51+0x554>
    2aa8:	45 c0       	rjmp	.+138    	; 0x2b34 <__vector_51+0x5de>
    2aaa:	ad 81       	ldd	r26, Y+5	; 0x05
    2aac:	be 81       	ldd	r27, Y+6	; 0x06
    2aae:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ab0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ab2:	fa 01       	movw	r30, r20
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    {

	travel_list[ii] =   animals_cords[ii];
    2ab8:	2d 91       	ld	r18, X+
    2aba:	3c 91       	ld	r19, X
    2abc:	11 97       	sbiw	r26, 0x01	; 1
    2abe:	31 83       	std	Z+1, r19	; 0x01
    2ac0:	20 83       	st	Z, r18
	ii= ii+2;
    2ac2:	02 96       	adiw	r24, 0x02	; 2
    2ac4:	14 96       	adiw	r26, 0x04	; 4
    2ac6:	34 96       	adiw	r30, 0x04	; 4
//###############################################################################
//copying animals  to a array in a  manner habitat and animal way    
//###############################################################################
	
    ii=0;
    while( ii < 2*n)
    2ac8:	80 17       	cp	r24, r16
    2aca:	91 07       	cpc	r25, r17
    2acc:	ac f3       	brlt	.-22     	; 0x2ab8 <__vector_51+0x562>

//###############################################################################
//merging habitat co ordinates which is near to associated animals
//###############################################################################	
    
for(ii=0; ii<2*n ;  ii++)
    2ace:	10 92 17 02 	sts	0x0217, r1
    2ad2:	10 92 16 02 	sts	0x0216, r1
	UBRR2H = 0x00; //set baud rate hi
	UCSR2B = 0x98;
}


SIGNAL(SIG_USART2_RECV) 		
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
	ii= ii+2;
   }


    int jj=0 ;
    int z =0;
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
	travel_list[ii] =   animals_cords[ii];
	ii= ii+2;
   }


    int jj=0 ;
    2ade:	e0 e0       	ldi	r30, 0x00	; 0
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	ca 01       	movw	r24, r20
    2ae4:	af 01       	movw	r20, r30
    2ae6:	68 01       	movw	r12, r16
    2ae8:	ef 84       	ldd	r14, Y+15	; 0x0f
    2aea:	f8 88       	ldd	r15, Y+16	; 0x10
    2aec:	fc 01       	movw	r30, r24
//merging habitat co ordinates which is near to associated animals
//###############################################################################	
    
for(ii=0; ii<2*n ;  ii++)
{
if(ii%2 != 0) {  travel_list[ii] = another_list[jj++];   }
    2aee:	20 ff       	sbrs	r18, 0
    2af0:	0e c0       	rjmp	.+28     	; 0x2b0e <__vector_51+0x5b8>
    2af2:	ca 01       	movw	r24, r20
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	82 0d       	add	r24, r2
    2afa:	93 1d       	adc	r25, r3
    2afc:	dc 01       	movw	r26, r24
    2afe:	8d 91       	ld	r24, X+
    2b00:	9c 91       	ld	r25, X
    2b02:	11 97       	sbiw	r26, 0x01	; 1
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	4f 5f       	subi	r20, 0xFF	; 255
    2b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <__vector_51+0x5d2>
    else  { travel_list[ii] = animals_cords[z++];  }
    2b0e:	cb 01       	movw	r24, r22
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	8e 0d       	add	r24, r14
    2b16:	9f 1d       	adc	r25, r15
    2b18:	dc 01       	movw	r26, r24
    2b1a:	8d 91       	ld	r24, X+
    2b1c:	9c 91       	ld	r25, X
    2b1e:	11 97       	sbiw	r26, 0x01	; 1
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	32 96       	adiw	r30, 0x02	; 2

//###############################################################################
//merging habitat co ordinates which is near to associated animals
//###############################################################################	
    
for(ii=0; ii<2*n ;  ii++)
    2b2e:	2c 15       	cp	r18, r12
    2b30:	3d 05       	cpc	r19, r13
    2b32:	e9 f6       	brne	.-70     	; 0x2aee <__vector_51+0x598>

//###############################################################################
//creating a last array containing order of co ordinates t be traversed 
//###############################################################################

int last_list[2*n];
    2b34:	00 0f       	add	r16, r16
    2b36:	11 1f       	adc	r17, r17
    2b38:	ed b7       	in	r30, 0x3d	; 61
    2b3a:	fe b7       	in	r31, 0x3e	; 62
    2b3c:	e0 1b       	sub	r30, r16
    2b3e:	f1 0b       	sbc	r31, r17
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	fe bf       	out	0x3e, r31	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	ed bf       	out	0x3d, r30	; 61
    2b4a:	2d b7       	in	r18, 0x3d	; 61
    2b4c:	3e b7       	in	r19, 0x3e	; 62
    2b4e:	2f 5f       	subi	r18, 0xFF	; 255
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	38 87       	std	Y+8, r19	; 0x08
    2b54:	2f 83       	std	Y+7, r18	; 0x07
    2b56:	79 01       	movw	r14, r18
kk=0;
    2b58:	10 92 15 02 	sts	0x0215, r1
    2b5c:	10 92 14 02 	sts	0x0214, r1
jj=0;
for(ii=0 ; ii<2*n; ii++)
    2b60:	10 92 17 02 	sts	0x0217, r1
    2b64:	10 92 16 02 	sts	0x0216, r1
    2b68:	20 90 10 02 	lds	r2, 0x0210
    2b6c:	30 90 11 02 	lds	r3, 0x0211
    2b70:	51 01       	movw	r10, r2
    2b72:	aa 0c       	add	r10, r10
    2b74:	bb 1c       	adc	r11, r11
    2b76:	1a 14       	cp	r1, r10
    2b78:	1b 04       	cpc	r1, r11
    2b7a:	0c f0       	brlt	.+2      	; 0x2b7e <__vector_51+0x628>
    2b7c:	69 c0       	rjmp	.+210    	; 0x2c50 <__vector_51+0x6fa>
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	10 e0       	ldi	r17, 0x00	; 0
    2b82:	cc 24       	eor	r12, r12
    2b84:	dd 24       	eor	r13, r13
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
//creating a last array containing order of co ordinates t be traversed 
//###############################################################################

int last_list[2*n];
kk=0;
jj=0;
    2b8a:	88 24       	eor	r8, r8
    2b8c:	99 24       	eor	r9, r9
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <__vector_51+0x63c>
for(ii=0 ; ii<2*n; ii++)
    2b90:	69 01       	movw	r12, r18
{
	if(ii>0 && ii< 2*n && ii%2 == 0) {
    2b92:	12 16       	cp	r1, r18
    2b94:	13 06       	cpc	r1, r19
    2b96:	f4 f5       	brge	.+124    	; 0x2c14 <__vector_51+0x6be>
    2b98:	2a 15       	cp	r18, r10
    2b9a:	3b 05       	cpc	r19, r11
    2b9c:	dc f5       	brge	.+118    	; 0x2c14 <__vector_51+0x6be>
    2b9e:	20 fd       	sbrc	r18, 0
    2ba0:	39 c0       	rjmp	.+114    	; 0x2c14 <__vector_51+0x6be>
		last_list[kk]= adjplease( habit_b_cords[jj++], travel_list[ii-1], travel_list[ii]);
    2ba2:	c4 01       	movw	r24, r8
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2baa:	fe 85       	ldd	r31, Y+14	; 0x0e
    2bac:	e8 0f       	add	r30, r24
    2bae:	f9 1f       	adc	r31, r25
    2bb0:	08 94       	sec
    2bb2:	81 1c       	adc	r8, r1
    2bb4:	91 1c       	adc	r9, r1
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	84 0d       	add	r24, r4
    2bc0:	95 1d       	adc	r25, r5
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	6d 91       	ld	r22, X+
    2bc6:	7c 91       	ld	r23, X
    2bc8:	c9 01       	movw	r24, r18
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	84 0d       	add	r24, r4
    2bd0:	95 1d       	adc	r25, r5
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	0d 90       	ld	r0, X+
    2bd6:	bc 91       	ld	r27, X
    2bd8:	a0 2d       	mov	r26, r0
    2bda:	be 83       	std	Y+6, r27	; 0x06
    2bdc:	ad 83       	std	Y+5, r26	; 0x05
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	ad 01       	movw	r20, r26
    2be4:	0e 94 f4 06 	call	0xde8	; 0xde8 <adjplease>
    2be8:	98 01       	movw	r18, r16
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	2e 0d       	add	r18, r14
    2bf0:	3f 1d       	adc	r19, r15
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
		last_list[++kk] = travel_list[ii];
    2bf8:	0f 5f       	subi	r16, 0xFF	; 255
    2bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfc:	c8 01       	movw	r24, r16
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	8e 0d       	add	r24, r14
    2c04:	9f 1d       	adc	r25, r15
    2c06:	ed 81       	ldd	r30, Y+5	; 0x05
    2c08:	fe 81       	ldd	r31, Y+6	; 0x06
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	11 96       	adiw	r26, 0x01	; 1
    2c0e:	fc 93       	st	X, r31
    2c10:	ee 93       	st	-X, r30
    2c12:	11 c0       	rjmp	.+34     	; 0x2c36 <__vector_51+0x6e0>
	

	else{
		

		last_list[kk] = travel_list[ii];
    2c14:	c8 01       	movw	r24, r16
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	f7 01       	movw	r30, r14
    2c1c:	e8 0f       	add	r30, r24
    2c1e:	f9 1f       	adc	r31, r25
    2c20:	c9 01       	movw	r24, r18
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	84 0d       	add	r24, r4
    2c28:	95 1d       	adc	r25, r5
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	8d 91       	ld	r24, X+
    2c2e:	9c 91       	ld	r25, X
    2c30:	11 97       	sbiw	r26, 0x01	; 1
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	80 83       	st	Z, r24
	}
	kk++;
    2c36:	0f 5f       	subi	r16, 0xFF	; 255
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
//###############################################################################

int last_list[2*n];
kk=0;
jj=0;
for(ii=0 ; ii<2*n; ii++)
    2c3a:	96 01       	movw	r18, r12
    2c3c:	2f 5f       	subi	r18, 0xFF	; 255
    2c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c40:	2a 15       	cp	r18, r10
    2c42:	3b 05       	cpc	r19, r11
    2c44:	0c f4       	brge	.+2      	; 0x2c48 <__vector_51+0x6f2>
    2c46:	a4 cf       	rjmp	.-184    	; 0x2b90 <__vector_51+0x63a>
    2c48:	10 93 15 02 	sts	0x0215, r17
    2c4c:	00 93 14 02 	sts	0x0214, r16
// beginning of traversal from source node which is 0,0
//###############################################################################

	
int source = 0;
int direction = 90;
    2c50:	8a e5       	ldi	r24, 0x5A	; 90
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03

ii =0;
    2c58:	10 92 17 02 	sts	0x0217, r1
    2c5c:	10 92 16 02 	sts	0x0216, r1
jj=0;	

int tracer = 2*n + n-1;
    2c60:	c1 01       	movw	r24, r2
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	82 0d       	add	r24, r2
    2c68:	93 1d       	adc	r25, r3
    2c6a:	4c 01       	movw	r8, r24
    2c6c:	08 94       	sec
    2c6e:	81 08       	sbc	r8, r1
    2c70:	91 08       	sbc	r9, r1
int lasttmp =1;
int lastcmp = 0;
int lastmrk  = 1;
int prevdir = 0;
    2c72:	1a 82       	std	Y+2, r1	; 0x02
    2c74:	19 82       	std	Y+1, r1	; 0x01



while( ii< 2*n+(n-1) )
    2c76:	80 91 10 02 	lds	r24, 0x0210
    2c7a:	90 91 11 02 	lds	r25, 0x0211
    2c7e:	ac 01       	movw	r20, r24
    2c80:	44 0f       	add	r20, r20
    2c82:	55 1f       	adc	r21, r21
    2c84:	fc 01       	movw	r30, r24
    2c86:	31 97       	sbiw	r30, 0x01	; 1
    2c88:	9a 01       	movw	r18, r20
    2c8a:	2e 0f       	add	r18, r30
    2c8c:	3f 1f       	adc	r19, r31
    2c8e:	12 16       	cp	r1, r18
    2c90:	13 06       	cpc	r1, r19
    2c92:	0c f0       	brlt	.+2      	; 0x2c96 <__vector_51+0x740>
    2c94:	bb c0       	rjmp	.+374    	; 0x2e0c <__vector_51+0x8b6>

ii =0;
jj=0;	

int tracer = 2*n + n-1;
int lasttmp =1;
    2c96:	cc 24       	eor	r12, r12
    2c98:	dd 24       	eor	r13, r13
    2c9a:	c3 94       	inc	r12
//###############################################################################
// beginning of traversal from source node which is 0,0
//###############################################################################

	
int source = 0;
    2c9c:	00 e0       	ldi	r16, 0x00	; 0
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
int direction = 90;

ii =0;
jj=0;	
    2ca0:	44 24       	eor	r4, r4
    2ca2:	55 24       	eor	r5, r5




{
	 lasttmp = ++lasttmp % 3 ;
    2ca4:	0f 2e       	mov	r0, r31
    2ca6:	f3 e0       	ldi	r31, 0x03	; 3
    2ca8:	af 2e       	mov	r10, r31
    2caa:	bb 24       	eor	r11, r11
    2cac:	f0 2d       	mov	r31, r0
    2cae:	c6 01       	movw	r24, r12
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	b5 01       	movw	r22, r10
    2cb4:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    2cb8:	6c 01       	movw	r12, r24
	while(  source !=   last_list[ii]   )
    2cba:	20 91 16 02 	lds	r18, 0x0216
    2cbe:	30 91 17 02 	lds	r19, 0x0217
    2cc2:	c9 01       	movw	r24, r18
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	8e 0d       	add	r24, r14
    2cca:	9f 1d       	adc	r25, r15
    2ccc:	fc 01       	movw	r30, r24
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	60 17       	cp	r22, r16
    2cd4:	71 07       	cpc	r23, r17
    2cd6:	e9 f0       	breq	.+58     	; 0x2d12 <__vector_51+0x7bc>

		
       //###############################################################################
       //traversing recursively to the co ordinates in last list
       //###############################################################################
		source =  travell(source,last_list[ii], &direction);
    2cd8:	c8 01       	movw	r24, r16
    2cda:	ae 01       	movw	r20, r28
    2cdc:	4d 5f       	subi	r20, 0xFD	; 253
    2cde:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce0:	0e 94 a4 02 	call	0x548	; 0x548 <travell>
    2ce4:	8c 01       	movw	r16, r24
		prevdir = direction;
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
       stop(); 
    2cee:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>



{
	 lasttmp = ++lasttmp % 3 ;
	while(  source !=   last_list[ii]   )
    2cf2:	20 91 16 02 	lds	r18, 0x0216
    2cf6:	30 91 17 02 	lds	r19, 0x0217
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	8e 0d       	add	r24, r14
    2d02:	9f 1d       	adc	r25, r15
    2d04:	dc 01       	movw	r26, r24
    2d06:	6d 91       	ld	r22, X+
    2d08:	7c 91       	ld	r23, X
    2d0a:	11 97       	sbiw	r26, 0x01	; 1
    2d0c:	60 17       	cp	r22, r16
    2d0e:	71 07       	cpc	r23, r17
    2d10:	19 f7       	brne	.-58     	; 0x2cd8 <__vector_51+0x782>
		prevdir = direction;
       stop(); 
	  

	} 
        tracer--;
    2d12:	08 94       	sec
    2d14:	81 08       	sbc	r8, r1
    2d16:	91 08       	sbc	r9, r1

	if ( source  == last_list[ii]  )
	{

		if( ii%3 == 0)
    2d18:	c9 01       	movw	r24, r18
    2d1a:	b5 01       	movw	r22, r10
    2d1c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__divmodhi4>
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	91 f4       	brne	.+36     	; 0x2d48 <__vector_51+0x7f2>
	    {  //###############################################################################
		    //picks the animal block
		    //###############################################################################
			stop();
    2d24:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
			resol( last_list[ii] , &direction);
    2d28:	80 91 16 02 	lds	r24, 0x0216
    2d2c:	90 91 17 02 	lds	r25, 0x0217
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	8e 0d       	add	r24, r14
    2d36:	9f 1d       	adc	r25, r15
    2d38:	fc 01       	movw	r30, r24
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	be 01       	movw	r22, r28
    2d40:	6d 5f       	subi	r22, 0xFD	; 253
    2d42:	7f 4f       	sbci	r23, 0xFF	; 255
    2d44:	0e 94 1c 0b 	call	0x1638	; 0x1638 <resol>

	    }
	
	    if( lasttmp == 0 )
    2d48:	c1 14       	cp	r12, r1
    2d4a:	d1 04       	cpc	r13, r1
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <__vector_51+0x7fa>
    2d4e:	44 c0       	rjmp	.+136    	; 0x2dd8 <__vector_51+0x882>
					//###############################################################################
					//drops the  animal block
					//###############################################################################
	     {		   stop();
    2d50:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <stop>
		       	   placeit(last_list[ii], last_list[ii+1], habit_b_cords[jj++], &direction ) ;
    2d54:	20 91 16 02 	lds	r18, 0x0216
    2d58:	30 91 17 02 	lds	r19, 0x0217
    2d5c:	c2 01       	movw	r24, r4
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d64:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d66:	84 0f       	add	r24, r20
    2d68:	95 1f       	adc	r25, r21
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	4d 91       	ld	r20, X+
    2d6e:	5c 91       	ld	r21, X
    2d70:	08 94       	sec
    2d72:	41 1c       	adc	r4, r1
    2d74:	51 1c       	adc	r5, r1
    2d76:	c9 01       	movw	r24, r18
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	f7 01       	movw	r30, r14
    2d7e:	e8 0f       	add	r30, r24
    2d80:	f9 1f       	adc	r31, r25
    2d82:	c9 01       	movw	r24, r18
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	8e 0d       	add	r24, r14
    2d8c:	9f 1d       	adc	r25, r15
    2d8e:	dc 01       	movw	r26, r24
    2d90:	6d 91       	ld	r22, X+
    2d92:	7c 91       	ld	r23, X
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	9e 01       	movw	r18, r28
    2d9a:	2d 5f       	subi	r18, 0xFD	; 253
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <placeit>
		       	   source =  lup(last_list[ii], last_list[ii+1], &direction);
    2da2:	20 91 16 02 	lds	r18, 0x0216
    2da6:	30 91 17 02 	lds	r19, 0x0217
    2daa:	c9 01       	movw	r24, r18
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	f7 01       	movw	r30, r14
    2db2:	e8 0f       	add	r30, r24
    2db4:	f9 1f       	adc	r31, r25
    2db6:	c9 01       	movw	r24, r18
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	8e 0d       	add	r24, r14
    2dc0:	9f 1d       	adc	r25, r15
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	6d 91       	ld	r22, X+
    2dc6:	7c 91       	ld	r23, X
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	ae 01       	movw	r20, r28
    2dce:	4d 5f       	subi	r20, 0xFD	; 253
    2dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lup>
    2dd6:	8c 01       	movw	r16, r24
					  
		       	   
	     }
	
	
	}	ii++;
    2dd8:	20 91 16 02 	lds	r18, 0x0216
    2ddc:	30 91 17 02 	lds	r19, 0x0217
    2de0:	2f 5f       	subi	r18, 0xFF	; 255
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	30 93 17 02 	sts	0x0217, r19
    2de8:	20 93 16 02 	sts	0x0216, r18
int lastmrk  = 1;
int prevdir = 0;



while( ii< 2*n+(n-1) )
    2dec:	80 91 10 02 	lds	r24, 0x0210
    2df0:	90 91 11 02 	lds	r25, 0x0211
    2df4:	ac 01       	movw	r20, r24
    2df6:	44 0f       	add	r20, r20
    2df8:	55 1f       	adc	r21, r21
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	31 97       	sbiw	r30, 0x01	; 1
    2dfe:	ba 01       	movw	r22, r20
    2e00:	6e 0f       	add	r22, r30
    2e02:	7f 1f       	adc	r23, r31
    2e04:	26 17       	cp	r18, r22
    2e06:	37 07       	cpc	r19, r23
    2e08:	0c f4       	brge	.+2      	; 0x2e0c <__vector_51+0x8b6>
    2e0a:	51 cf       	rjmp	.-350    	; 0x2cae <__vector_51+0x758>
		
						//###############################################################################
						//deals with the last node 
						//###############################################################################

     if(tracer == 0) {    deallast(last_list[2*n-1 + n-1], habit_b_cords[n-1], &prevdir);  buzzer_on(); _delay_ms(5000) ; buzzer_off();       } 
    2e0c:	81 14       	cp	r8, r1
    2e0e:	91 04       	cpc	r9, r1
    2e10:	31 f5       	brne	.+76     	; 0x2e5e <__vector_51+0x908>
    2e12:	84 0f       	add	r24, r20
    2e14:	95 1f       	adc	r25, r21
    2e16:	02 97       	sbiw	r24, 0x02	; 2
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e1e:	38 85       	ldd	r19, Y+8	; 0x08
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	49 85       	ldd	r20, Y+9	; 0x09
    2e2a:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e2c:	e4 0f       	add	r30, r20
    2e2e:	f5 1f       	adc	r31, r21
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	dc 01       	movw	r26, r24
    2e36:	8d 91       	ld	r24, X+
    2e38:	9c 91       	ld	r25, X
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	4f 5f       	subi	r20, 0xFF	; 255
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	0e 94 93 07 	call	0xf26	; 0xf26 <deallast>
    2e44:	0e 94 c4 11 	call	0x2388	; 0x2388 <buzzer_on>
    2e48:	2f ef       	ldi	r18, 0xFF	; 255
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	40 ee       	ldi	r20, 0xE0	; 224
    2e4e:	21 50       	subi	r18, 0x01	; 1
    2e50:	30 40       	sbci	r19, 0x00	; 0
    2e52:	40 40       	sbci	r20, 0x00	; 0
    2e54:	e1 f7       	brne	.-8      	; 0x2e4e <__vector_51+0x8f8>
    2e56:	00 c0       	rjmp	.+0      	; 0x2e58 <__vector_51+0x902>
    2e58:	00 00       	nop
    2e5a:	0e 94 c8 11 	call	0x2390	; 0x2390 <buzzer_off>
    2e5e:	39 89       	ldd	r19, Y+17	; 0x11
    2e60:	3d bf       	out	0x3d, r19	; 61
    2e62:	4a 89       	ldd	r20, Y+18	; 0x12
    2e64:	4e bf       	out	0x3e, r20	; 62
		
		  
		
		
		
 }		
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	7e be       	out	0x3e, r7	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	6d be       	out	0x3d, r6	; 61
    2e70:	62 96       	adiw	r28, 0x12	; 18
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	7f 91       	pop	r23
    2e88:	6f 91       	pop	r22
    2e8a:	5f 91       	pop	r21
    2e8c:	4f 91       	pop	r20
    2e8e:	3f 91       	pop	r19
    2e90:	2f 91       	pop	r18
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	bf 90       	pop	r11
    2ea0:	af 90       	pop	r10
    2ea2:	9f 90       	pop	r9
    2ea4:	8f 90       	pop	r8
    2ea6:	7f 90       	pop	r7
    2ea8:	6f 90       	pop	r6
    2eaa:	5f 90       	pop	r5
    2eac:	4f 90       	pop	r4
    2eae:	3f 90       	pop	r3
    2eb0:	2f 90       	pop	r2
    2eb2:	0f 90       	pop	r0
    2eb4:	0b be       	out	0x3b, r0	; 59
    2eb6:	0f 90       	pop	r0
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	0f 90       	pop	r0
    2ebc:	1f 90       	pop	r1
    2ebe:	18 95       	reti

00002ec0 <servo_init>:
//servo initializer to the desired position
//###############################################################################

void servo_init()
{
	servo_2(150); _delay_ms(1000);
    2ec0:	86 e9       	ldi	r24, 0x96	; 150
    2ec2:	0e 94 34 10 	call	0x2068	; 0x2068 <servo_2>
    2ec6:	8f ef       	ldi	r24, 0xFF	; 255
    2ec8:	9f ef       	ldi	r25, 0xFF	; 255
    2eca:	ac e2       	ldi	r26, 0x2C	; 44
    2ecc:	81 50       	subi	r24, 0x01	; 1
    2ece:	90 40       	sbci	r25, 0x00	; 0
    2ed0:	a0 40       	sbci	r26, 0x00	; 0
    2ed2:	e1 f7       	brne	.-8      	; 0x2ecc <servo_init+0xc>
    2ed4:	00 c0       	rjmp	.+0      	; 0x2ed6 <servo_init+0x16>
    2ed6:	00 00       	nop
	servo_1(90); _delay_ms(1000);
    2ed8:	8a e5       	ldi	r24, 0x5A	; 90
    2eda:	0e 94 19 10 	call	0x2032	; 0x2032 <servo_1>
    2ede:	8f ef       	ldi	r24, 0xFF	; 255
    2ee0:	9f ef       	ldi	r25, 0xFF	; 255
    2ee2:	ac e2       	ldi	r26, 0x2C	; 44
    2ee4:	81 50       	subi	r24, 0x01	; 1
    2ee6:	90 40       	sbci	r25, 0x00	; 0
    2ee8:	a0 40       	sbci	r26, 0x00	; 0
    2eea:	e1 f7       	brne	.-8      	; 0x2ee4 <servo_init+0x24>
    2eec:	00 c0       	rjmp	.+0      	; 0x2eee <servo_init+0x2e>
    2eee:	00 00       	nop
	servo_3(180); _delay_ms(1000);
    2ef0:	84 eb       	ldi	r24, 0xB4	; 180
    2ef2:	0e 94 4f 10 	call	0x209e	; 0x209e <servo_3>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	9f ef       	ldi	r25, 0xFF	; 255
    2efa:	ac e2       	ldi	r26, 0x2C	; 44
    2efc:	81 50       	subi	r24, 0x01	; 1
    2efe:	90 40       	sbci	r25, 0x00	; 0
    2f00:	a0 40       	sbci	r26, 0x00	; 0
    2f02:	e1 f7       	brne	.-8      	; 0x2efc <servo_init+0x3c>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <servo_init+0x46>
    2f06:	00 00       	nop
}
    2f08:	08 95       	ret

00002f0a <main>:



int main(void)
{
	init_devices();
    2f0a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <init_devices>
	lcd_set_4bit();
    2f0e:	0e 94 40 01 	call	0x280	; 0x280 <lcd_set_4bit>
	lcd_init();
    2f12:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_init>
    velocity(246,255);
    2f16:	86 ef       	ldi	r24, 0xF6	; 246
    2f18:	6f ef       	ldi	r22, 0xFF	; 255
    2f1a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <velocity>
	
	// servo initializer
	servo_init();
    2f1e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <servo_init>
    2f22:	ff cf       	rjmp	.-2      	; 0x2f22 <main+0x18>

00002f24 <__subsf3>:
    2f24:	50 58       	subi	r21, 0x80	; 128

00002f26 <__addsf3>:
    2f26:	bb 27       	eor	r27, r27
    2f28:	aa 27       	eor	r26, r26
    2f2a:	0e d0       	rcall	.+28     	; 0x2f48 <__addsf3x>
    2f2c:	4d c1       	rjmp	.+666    	; 0x31c8 <__fp_round>
    2f2e:	3e d1       	rcall	.+636    	; 0x31ac <__fp_pscA>
    2f30:	30 f0       	brcs	.+12     	; 0x2f3e <__addsf3+0x18>
    2f32:	43 d1       	rcall	.+646    	; 0x31ba <__fp_pscB>
    2f34:	20 f0       	brcs	.+8      	; 0x2f3e <__addsf3+0x18>
    2f36:	31 f4       	brne	.+12     	; 0x2f44 <__addsf3+0x1e>
    2f38:	9f 3f       	cpi	r25, 0xFF	; 255
    2f3a:	11 f4       	brne	.+4      	; 0x2f40 <__addsf3+0x1a>
    2f3c:	1e f4       	brtc	.+6      	; 0x2f44 <__addsf3+0x1e>
    2f3e:	33 c1       	rjmp	.+614    	; 0x31a6 <__fp_nan>
    2f40:	0e f4       	brtc	.+2      	; 0x2f44 <__addsf3+0x1e>
    2f42:	e0 95       	com	r30
    2f44:	e7 fb       	bst	r30, 7
    2f46:	29 c1       	rjmp	.+594    	; 0x319a <__fp_inf>

00002f48 <__addsf3x>:
    2f48:	e9 2f       	mov	r30, r25
    2f4a:	4f d1       	rcall	.+670    	; 0x31ea <__fp_split3>
    2f4c:	80 f3       	brcs	.-32     	; 0x2f2e <__addsf3+0x8>
    2f4e:	ba 17       	cp	r27, r26
    2f50:	62 07       	cpc	r22, r18
    2f52:	73 07       	cpc	r23, r19
    2f54:	84 07       	cpc	r24, r20
    2f56:	95 07       	cpc	r25, r21
    2f58:	18 f0       	brcs	.+6      	; 0x2f60 <__addsf3x+0x18>
    2f5a:	71 f4       	brne	.+28     	; 0x2f78 <__addsf3x+0x30>
    2f5c:	9e f5       	brtc	.+102    	; 0x2fc4 <__addsf3x+0x7c>
    2f5e:	67 c1       	rjmp	.+718    	; 0x322e <__fp_zero>
    2f60:	0e f4       	brtc	.+2      	; 0x2f64 <__addsf3x+0x1c>
    2f62:	e0 95       	com	r30
    2f64:	0b 2e       	mov	r0, r27
    2f66:	ba 2f       	mov	r27, r26
    2f68:	a0 2d       	mov	r26, r0
    2f6a:	0b 01       	movw	r0, r22
    2f6c:	b9 01       	movw	r22, r18
    2f6e:	90 01       	movw	r18, r0
    2f70:	0c 01       	movw	r0, r24
    2f72:	ca 01       	movw	r24, r20
    2f74:	a0 01       	movw	r20, r0
    2f76:	11 24       	eor	r1, r1
    2f78:	ff 27       	eor	r31, r31
    2f7a:	59 1b       	sub	r21, r25
    2f7c:	99 f0       	breq	.+38     	; 0x2fa4 <__addsf3x+0x5c>
    2f7e:	59 3f       	cpi	r21, 0xF9	; 249
    2f80:	50 f4       	brcc	.+20     	; 0x2f96 <__addsf3x+0x4e>
    2f82:	50 3e       	cpi	r21, 0xE0	; 224
    2f84:	68 f1       	brcs	.+90     	; 0x2fe0 <__addsf3x+0x98>
    2f86:	1a 16       	cp	r1, r26
    2f88:	f0 40       	sbci	r31, 0x00	; 0
    2f8a:	a2 2f       	mov	r26, r18
    2f8c:	23 2f       	mov	r18, r19
    2f8e:	34 2f       	mov	r19, r20
    2f90:	44 27       	eor	r20, r20
    2f92:	58 5f       	subi	r21, 0xF8	; 248
    2f94:	f3 cf       	rjmp	.-26     	; 0x2f7c <__addsf3x+0x34>
    2f96:	46 95       	lsr	r20
    2f98:	37 95       	ror	r19
    2f9a:	27 95       	ror	r18
    2f9c:	a7 95       	ror	r26
    2f9e:	f0 40       	sbci	r31, 0x00	; 0
    2fa0:	53 95       	inc	r21
    2fa2:	c9 f7       	brne	.-14     	; 0x2f96 <__addsf3x+0x4e>
    2fa4:	7e f4       	brtc	.+30     	; 0x2fc4 <__addsf3x+0x7c>
    2fa6:	1f 16       	cp	r1, r31
    2fa8:	ba 0b       	sbc	r27, r26
    2faa:	62 0b       	sbc	r22, r18
    2fac:	73 0b       	sbc	r23, r19
    2fae:	84 0b       	sbc	r24, r20
    2fb0:	ba f0       	brmi	.+46     	; 0x2fe0 <__addsf3x+0x98>
    2fb2:	91 50       	subi	r25, 0x01	; 1
    2fb4:	a1 f0       	breq	.+40     	; 0x2fde <__addsf3x+0x96>
    2fb6:	ff 0f       	add	r31, r31
    2fb8:	bb 1f       	adc	r27, r27
    2fba:	66 1f       	adc	r22, r22
    2fbc:	77 1f       	adc	r23, r23
    2fbe:	88 1f       	adc	r24, r24
    2fc0:	c2 f7       	brpl	.-16     	; 0x2fb2 <__addsf3x+0x6a>
    2fc2:	0e c0       	rjmp	.+28     	; 0x2fe0 <__addsf3x+0x98>
    2fc4:	ba 0f       	add	r27, r26
    2fc6:	62 1f       	adc	r22, r18
    2fc8:	73 1f       	adc	r23, r19
    2fca:	84 1f       	adc	r24, r20
    2fcc:	48 f4       	brcc	.+18     	; 0x2fe0 <__addsf3x+0x98>
    2fce:	87 95       	ror	r24
    2fd0:	77 95       	ror	r23
    2fd2:	67 95       	ror	r22
    2fd4:	b7 95       	ror	r27
    2fd6:	f7 95       	ror	r31
    2fd8:	9e 3f       	cpi	r25, 0xFE	; 254
    2fda:	08 f0       	brcs	.+2      	; 0x2fde <__addsf3x+0x96>
    2fdc:	b3 cf       	rjmp	.-154    	; 0x2f44 <__addsf3+0x1e>
    2fde:	93 95       	inc	r25
    2fe0:	88 0f       	add	r24, r24
    2fe2:	08 f0       	brcs	.+2      	; 0x2fe6 <__addsf3x+0x9e>
    2fe4:	99 27       	eor	r25, r25
    2fe6:	ee 0f       	add	r30, r30
    2fe8:	97 95       	ror	r25
    2fea:	87 95       	ror	r24
    2fec:	08 95       	ret

00002fee <__divsf3>:
    2fee:	0c d0       	rcall	.+24     	; 0x3008 <__divsf3x>
    2ff0:	eb c0       	rjmp	.+470    	; 0x31c8 <__fp_round>
    2ff2:	e3 d0       	rcall	.+454    	; 0x31ba <__fp_pscB>
    2ff4:	40 f0       	brcs	.+16     	; 0x3006 <__divsf3+0x18>
    2ff6:	da d0       	rcall	.+436    	; 0x31ac <__fp_pscA>
    2ff8:	30 f0       	brcs	.+12     	; 0x3006 <__divsf3+0x18>
    2ffa:	21 f4       	brne	.+8      	; 0x3004 <__divsf3+0x16>
    2ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ffe:	19 f0       	breq	.+6      	; 0x3006 <__divsf3+0x18>
    3000:	cc c0       	rjmp	.+408    	; 0x319a <__fp_inf>
    3002:	51 11       	cpse	r21, r1
    3004:	15 c1       	rjmp	.+554    	; 0x3230 <__fp_szero>
    3006:	cf c0       	rjmp	.+414    	; 0x31a6 <__fp_nan>

00003008 <__divsf3x>:
    3008:	f0 d0       	rcall	.+480    	; 0x31ea <__fp_split3>
    300a:	98 f3       	brcs	.-26     	; 0x2ff2 <__divsf3+0x4>

0000300c <__divsf3_pse>:
    300c:	99 23       	and	r25, r25
    300e:	c9 f3       	breq	.-14     	; 0x3002 <__divsf3+0x14>
    3010:	55 23       	and	r21, r21
    3012:	b1 f3       	breq	.-20     	; 0x3000 <__divsf3+0x12>
    3014:	95 1b       	sub	r25, r21
    3016:	55 0b       	sbc	r21, r21
    3018:	bb 27       	eor	r27, r27
    301a:	aa 27       	eor	r26, r26
    301c:	62 17       	cp	r22, r18
    301e:	73 07       	cpc	r23, r19
    3020:	84 07       	cpc	r24, r20
    3022:	38 f0       	brcs	.+14     	; 0x3032 <__divsf3_pse+0x26>
    3024:	9f 5f       	subi	r25, 0xFF	; 255
    3026:	5f 4f       	sbci	r21, 0xFF	; 255
    3028:	22 0f       	add	r18, r18
    302a:	33 1f       	adc	r19, r19
    302c:	44 1f       	adc	r20, r20
    302e:	aa 1f       	adc	r26, r26
    3030:	a9 f3       	breq	.-22     	; 0x301c <__divsf3_pse+0x10>
    3032:	33 d0       	rcall	.+102    	; 0x309a <__divsf3_pse+0x8e>
    3034:	0e 2e       	mov	r0, r30
    3036:	3a f0       	brmi	.+14     	; 0x3046 <__divsf3_pse+0x3a>
    3038:	e0 e8       	ldi	r30, 0x80	; 128
    303a:	30 d0       	rcall	.+96     	; 0x309c <__divsf3_pse+0x90>
    303c:	91 50       	subi	r25, 0x01	; 1
    303e:	50 40       	sbci	r21, 0x00	; 0
    3040:	e6 95       	lsr	r30
    3042:	00 1c       	adc	r0, r0
    3044:	ca f7       	brpl	.-14     	; 0x3038 <__divsf3_pse+0x2c>
    3046:	29 d0       	rcall	.+82     	; 0x309a <__divsf3_pse+0x8e>
    3048:	fe 2f       	mov	r31, r30
    304a:	27 d0       	rcall	.+78     	; 0x309a <__divsf3_pse+0x8e>
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	bb 1f       	adc	r27, r27
    3054:	26 17       	cp	r18, r22
    3056:	37 07       	cpc	r19, r23
    3058:	48 07       	cpc	r20, r24
    305a:	ab 07       	cpc	r26, r27
    305c:	b0 e8       	ldi	r27, 0x80	; 128
    305e:	09 f0       	breq	.+2      	; 0x3062 <__divsf3_pse+0x56>
    3060:	bb 0b       	sbc	r27, r27
    3062:	80 2d       	mov	r24, r0
    3064:	bf 01       	movw	r22, r30
    3066:	ff 27       	eor	r31, r31
    3068:	93 58       	subi	r25, 0x83	; 131
    306a:	5f 4f       	sbci	r21, 0xFF	; 255
    306c:	2a f0       	brmi	.+10     	; 0x3078 <__divsf3_pse+0x6c>
    306e:	9e 3f       	cpi	r25, 0xFE	; 254
    3070:	51 05       	cpc	r21, r1
    3072:	68 f0       	brcs	.+26     	; 0x308e <__divsf3_pse+0x82>
    3074:	92 c0       	rjmp	.+292    	; 0x319a <__fp_inf>
    3076:	dc c0       	rjmp	.+440    	; 0x3230 <__fp_szero>
    3078:	5f 3f       	cpi	r21, 0xFF	; 255
    307a:	ec f3       	brlt	.-6      	; 0x3076 <__divsf3_pse+0x6a>
    307c:	98 3e       	cpi	r25, 0xE8	; 232
    307e:	dc f3       	brlt	.-10     	; 0x3076 <__divsf3_pse+0x6a>
    3080:	86 95       	lsr	r24
    3082:	77 95       	ror	r23
    3084:	67 95       	ror	r22
    3086:	b7 95       	ror	r27
    3088:	f7 95       	ror	r31
    308a:	9f 5f       	subi	r25, 0xFF	; 255
    308c:	c9 f7       	brne	.-14     	; 0x3080 <__divsf3_pse+0x74>
    308e:	88 0f       	add	r24, r24
    3090:	91 1d       	adc	r25, r1
    3092:	96 95       	lsr	r25
    3094:	87 95       	ror	r24
    3096:	97 f9       	bld	r25, 7
    3098:	08 95       	ret
    309a:	e1 e0       	ldi	r30, 0x01	; 1
    309c:	66 0f       	add	r22, r22
    309e:	77 1f       	adc	r23, r23
    30a0:	88 1f       	adc	r24, r24
    30a2:	bb 1f       	adc	r27, r27
    30a4:	62 17       	cp	r22, r18
    30a6:	73 07       	cpc	r23, r19
    30a8:	84 07       	cpc	r24, r20
    30aa:	ba 07       	cpc	r27, r26
    30ac:	20 f0       	brcs	.+8      	; 0x30b6 <__divsf3_pse+0xaa>
    30ae:	62 1b       	sub	r22, r18
    30b0:	73 0b       	sbc	r23, r19
    30b2:	84 0b       	sbc	r24, r20
    30b4:	ba 0b       	sbc	r27, r26
    30b6:	ee 1f       	adc	r30, r30
    30b8:	88 f7       	brcc	.-30     	; 0x309c <__divsf3_pse+0x90>
    30ba:	e0 95       	com	r30
    30bc:	08 95       	ret

000030be <__fixsfsi>:
    30be:	04 d0       	rcall	.+8      	; 0x30c8 <__fixunssfsi>
    30c0:	68 94       	set
    30c2:	b1 11       	cpse	r27, r1
    30c4:	b5 c0       	rjmp	.+362    	; 0x3230 <__fp_szero>
    30c6:	08 95       	ret

000030c8 <__fixunssfsi>:
    30c8:	98 d0       	rcall	.+304    	; 0x31fa <__fp_splitA>
    30ca:	88 f0       	brcs	.+34     	; 0x30ee <__fixunssfsi+0x26>
    30cc:	9f 57       	subi	r25, 0x7F	; 127
    30ce:	90 f0       	brcs	.+36     	; 0x30f4 <__fixunssfsi+0x2c>
    30d0:	b9 2f       	mov	r27, r25
    30d2:	99 27       	eor	r25, r25
    30d4:	b7 51       	subi	r27, 0x17	; 23
    30d6:	a0 f0       	brcs	.+40     	; 0x3100 <__fixunssfsi+0x38>
    30d8:	d1 f0       	breq	.+52     	; 0x310e <__fixunssfsi+0x46>
    30da:	66 0f       	add	r22, r22
    30dc:	77 1f       	adc	r23, r23
    30de:	88 1f       	adc	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	1a f0       	brmi	.+6      	; 0x30ea <__fixunssfsi+0x22>
    30e4:	ba 95       	dec	r27
    30e6:	c9 f7       	brne	.-14     	; 0x30da <__fixunssfsi+0x12>
    30e8:	12 c0       	rjmp	.+36     	; 0x310e <__fixunssfsi+0x46>
    30ea:	b1 30       	cpi	r27, 0x01	; 1
    30ec:	81 f0       	breq	.+32     	; 0x310e <__fixunssfsi+0x46>
    30ee:	9f d0       	rcall	.+318    	; 0x322e <__fp_zero>
    30f0:	b1 e0       	ldi	r27, 0x01	; 1
    30f2:	08 95       	ret
    30f4:	9c c0       	rjmp	.+312    	; 0x322e <__fp_zero>
    30f6:	67 2f       	mov	r22, r23
    30f8:	78 2f       	mov	r23, r24
    30fa:	88 27       	eor	r24, r24
    30fc:	b8 5f       	subi	r27, 0xF8	; 248
    30fe:	39 f0       	breq	.+14     	; 0x310e <__fixunssfsi+0x46>
    3100:	b9 3f       	cpi	r27, 0xF9	; 249
    3102:	cc f3       	brlt	.-14     	; 0x30f6 <__fixunssfsi+0x2e>
    3104:	86 95       	lsr	r24
    3106:	77 95       	ror	r23
    3108:	67 95       	ror	r22
    310a:	b3 95       	inc	r27
    310c:	d9 f7       	brne	.-10     	; 0x3104 <__fixunssfsi+0x3c>
    310e:	3e f4       	brtc	.+14     	; 0x311e <__fixunssfsi+0x56>
    3110:	90 95       	com	r25
    3112:	80 95       	com	r24
    3114:	70 95       	com	r23
    3116:	61 95       	neg	r22
    3118:	7f 4f       	sbci	r23, 0xFF	; 255
    311a:	8f 4f       	sbci	r24, 0xFF	; 255
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	08 95       	ret

00003120 <__floatunsisf>:
    3120:	e8 94       	clt
    3122:	09 c0       	rjmp	.+18     	; 0x3136 <__floatsisf+0x12>

00003124 <__floatsisf>:
    3124:	97 fb       	bst	r25, 7
    3126:	3e f4       	brtc	.+14     	; 0x3136 <__floatsisf+0x12>
    3128:	90 95       	com	r25
    312a:	80 95       	com	r24
    312c:	70 95       	com	r23
    312e:	61 95       	neg	r22
    3130:	7f 4f       	sbci	r23, 0xFF	; 255
    3132:	8f 4f       	sbci	r24, 0xFF	; 255
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	99 23       	and	r25, r25
    3138:	a9 f0       	breq	.+42     	; 0x3164 <__floatsisf+0x40>
    313a:	f9 2f       	mov	r31, r25
    313c:	96 e9       	ldi	r25, 0x96	; 150
    313e:	bb 27       	eor	r27, r27
    3140:	93 95       	inc	r25
    3142:	f6 95       	lsr	r31
    3144:	87 95       	ror	r24
    3146:	77 95       	ror	r23
    3148:	67 95       	ror	r22
    314a:	b7 95       	ror	r27
    314c:	f1 11       	cpse	r31, r1
    314e:	f8 cf       	rjmp	.-16     	; 0x3140 <__floatsisf+0x1c>
    3150:	fa f4       	brpl	.+62     	; 0x3190 <__floatsisf+0x6c>
    3152:	bb 0f       	add	r27, r27
    3154:	11 f4       	brne	.+4      	; 0x315a <__floatsisf+0x36>
    3156:	60 ff       	sbrs	r22, 0
    3158:	1b c0       	rjmp	.+54     	; 0x3190 <__floatsisf+0x6c>
    315a:	6f 5f       	subi	r22, 0xFF	; 255
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	8f 4f       	sbci	r24, 0xFF	; 255
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	16 c0       	rjmp	.+44     	; 0x3190 <__floatsisf+0x6c>
    3164:	88 23       	and	r24, r24
    3166:	11 f0       	breq	.+4      	; 0x316c <__floatsisf+0x48>
    3168:	96 e9       	ldi	r25, 0x96	; 150
    316a:	11 c0       	rjmp	.+34     	; 0x318e <__floatsisf+0x6a>
    316c:	77 23       	and	r23, r23
    316e:	21 f0       	breq	.+8      	; 0x3178 <__floatsisf+0x54>
    3170:	9e e8       	ldi	r25, 0x8E	; 142
    3172:	87 2f       	mov	r24, r23
    3174:	76 2f       	mov	r23, r22
    3176:	05 c0       	rjmp	.+10     	; 0x3182 <__floatsisf+0x5e>
    3178:	66 23       	and	r22, r22
    317a:	71 f0       	breq	.+28     	; 0x3198 <__floatsisf+0x74>
    317c:	96 e8       	ldi	r25, 0x86	; 134
    317e:	86 2f       	mov	r24, r22
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	2a f0       	brmi	.+10     	; 0x3190 <__floatsisf+0x6c>
    3186:	9a 95       	dec	r25
    3188:	66 0f       	add	r22, r22
    318a:	77 1f       	adc	r23, r23
    318c:	88 1f       	adc	r24, r24
    318e:	da f7       	brpl	.-10     	; 0x3186 <__floatsisf+0x62>
    3190:	88 0f       	add	r24, r24
    3192:	96 95       	lsr	r25
    3194:	87 95       	ror	r24
    3196:	97 f9       	bld	r25, 7
    3198:	08 95       	ret

0000319a <__fp_inf>:
    319a:	97 f9       	bld	r25, 7
    319c:	9f 67       	ori	r25, 0x7F	; 127
    319e:	80 e8       	ldi	r24, 0x80	; 128
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	08 95       	ret

000031a6 <__fp_nan>:
    31a6:	9f ef       	ldi	r25, 0xFF	; 255
    31a8:	80 ec       	ldi	r24, 0xC0	; 192
    31aa:	08 95       	ret

000031ac <__fp_pscA>:
    31ac:	00 24       	eor	r0, r0
    31ae:	0a 94       	dec	r0
    31b0:	16 16       	cp	r1, r22
    31b2:	17 06       	cpc	r1, r23
    31b4:	18 06       	cpc	r1, r24
    31b6:	09 06       	cpc	r0, r25
    31b8:	08 95       	ret

000031ba <__fp_pscB>:
    31ba:	00 24       	eor	r0, r0
    31bc:	0a 94       	dec	r0
    31be:	12 16       	cp	r1, r18
    31c0:	13 06       	cpc	r1, r19
    31c2:	14 06       	cpc	r1, r20
    31c4:	05 06       	cpc	r0, r21
    31c6:	08 95       	ret

000031c8 <__fp_round>:
    31c8:	09 2e       	mov	r0, r25
    31ca:	03 94       	inc	r0
    31cc:	00 0c       	add	r0, r0
    31ce:	11 f4       	brne	.+4      	; 0x31d4 <__fp_round+0xc>
    31d0:	88 23       	and	r24, r24
    31d2:	52 f0       	brmi	.+20     	; 0x31e8 <__fp_round+0x20>
    31d4:	bb 0f       	add	r27, r27
    31d6:	40 f4       	brcc	.+16     	; 0x31e8 <__fp_round+0x20>
    31d8:	bf 2b       	or	r27, r31
    31da:	11 f4       	brne	.+4      	; 0x31e0 <__fp_round+0x18>
    31dc:	60 ff       	sbrs	r22, 0
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <__fp_round+0x20>
    31e0:	6f 5f       	subi	r22, 0xFF	; 255
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	8f 4f       	sbci	r24, 0xFF	; 255
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	08 95       	ret

000031ea <__fp_split3>:
    31ea:	57 fd       	sbrc	r21, 7
    31ec:	90 58       	subi	r25, 0x80	; 128
    31ee:	44 0f       	add	r20, r20
    31f0:	55 1f       	adc	r21, r21
    31f2:	59 f0       	breq	.+22     	; 0x320a <__fp_splitA+0x10>
    31f4:	5f 3f       	cpi	r21, 0xFF	; 255
    31f6:	71 f0       	breq	.+28     	; 0x3214 <__fp_splitA+0x1a>
    31f8:	47 95       	ror	r20

000031fa <__fp_splitA>:
    31fa:	88 0f       	add	r24, r24
    31fc:	97 fb       	bst	r25, 7
    31fe:	99 1f       	adc	r25, r25
    3200:	61 f0       	breq	.+24     	; 0x321a <__fp_splitA+0x20>
    3202:	9f 3f       	cpi	r25, 0xFF	; 255
    3204:	79 f0       	breq	.+30     	; 0x3224 <__fp_splitA+0x2a>
    3206:	87 95       	ror	r24
    3208:	08 95       	ret
    320a:	12 16       	cp	r1, r18
    320c:	13 06       	cpc	r1, r19
    320e:	14 06       	cpc	r1, r20
    3210:	55 1f       	adc	r21, r21
    3212:	f2 cf       	rjmp	.-28     	; 0x31f8 <__fp_split3+0xe>
    3214:	46 95       	lsr	r20
    3216:	f1 df       	rcall	.-30     	; 0x31fa <__fp_splitA>
    3218:	08 c0       	rjmp	.+16     	; 0x322a <__fp_splitA+0x30>
    321a:	16 16       	cp	r1, r22
    321c:	17 06       	cpc	r1, r23
    321e:	18 06       	cpc	r1, r24
    3220:	99 1f       	adc	r25, r25
    3222:	f1 cf       	rjmp	.-30     	; 0x3206 <__fp_splitA+0xc>
    3224:	86 95       	lsr	r24
    3226:	71 05       	cpc	r23, r1
    3228:	61 05       	cpc	r22, r1
    322a:	08 94       	sec
    322c:	08 95       	ret

0000322e <__fp_zero>:
    322e:	e8 94       	clt

00003230 <__fp_szero>:
    3230:	bb 27       	eor	r27, r27
    3232:	66 27       	eor	r22, r22
    3234:	77 27       	eor	r23, r23
    3236:	cb 01       	movw	r24, r22
    3238:	97 f9       	bld	r25, 7
    323a:	08 95       	ret

0000323c <__mulsf3>:
    323c:	0b d0       	rcall	.+22     	; 0x3254 <__mulsf3x>
    323e:	c4 cf       	rjmp	.-120    	; 0x31c8 <__fp_round>
    3240:	b5 df       	rcall	.-150    	; 0x31ac <__fp_pscA>
    3242:	28 f0       	brcs	.+10     	; 0x324e <__mulsf3+0x12>
    3244:	ba df       	rcall	.-140    	; 0x31ba <__fp_pscB>
    3246:	18 f0       	brcs	.+6      	; 0x324e <__mulsf3+0x12>
    3248:	95 23       	and	r25, r21
    324a:	09 f0       	breq	.+2      	; 0x324e <__mulsf3+0x12>
    324c:	a6 cf       	rjmp	.-180    	; 0x319a <__fp_inf>
    324e:	ab cf       	rjmp	.-170    	; 0x31a6 <__fp_nan>
    3250:	11 24       	eor	r1, r1
    3252:	ee cf       	rjmp	.-36     	; 0x3230 <__fp_szero>

00003254 <__mulsf3x>:
    3254:	ca df       	rcall	.-108    	; 0x31ea <__fp_split3>
    3256:	a0 f3       	brcs	.-24     	; 0x3240 <__mulsf3+0x4>

00003258 <__mulsf3_pse>:
    3258:	95 9f       	mul	r25, r21
    325a:	d1 f3       	breq	.-12     	; 0x3250 <__mulsf3+0x14>
    325c:	95 0f       	add	r25, r21
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	55 1f       	adc	r21, r21
    3262:	62 9f       	mul	r22, r18
    3264:	f0 01       	movw	r30, r0
    3266:	72 9f       	mul	r23, r18
    3268:	bb 27       	eor	r27, r27
    326a:	f0 0d       	add	r31, r0
    326c:	b1 1d       	adc	r27, r1
    326e:	63 9f       	mul	r22, r19
    3270:	aa 27       	eor	r26, r26
    3272:	f0 0d       	add	r31, r0
    3274:	b1 1d       	adc	r27, r1
    3276:	aa 1f       	adc	r26, r26
    3278:	64 9f       	mul	r22, r20
    327a:	66 27       	eor	r22, r22
    327c:	b0 0d       	add	r27, r0
    327e:	a1 1d       	adc	r26, r1
    3280:	66 1f       	adc	r22, r22
    3282:	82 9f       	mul	r24, r18
    3284:	22 27       	eor	r18, r18
    3286:	b0 0d       	add	r27, r0
    3288:	a1 1d       	adc	r26, r1
    328a:	62 1f       	adc	r22, r18
    328c:	73 9f       	mul	r23, r19
    328e:	b0 0d       	add	r27, r0
    3290:	a1 1d       	adc	r26, r1
    3292:	62 1f       	adc	r22, r18
    3294:	83 9f       	mul	r24, r19
    3296:	a0 0d       	add	r26, r0
    3298:	61 1d       	adc	r22, r1
    329a:	22 1f       	adc	r18, r18
    329c:	74 9f       	mul	r23, r20
    329e:	33 27       	eor	r19, r19
    32a0:	a0 0d       	add	r26, r0
    32a2:	61 1d       	adc	r22, r1
    32a4:	23 1f       	adc	r18, r19
    32a6:	84 9f       	mul	r24, r20
    32a8:	60 0d       	add	r22, r0
    32aa:	21 1d       	adc	r18, r1
    32ac:	82 2f       	mov	r24, r18
    32ae:	76 2f       	mov	r23, r22
    32b0:	6a 2f       	mov	r22, r26
    32b2:	11 24       	eor	r1, r1
    32b4:	9f 57       	subi	r25, 0x7F	; 127
    32b6:	50 40       	sbci	r21, 0x00	; 0
    32b8:	8a f0       	brmi	.+34     	; 0x32dc <__mulsf3_pse+0x84>
    32ba:	e1 f0       	breq	.+56     	; 0x32f4 <__mulsf3_pse+0x9c>
    32bc:	88 23       	and	r24, r24
    32be:	4a f0       	brmi	.+18     	; 0x32d2 <__mulsf3_pse+0x7a>
    32c0:	ee 0f       	add	r30, r30
    32c2:	ff 1f       	adc	r31, r31
    32c4:	bb 1f       	adc	r27, r27
    32c6:	66 1f       	adc	r22, r22
    32c8:	77 1f       	adc	r23, r23
    32ca:	88 1f       	adc	r24, r24
    32cc:	91 50       	subi	r25, 0x01	; 1
    32ce:	50 40       	sbci	r21, 0x00	; 0
    32d0:	a9 f7       	brne	.-22     	; 0x32bc <__mulsf3_pse+0x64>
    32d2:	9e 3f       	cpi	r25, 0xFE	; 254
    32d4:	51 05       	cpc	r21, r1
    32d6:	70 f0       	brcs	.+28     	; 0x32f4 <__mulsf3_pse+0x9c>
    32d8:	60 cf       	rjmp	.-320    	; 0x319a <__fp_inf>
    32da:	aa cf       	rjmp	.-172    	; 0x3230 <__fp_szero>
    32dc:	5f 3f       	cpi	r21, 0xFF	; 255
    32de:	ec f3       	brlt	.-6      	; 0x32da <__mulsf3_pse+0x82>
    32e0:	98 3e       	cpi	r25, 0xE8	; 232
    32e2:	dc f3       	brlt	.-10     	; 0x32da <__mulsf3_pse+0x82>
    32e4:	86 95       	lsr	r24
    32e6:	77 95       	ror	r23
    32e8:	67 95       	ror	r22
    32ea:	b7 95       	ror	r27
    32ec:	f7 95       	ror	r31
    32ee:	e7 95       	ror	r30
    32f0:	9f 5f       	subi	r25, 0xFF	; 255
    32f2:	c1 f7       	brne	.-16     	; 0x32e4 <__mulsf3_pse+0x8c>
    32f4:	fe 2b       	or	r31, r30
    32f6:	88 0f       	add	r24, r24
    32f8:	91 1d       	adc	r25, r1
    32fa:	96 95       	lsr	r25
    32fc:	87 95       	ror	r24
    32fe:	97 f9       	bld	r25, 7
    3300:	08 95       	ret

00003302 <pow>:
    3302:	fa 01       	movw	r30, r20
    3304:	ee 0f       	add	r30, r30
    3306:	ff 1f       	adc	r31, r31
    3308:	30 96       	adiw	r30, 0x00	; 0
    330a:	21 05       	cpc	r18, r1
    330c:	31 05       	cpc	r19, r1
    330e:	99 f1       	breq	.+102    	; 0x3376 <pow+0x74>
    3310:	61 15       	cp	r22, r1
    3312:	71 05       	cpc	r23, r1
    3314:	61 f4       	brne	.+24     	; 0x332e <pow+0x2c>
    3316:	80 38       	cpi	r24, 0x80	; 128
    3318:	bf e3       	ldi	r27, 0x3F	; 63
    331a:	9b 07       	cpc	r25, r27
    331c:	49 f1       	breq	.+82     	; 0x3370 <pow+0x6e>
    331e:	68 94       	set
    3320:	90 38       	cpi	r25, 0x80	; 128
    3322:	81 05       	cpc	r24, r1
    3324:	61 f0       	breq	.+24     	; 0x333e <pow+0x3c>
    3326:	80 38       	cpi	r24, 0x80	; 128
    3328:	bf ef       	ldi	r27, 0xFF	; 255
    332a:	9b 07       	cpc	r25, r27
    332c:	41 f0       	breq	.+16     	; 0x333e <pow+0x3c>
    332e:	99 23       	and	r25, r25
    3330:	42 f5       	brpl	.+80     	; 0x3382 <pow+0x80>
    3332:	ff 3f       	cpi	r31, 0xFF	; 255
    3334:	e1 05       	cpc	r30, r1
    3336:	31 05       	cpc	r19, r1
    3338:	21 05       	cpc	r18, r1
    333a:	11 f1       	breq	.+68     	; 0x3380 <pow+0x7e>
    333c:	e8 94       	clt
    333e:	08 94       	sec
    3340:	e7 95       	ror	r30
    3342:	d9 01       	movw	r26, r18
    3344:	aa 23       	and	r26, r26
    3346:	29 f4       	brne	.+10     	; 0x3352 <pow+0x50>
    3348:	ab 2f       	mov	r26, r27
    334a:	be 2f       	mov	r27, r30
    334c:	f8 5f       	subi	r31, 0xF8	; 248
    334e:	d0 f3       	brcs	.-12     	; 0x3344 <pow+0x42>
    3350:	10 c0       	rjmp	.+32     	; 0x3372 <pow+0x70>
    3352:	ff 5f       	subi	r31, 0xFF	; 255
    3354:	70 f4       	brcc	.+28     	; 0x3372 <pow+0x70>
    3356:	a6 95       	lsr	r26
    3358:	e0 f7       	brcc	.-8      	; 0x3352 <pow+0x50>
    335a:	f7 39       	cpi	r31, 0x97	; 151
    335c:	50 f0       	brcs	.+20     	; 0x3372 <pow+0x70>
    335e:	19 f0       	breq	.+6      	; 0x3366 <pow+0x64>
    3360:	ff 3a       	cpi	r31, 0xAF	; 175
    3362:	38 f4       	brcc	.+14     	; 0x3372 <pow+0x70>
    3364:	9f 77       	andi	r25, 0x7F	; 127
    3366:	9f 93       	push	r25
    3368:	0c d0       	rcall	.+24     	; 0x3382 <pow+0x80>
    336a:	0f 90       	pop	r0
    336c:	07 fc       	sbrc	r0, 7
    336e:	90 58       	subi	r25, 0x80	; 128
    3370:	08 95       	ret
    3372:	3e f0       	brts	.+14     	; 0x3382 <pow+0x80>
    3374:	18 cf       	rjmp	.-464    	; 0x31a6 <__fp_nan>
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	80 e8       	ldi	r24, 0x80	; 128
    337c:	9f e3       	ldi	r25, 0x3F	; 63
    337e:	08 95       	ret
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	9f 77       	andi	r25, 0x7F	; 127
    3384:	5f 93       	push	r21
    3386:	4f 93       	push	r20
    3388:	3f 93       	push	r19
    338a:	2f 93       	push	r18
    338c:	9e d0       	rcall	.+316    	; 0x34ca <log>
    338e:	2f 91       	pop	r18
    3390:	3f 91       	pop	r19
    3392:	4f 91       	pop	r20
    3394:	5f 91       	pop	r21
    3396:	52 df       	rcall	.-348    	; 0x323c <__mulsf3>
    3398:	05 c0       	rjmp	.+10     	; 0x33a4 <exp>
    339a:	19 f4       	brne	.+6      	; 0x33a2 <pow+0xa0>
    339c:	0e f0       	brts	.+2      	; 0x33a0 <pow+0x9e>
    339e:	fd ce       	rjmp	.-518    	; 0x319a <__fp_inf>
    33a0:	46 cf       	rjmp	.-372    	; 0x322e <__fp_zero>
    33a2:	01 cf       	rjmp	.-510    	; 0x31a6 <__fp_nan>

000033a4 <exp>:
    33a4:	2a df       	rcall	.-428    	; 0x31fa <__fp_splitA>
    33a6:	c8 f3       	brcs	.-14     	; 0x339a <pow+0x98>
    33a8:	96 38       	cpi	r25, 0x86	; 134
    33aa:	c0 f7       	brcc	.-16     	; 0x339c <pow+0x9a>
    33ac:	07 f8       	bld	r0, 7
    33ae:	0f 92       	push	r0
    33b0:	e8 94       	clt
    33b2:	2b e3       	ldi	r18, 0x3B	; 59
    33b4:	3a ea       	ldi	r19, 0xAA	; 170
    33b6:	48 eb       	ldi	r20, 0xB8	; 184
    33b8:	5f e7       	ldi	r21, 0x7F	; 127
    33ba:	4e df       	rcall	.-356    	; 0x3258 <__mulsf3_pse>
    33bc:	0f 92       	push	r0
    33be:	0f 92       	push	r0
    33c0:	0f 92       	push	r0
    33c2:	4d b7       	in	r20, 0x3d	; 61
    33c4:	5e b7       	in	r21, 0x3e	; 62
    33c6:	0f 92       	push	r0
    33c8:	c0 d0       	rcall	.+384    	; 0x354a <modf>
    33ca:	e4 ee       	ldi	r30, 0xE4	; 228
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	16 d0       	rcall	.+44     	; 0x33fc <__fp_powser>
    33d0:	4f 91       	pop	r20
    33d2:	5f 91       	pop	r21
    33d4:	ef 91       	pop	r30
    33d6:	ff 91       	pop	r31
    33d8:	e5 95       	asr	r30
    33da:	ee 1f       	adc	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	49 f0       	breq	.+18     	; 0x33f2 <exp+0x4e>
    33e0:	fe 57       	subi	r31, 0x7E	; 126
    33e2:	e0 68       	ori	r30, 0x80	; 128
    33e4:	44 27       	eor	r20, r20
    33e6:	ee 0f       	add	r30, r30
    33e8:	44 1f       	adc	r20, r20
    33ea:	fa 95       	dec	r31
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <exp+0x42>
    33ee:	41 95       	neg	r20
    33f0:	55 0b       	sbc	r21, r21
    33f2:	32 d0       	rcall	.+100    	; 0x3458 <ldexp>
    33f4:	0f 90       	pop	r0
    33f6:	07 fe       	sbrs	r0, 7
    33f8:	26 c0       	rjmp	.+76     	; 0x3446 <inverse>
    33fa:	08 95       	ret

000033fc <__fp_powser>:
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	1f 93       	push	r17
    3402:	0f 93       	push	r16
    3404:	ff 92       	push	r15
    3406:	ef 92       	push	r14
    3408:	df 92       	push	r13
    340a:	7b 01       	movw	r14, r22
    340c:	8c 01       	movw	r16, r24
    340e:	68 94       	set
    3410:	05 c0       	rjmp	.+10     	; 0x341c <__fp_powser+0x20>
    3412:	da 2e       	mov	r13, r26
    3414:	ef 01       	movw	r28, r30
    3416:	1e df       	rcall	.-452    	; 0x3254 <__mulsf3x>
    3418:	fe 01       	movw	r30, r28
    341a:	e8 94       	clt
    341c:	a5 91       	lpm	r26, Z+
    341e:	25 91       	lpm	r18, Z+
    3420:	35 91       	lpm	r19, Z+
    3422:	45 91       	lpm	r20, Z+
    3424:	55 91       	lpm	r21, Z+
    3426:	ae f3       	brts	.-22     	; 0x3412 <__fp_powser+0x16>
    3428:	ef 01       	movw	r28, r30
    342a:	8e dd       	rcall	.-1252   	; 0x2f48 <__addsf3x>
    342c:	fe 01       	movw	r30, r28
    342e:	97 01       	movw	r18, r14
    3430:	a8 01       	movw	r20, r16
    3432:	da 94       	dec	r13
    3434:	79 f7       	brne	.-34     	; 0x3414 <__fp_powser+0x18>
    3436:	df 90       	pop	r13
    3438:	ef 90       	pop	r14
    343a:	ff 90       	pop	r15
    343c:	0f 91       	pop	r16
    343e:	1f 91       	pop	r17
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <inverse>:
    3446:	9b 01       	movw	r18, r22
    3448:	ac 01       	movw	r20, r24
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	80 e8       	ldi	r24, 0x80	; 128
    3450:	9f e3       	ldi	r25, 0x3F	; 63
    3452:	cd cd       	rjmp	.-1126   	; 0x2fee <__divsf3>
    3454:	a2 ce       	rjmp	.-700    	; 0x319a <__fp_inf>
    3456:	ac c0       	rjmp	.+344    	; 0x35b0 <__fp_mpack>

00003458 <ldexp>:
    3458:	d0 de       	rcall	.-608    	; 0x31fa <__fp_splitA>
    345a:	e8 f3       	brcs	.-6      	; 0x3456 <inverse+0x10>
    345c:	99 23       	and	r25, r25
    345e:	d9 f3       	breq	.-10     	; 0x3456 <inverse+0x10>
    3460:	94 0f       	add	r25, r20
    3462:	51 1d       	adc	r21, r1
    3464:	bb f3       	brvs	.-18     	; 0x3454 <inverse+0xe>
    3466:	91 50       	subi	r25, 0x01	; 1
    3468:	50 40       	sbci	r21, 0x00	; 0
    346a:	94 f0       	brlt	.+36     	; 0x3490 <ldexp+0x38>
    346c:	59 f0       	breq	.+22     	; 0x3484 <ldexp+0x2c>
    346e:	88 23       	and	r24, r24
    3470:	32 f0       	brmi	.+12     	; 0x347e <ldexp+0x26>
    3472:	66 0f       	add	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	91 50       	subi	r25, 0x01	; 1
    347a:	50 40       	sbci	r21, 0x00	; 0
    347c:	c1 f7       	brne	.-16     	; 0x346e <ldexp+0x16>
    347e:	9e 3f       	cpi	r25, 0xFE	; 254
    3480:	51 05       	cpc	r21, r1
    3482:	44 f7       	brge	.-48     	; 0x3454 <inverse+0xe>
    3484:	88 0f       	add	r24, r24
    3486:	91 1d       	adc	r25, r1
    3488:	96 95       	lsr	r25
    348a:	87 95       	ror	r24
    348c:	97 f9       	bld	r25, 7
    348e:	08 95       	ret
    3490:	5f 3f       	cpi	r21, 0xFF	; 255
    3492:	ac f0       	brlt	.+42     	; 0x34be <ldexp+0x66>
    3494:	98 3e       	cpi	r25, 0xE8	; 232
    3496:	9c f0       	brlt	.+38     	; 0x34be <ldexp+0x66>
    3498:	bb 27       	eor	r27, r27
    349a:	86 95       	lsr	r24
    349c:	77 95       	ror	r23
    349e:	67 95       	ror	r22
    34a0:	b7 95       	ror	r27
    34a2:	08 f4       	brcc	.+2      	; 0x34a6 <ldexp+0x4e>
    34a4:	b1 60       	ori	r27, 0x01	; 1
    34a6:	93 95       	inc	r25
    34a8:	c1 f7       	brne	.-16     	; 0x349a <ldexp+0x42>
    34aa:	bb 0f       	add	r27, r27
    34ac:	58 f7       	brcc	.-42     	; 0x3484 <ldexp+0x2c>
    34ae:	11 f4       	brne	.+4      	; 0x34b4 <ldexp+0x5c>
    34b0:	60 ff       	sbrs	r22, 0
    34b2:	e8 cf       	rjmp	.-48     	; 0x3484 <ldexp+0x2c>
    34b4:	6f 5f       	subi	r22, 0xFF	; 255
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	8f 4f       	sbci	r24, 0xFF	; 255
    34ba:	9f 4f       	sbci	r25, 0xFF	; 255
    34bc:	e3 cf       	rjmp	.-58     	; 0x3484 <ldexp+0x2c>
    34be:	b8 ce       	rjmp	.-656    	; 0x3230 <__fp_szero>
    34c0:	0e f0       	brts	.+2      	; 0x34c4 <ldexp+0x6c>
    34c2:	76 c0       	rjmp	.+236    	; 0x35b0 <__fp_mpack>
    34c4:	70 ce       	rjmp	.-800    	; 0x31a6 <__fp_nan>
    34c6:	68 94       	set
    34c8:	68 ce       	rjmp	.-816    	; 0x319a <__fp_inf>

000034ca <log>:
    34ca:	97 de       	rcall	.-722    	; 0x31fa <__fp_splitA>
    34cc:	c8 f3       	brcs	.-14     	; 0x34c0 <ldexp+0x68>
    34ce:	99 23       	and	r25, r25
    34d0:	d1 f3       	breq	.-12     	; 0x34c6 <ldexp+0x6e>
    34d2:	c6 f3       	brts	.-16     	; 0x34c4 <ldexp+0x6c>
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	1f 93       	push	r17
    34da:	0f 93       	push	r16
    34dc:	ff 92       	push	r15
    34de:	c9 2f       	mov	r28, r25
    34e0:	dd 27       	eor	r29, r29
    34e2:	88 23       	and	r24, r24
    34e4:	2a f0       	brmi	.+10     	; 0x34f0 <log+0x26>
    34e6:	21 97       	sbiw	r28, 0x01	; 1
    34e8:	66 0f       	add	r22, r22
    34ea:	77 1f       	adc	r23, r23
    34ec:	88 1f       	adc	r24, r24
    34ee:	da f7       	brpl	.-10     	; 0x34e6 <log+0x1c>
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e8       	ldi	r20, 0x80	; 128
    34f6:	5f eb       	ldi	r21, 0xBF	; 191
    34f8:	9f e3       	ldi	r25, 0x3F	; 63
    34fa:	88 39       	cpi	r24, 0x98	; 152
    34fc:	20 f0       	brcs	.+8      	; 0x3506 <log+0x3c>
    34fe:	80 3e       	cpi	r24, 0xE0	; 224
    3500:	30 f0       	brcs	.+12     	; 0x350e <log+0x44>
    3502:	21 96       	adiw	r28, 0x01	; 1
    3504:	8f 77       	andi	r24, 0x7F	; 127
    3506:	0f dd       	rcall	.-1506   	; 0x2f26 <__addsf3>
    3508:	ec e0       	ldi	r30, 0x0C	; 12
    350a:	f1 e0       	ldi	r31, 0x01	; 1
    350c:	03 c0       	rjmp	.+6      	; 0x3514 <log+0x4a>
    350e:	0b dd       	rcall	.-1514   	; 0x2f26 <__addsf3>
    3510:	e9 e3       	ldi	r30, 0x39	; 57
    3512:	f1 e0       	ldi	r31, 0x01	; 1
    3514:	73 df       	rcall	.-282    	; 0x33fc <__fp_powser>
    3516:	8b 01       	movw	r16, r22
    3518:	be 01       	movw	r22, r28
    351a:	ec 01       	movw	r28, r24
    351c:	fb 2e       	mov	r15, r27
    351e:	6f 57       	subi	r22, 0x7F	; 127
    3520:	71 09       	sbc	r23, r1
    3522:	75 95       	asr	r23
    3524:	77 1f       	adc	r23, r23
    3526:	88 0b       	sbc	r24, r24
    3528:	99 0b       	sbc	r25, r25
    352a:	fc dd       	rcall	.-1032   	; 0x3124 <__floatsisf>
    352c:	28 e1       	ldi	r18, 0x18	; 24
    352e:	32 e7       	ldi	r19, 0x72	; 114
    3530:	41 e3       	ldi	r20, 0x31	; 49
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	8f de       	rcall	.-738    	; 0x3254 <__mulsf3x>
    3536:	af 2d       	mov	r26, r15
    3538:	98 01       	movw	r18, r16
    353a:	ae 01       	movw	r20, r28
    353c:	ff 90       	pop	r15
    353e:	0f 91       	pop	r16
    3540:	1f 91       	pop	r17
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	00 dd       	rcall	.-1536   	; 0x2f48 <__addsf3x>
    3548:	3f ce       	rjmp	.-898    	; 0x31c8 <__fp_round>

0000354a <modf>:
    354a:	fa 01       	movw	r30, r20
    354c:	dc 01       	movw	r26, r24
    354e:	aa 0f       	add	r26, r26
    3550:	bb 1f       	adc	r27, r27
    3552:	9b 01       	movw	r18, r22
    3554:	ac 01       	movw	r20, r24
    3556:	bf 57       	subi	r27, 0x7F	; 127
    3558:	28 f4       	brcc	.+10     	; 0x3564 <modf+0x1a>
    355a:	22 27       	eor	r18, r18
    355c:	33 27       	eor	r19, r19
    355e:	44 27       	eor	r20, r20
    3560:	50 78       	andi	r21, 0x80	; 128
    3562:	1f c0       	rjmp	.+62     	; 0x35a2 <modf+0x58>
    3564:	b7 51       	subi	r27, 0x17	; 23
    3566:	88 f4       	brcc	.+34     	; 0x358a <modf+0x40>
    3568:	ab 2f       	mov	r26, r27
    356a:	00 24       	eor	r0, r0
    356c:	46 95       	lsr	r20
    356e:	37 95       	ror	r19
    3570:	27 95       	ror	r18
    3572:	01 1c       	adc	r0, r1
    3574:	a3 95       	inc	r26
    3576:	d2 f3       	brmi	.-12     	; 0x356c <modf+0x22>
    3578:	00 20       	and	r0, r0
    357a:	69 f0       	breq	.+26     	; 0x3596 <modf+0x4c>
    357c:	22 0f       	add	r18, r18
    357e:	33 1f       	adc	r19, r19
    3580:	44 1f       	adc	r20, r20
    3582:	b3 95       	inc	r27
    3584:	da f3       	brmi	.-10     	; 0x357c <modf+0x32>
    3586:	0d d0       	rcall	.+26     	; 0x35a2 <modf+0x58>
    3588:	cd cc       	rjmp	.-1638   	; 0x2f24 <__subsf3>
    358a:	61 30       	cpi	r22, 0x01	; 1
    358c:	71 05       	cpc	r23, r1
    358e:	a0 e8       	ldi	r26, 0x80	; 128
    3590:	8a 07       	cpc	r24, r26
    3592:	b9 46       	sbci	r27, 0x69	; 105
    3594:	30 f4       	brcc	.+12     	; 0x35a2 <modf+0x58>
    3596:	9b 01       	movw	r18, r22
    3598:	ac 01       	movw	r20, r24
    359a:	66 27       	eor	r22, r22
    359c:	77 27       	eor	r23, r23
    359e:	88 27       	eor	r24, r24
    35a0:	90 78       	andi	r25, 0x80	; 128
    35a2:	30 96       	adiw	r30, 0x00	; 0
    35a4:	21 f0       	breq	.+8      	; 0x35ae <modf+0x64>
    35a6:	20 83       	st	Z, r18
    35a8:	31 83       	std	Z+1, r19	; 0x01
    35aa:	42 83       	std	Z+2, r20	; 0x02
    35ac:	53 83       	std	Z+3, r21	; 0x03
    35ae:	08 95       	ret

000035b0 <__fp_mpack>:
    35b0:	9f 3f       	cpi	r25, 0xFF	; 255
    35b2:	31 f0       	breq	.+12     	; 0x35c0 <__fp_mpack_finite+0xc>

000035b4 <__fp_mpack_finite>:
    35b4:	91 50       	subi	r25, 0x01	; 1
    35b6:	20 f4       	brcc	.+8      	; 0x35c0 <__fp_mpack_finite+0xc>
    35b8:	87 95       	ror	r24
    35ba:	77 95       	ror	r23
    35bc:	67 95       	ror	r22
    35be:	b7 95       	ror	r27
    35c0:	88 0f       	add	r24, r24
    35c2:	91 1d       	adc	r25, r1
    35c4:	96 95       	lsr	r25
    35c6:	87 95       	ror	r24
    35c8:	97 f9       	bld	r25, 7
    35ca:	08 95       	ret

000035cc <__udivmodhi4>:
    35cc:	aa 1b       	sub	r26, r26
    35ce:	bb 1b       	sub	r27, r27
    35d0:	51 e1       	ldi	r21, 0x11	; 17
    35d2:	07 c0       	rjmp	.+14     	; 0x35e2 <__udivmodhi4_ep>

000035d4 <__udivmodhi4_loop>:
    35d4:	aa 1f       	adc	r26, r26
    35d6:	bb 1f       	adc	r27, r27
    35d8:	a6 17       	cp	r26, r22
    35da:	b7 07       	cpc	r27, r23
    35dc:	10 f0       	brcs	.+4      	; 0x35e2 <__udivmodhi4_ep>
    35de:	a6 1b       	sub	r26, r22
    35e0:	b7 0b       	sbc	r27, r23

000035e2 <__udivmodhi4_ep>:
    35e2:	88 1f       	adc	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	5a 95       	dec	r21
    35e8:	a9 f7       	brne	.-22     	; 0x35d4 <__udivmodhi4_loop>
    35ea:	80 95       	com	r24
    35ec:	90 95       	com	r25
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	08 95       	ret

000035f4 <__divmodhi4>:
    35f4:	97 fb       	bst	r25, 7
    35f6:	09 2e       	mov	r0, r25
    35f8:	07 26       	eor	r0, r23
    35fa:	0a d0       	rcall	.+20     	; 0x3610 <__divmodhi4_neg1>
    35fc:	77 fd       	sbrc	r23, 7
    35fe:	04 d0       	rcall	.+8      	; 0x3608 <__divmodhi4_neg2>
    3600:	e5 df       	rcall	.-54     	; 0x35cc <__udivmodhi4>
    3602:	06 d0       	rcall	.+12     	; 0x3610 <__divmodhi4_neg1>
    3604:	00 20       	and	r0, r0
    3606:	1a f4       	brpl	.+6      	; 0x360e <__divmodhi4_exit>

00003608 <__divmodhi4_neg2>:
    3608:	70 95       	com	r23
    360a:	61 95       	neg	r22
    360c:	7f 4f       	sbci	r23, 0xFF	; 255

0000360e <__divmodhi4_exit>:
    360e:	08 95       	ret

00003610 <__divmodhi4_neg1>:
    3610:	f6 f7       	brtc	.-4      	; 0x360e <__divmodhi4_exit>
    3612:	90 95       	com	r25
    3614:	81 95       	neg	r24
    3616:	9f 4f       	sbci	r25, 0xFF	; 255
    3618:	08 95       	ret

0000361a <isupper>:
    361a:	85 fd       	sbrc	r24, 5
    361c:	07 c0       	rjmp	.+14     	; 0x362c <__ctype_isfalse>

0000361e <isalpha>:
    361e:	80 62       	ori	r24, 0x20	; 32

00003620 <islower>:
    3620:	91 11       	cpse	r25, r1
    3622:	04 c0       	rjmp	.+8      	; 0x362c <__ctype_isfalse>
    3624:	81 56       	subi	r24, 0x61	; 97
    3626:	8a 51       	subi	r24, 0x1A	; 26
    3628:	e0 f7       	brcc	.-8      	; 0x3622 <islower+0x2>
    362a:	08 95       	ret

0000362c <__ctype_isfalse>:
    362c:	99 27       	eor	r25, r25
    362e:	88 27       	eor	r24, r24

00003630 <__ctype_istrue>:
    3630:	08 95       	ret

00003632 <_exit>:
    3632:	f8 94       	cli

00003634 <__stop_program>:
    3634:	ff cf       	rjmp	.-2      	; 0x3634 <__stop_program>
